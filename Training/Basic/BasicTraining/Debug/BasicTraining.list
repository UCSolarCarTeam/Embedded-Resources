
BasicTraining.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000258  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  08000258  08000258  00001258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008f30  08008f30  00009f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f70  08008f70  0000a00c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008f70  08008f70  00009f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f78  08008f78  0000a00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f78  08008f78  00009f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f7c  08008f7c  00009f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08008f80  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  2000000c  08008f8c  0000a00c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08008f8c  0000a5b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000262cc  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047dd  00000000  00000000  0003030e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e18  00000000  00000000  00034af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001746  00000000  00000000  00036908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027534  00000000  00000000  0003804e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000294d3  00000000  00000000  0005f582  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1486  00000000  00000000  00088a55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179edb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082c4  00000000  00000000  00179f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  001821e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000258 <__do_global_dtors_aux>:
 8000258:	b510      	push	{r4, lr}
 800025a:	4c05      	ldr	r4, [pc, #20]	@ (8000270 <__do_global_dtors_aux+0x18>)
 800025c:	7823      	ldrb	r3, [r4, #0]
 800025e:	b933      	cbnz	r3, 800026e <__do_global_dtors_aux+0x16>
 8000260:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__do_global_dtors_aux+0x1c>)
 8000262:	b113      	cbz	r3, 800026a <__do_global_dtors_aux+0x12>
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <__do_global_dtors_aux+0x20>)
 8000266:	f3af 8000 	nop.w
 800026a:	2301      	movs	r3, #1
 800026c:	7023      	strb	r3, [r4, #0]
 800026e:	bd10      	pop	{r4, pc}
 8000270:	2000000c 	.word	0x2000000c
 8000274:	00000000 	.word	0x00000000
 8000278:	08008f18 	.word	0x08008f18

0800027c <frame_dummy>:
 800027c:	b508      	push	{r3, lr}
 800027e:	4b03      	ldr	r3, [pc, #12]	@ (800028c <frame_dummy+0x10>)
 8000280:	b11b      	cbz	r3, 800028a <frame_dummy+0xe>
 8000282:	4903      	ldr	r1, [pc, #12]	@ (8000290 <frame_dummy+0x14>)
 8000284:	4803      	ldr	r0, [pc, #12]	@ (8000294 <frame_dummy+0x18>)
 8000286:	f3af 8000 	nop.w
 800028a:	bd08      	pop	{r3, pc}
 800028c:	00000000 	.word	0x00000000
 8000290:	20000010 	.word	0x20000010
 8000294:	08008f18 	.word	0x08008f18

08000298 <__aeabi_dmul>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800029e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002a6:	bf1d      	ittte	ne
 80002a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002ac:	ea94 0f0c 	teqne	r4, ip
 80002b0:	ea95 0f0c 	teqne	r5, ip
 80002b4:	f000 f8de 	bleq	8000474 <__aeabi_dmul+0x1dc>
 80002b8:	442c      	add	r4, r5
 80002ba:	ea81 0603 	eor.w	r6, r1, r3
 80002be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002ca:	bf18      	it	ne
 80002cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d8:	d038      	beq.n	800034c <__aeabi_dmul+0xb4>
 80002da:	fba0 ce02 	umull	ip, lr, r0, r2
 80002de:	f04f 0500 	mov.w	r5, #0
 80002e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002ee:	f04f 0600 	mov.w	r6, #0
 80002f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002f6:	f09c 0f00 	teq	ip, #0
 80002fa:	bf18      	it	ne
 80002fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000300:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000304:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000308:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800030c:	d204      	bcs.n	8000318 <__aeabi_dmul+0x80>
 800030e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000312:	416d      	adcs	r5, r5
 8000314:	eb46 0606 	adc.w	r6, r6, r6
 8000318:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800031c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000320:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000324:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000328:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800032c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000330:	bf88      	it	hi
 8000332:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000336:	d81e      	bhi.n	8000376 <__aeabi_dmul+0xde>
 8000338:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000350:	ea46 0101 	orr.w	r1, r6, r1
 8000354:	ea40 0002 	orr.w	r0, r0, r2
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000360:	bfc2      	ittt	gt
 8000362:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000366:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800036a:	bd70      	popgt	{r4, r5, r6, pc}
 800036c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000370:	f04f 0e00 	mov.w	lr, #0
 8000374:	3c01      	subs	r4, #1
 8000376:	f300 80ab 	bgt.w	80004d0 <__aeabi_dmul+0x238>
 800037a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800037e:	bfde      	ittt	le
 8000380:	2000      	movle	r0, #0
 8000382:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd70      	pople	{r4, r5, r6, pc}
 8000388:	f1c4 0400 	rsb	r4, r4, #0
 800038c:	3c20      	subs	r4, #32
 800038e:	da35      	bge.n	80003fc <__aeabi_dmul+0x164>
 8000390:	340c      	adds	r4, #12
 8000392:	dc1b      	bgt.n	80003cc <__aeabi_dmul+0x134>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0520 	rsb	r5, r4, #32
 800039c:	fa00 f305 	lsl.w	r3, r0, r5
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea40 0002 	orr.w	r0, r0, r2
 80003ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b8:	fa21 f604 	lsr.w	r6, r1, r4
 80003bc:	eb42 0106 	adc.w	r1, r2, r6
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f1c4 040c 	rsb	r4, r4, #12
 80003d0:	f1c4 0520 	rsb	r5, r4, #32
 80003d4:	fa00 f304 	lsl.w	r3, r0, r4
 80003d8:	fa20 f005 	lsr.w	r0, r0, r5
 80003dc:	fa01 f204 	lsl.w	r2, r1, r4
 80003e0:	ea40 0002 	orr.w	r0, r0, r2
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003f4:	bf08      	it	eq
 80003f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003fa:	bd70      	pop	{r4, r5, r6, pc}
 80003fc:	f1c4 0520 	rsb	r5, r4, #32
 8000400:	fa00 f205 	lsl.w	r2, r0, r5
 8000404:	ea4e 0e02 	orr.w	lr, lr, r2
 8000408:	fa20 f304 	lsr.w	r3, r0, r4
 800040c:	fa01 f205 	lsl.w	r2, r1, r5
 8000410:	ea43 0302 	orr.w	r3, r3, r2
 8000414:	fa21 f004 	lsr.w	r0, r1, r4
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800041c:	fa21 f204 	lsr.w	r2, r1, r4
 8000420:	ea20 0002 	bic.w	r0, r0, r2
 8000424:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800042c:	bf08      	it	eq
 800042e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000432:	bd70      	pop	{r4, r5, r6, pc}
 8000434:	f094 0f00 	teq	r4, #0
 8000438:	d10f      	bne.n	800045a <__aeabi_dmul+0x1c2>
 800043a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800043e:	0040      	lsls	r0, r0, #1
 8000440:	eb41 0101 	adc.w	r1, r1, r1
 8000444:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000448:	bf08      	it	eq
 800044a:	3c01      	subeq	r4, #1
 800044c:	d0f7      	beq.n	800043e <__aeabi_dmul+0x1a6>
 800044e:	ea41 0106 	orr.w	r1, r1, r6
 8000452:	f095 0f00 	teq	r5, #0
 8000456:	bf18      	it	ne
 8000458:	4770      	bxne	lr
 800045a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800045e:	0052      	lsls	r2, r2, #1
 8000460:	eb43 0303 	adc.w	r3, r3, r3
 8000464:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000468:	bf08      	it	eq
 800046a:	3d01      	subeq	r5, #1
 800046c:	d0f7      	beq.n	800045e <__aeabi_dmul+0x1c6>
 800046e:	ea43 0306 	orr.w	r3, r3, r6
 8000472:	4770      	bx	lr
 8000474:	ea94 0f0c 	teq	r4, ip
 8000478:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800047c:	bf18      	it	ne
 800047e:	ea95 0f0c 	teqne	r5, ip
 8000482:	d00c      	beq.n	800049e <__aeabi_dmul+0x206>
 8000484:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000488:	bf18      	it	ne
 800048a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800048e:	d1d1      	bne.n	8000434 <__aeabi_dmul+0x19c>
 8000490:	ea81 0103 	eor.w	r1, r1, r3
 8000494:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	f04f 0000 	mov.w	r0, #0
 800049c:	bd70      	pop	{r4, r5, r6, pc}
 800049e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a2:	bf06      	itte	eq
 80004a4:	4610      	moveq	r0, r2
 80004a6:	4619      	moveq	r1, r3
 80004a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004ac:	d019      	beq.n	80004e2 <__aeabi_dmul+0x24a>
 80004ae:	ea94 0f0c 	teq	r4, ip
 80004b2:	d102      	bne.n	80004ba <__aeabi_dmul+0x222>
 80004b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b8:	d113      	bne.n	80004e2 <__aeabi_dmul+0x24a>
 80004ba:	ea95 0f0c 	teq	r5, ip
 80004be:	d105      	bne.n	80004cc <__aeabi_dmul+0x234>
 80004c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004c4:	bf1c      	itt	ne
 80004c6:	4610      	movne	r0, r2
 80004c8:	4619      	movne	r1, r3
 80004ca:	d10a      	bne.n	80004e2 <__aeabi_dmul+0x24a>
 80004cc:	ea81 0103 	eor.w	r1, r1, r3
 80004d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd70      	pop	{r4, r5, r6, pc}
 80004e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004ea:	bd70      	pop	{r4, r5, r6, pc}

080004ec <__aeabi_drsub>:
 80004ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004f0:	e002      	b.n	80004f8 <__adddf3>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dsub>:
 80004f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f8 <__adddf3>:
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000502:	ea94 0f05 	teq	r4, r5
 8000506:	bf08      	it	eq
 8000508:	ea90 0f02 	teqeq	r0, r2
 800050c:	bf1f      	itttt	ne
 800050e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000512:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000516:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800051a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051e:	f000 80e2 	beq.w	80006e6 <__adddf3+0x1ee>
 8000522:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000526:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800052a:	bfb8      	it	lt
 800052c:	426d      	neglt	r5, r5
 800052e:	dd0c      	ble.n	800054a <__adddf3+0x52>
 8000530:	442c      	add	r4, r5
 8000532:	ea80 0202 	eor.w	r2, r0, r2
 8000536:	ea81 0303 	eor.w	r3, r1, r3
 800053a:	ea82 0000 	eor.w	r0, r2, r0
 800053e:	ea83 0101 	eor.w	r1, r3, r1
 8000542:	ea80 0202 	eor.w	r2, r0, r2
 8000546:	ea81 0303 	eor.w	r3, r1, r3
 800054a:	2d36      	cmp	r5, #54	@ 0x36
 800054c:	bf88      	it	hi
 800054e:	bd30      	pophi	{r4, r5, pc}
 8000550:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000554:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000558:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800055c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000560:	d002      	beq.n	8000568 <__adddf3+0x70>
 8000562:	4240      	negs	r0, r0
 8000564:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000568:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800056c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000570:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000574:	d002      	beq.n	800057c <__adddf3+0x84>
 8000576:	4252      	negs	r2, r2
 8000578:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800057c:	ea94 0f05 	teq	r4, r5
 8000580:	f000 80a7 	beq.w	80006d2 <__adddf3+0x1da>
 8000584:	f1a4 0401 	sub.w	r4, r4, #1
 8000588:	f1d5 0e20 	rsbs	lr, r5, #32
 800058c:	db0d      	blt.n	80005aa <__adddf3+0xb2>
 800058e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000592:	fa22 f205 	lsr.w	r2, r2, r5
 8000596:	1880      	adds	r0, r0, r2
 8000598:	f141 0100 	adc.w	r1, r1, #0
 800059c:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a0:	1880      	adds	r0, r0, r2
 80005a2:	fa43 f305 	asr.w	r3, r3, r5
 80005a6:	4159      	adcs	r1, r3
 80005a8:	e00e      	b.n	80005c8 <__adddf3+0xd0>
 80005aa:	f1a5 0520 	sub.w	r5, r5, #32
 80005ae:	f10e 0e20 	add.w	lr, lr, #32
 80005b2:	2a01      	cmp	r2, #1
 80005b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b8:	bf28      	it	cs
 80005ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005be:	fa43 f305 	asr.w	r3, r3, r5
 80005c2:	18c0      	adds	r0, r0, r3
 80005c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	d507      	bpl.n	80005de <__adddf3+0xe6>
 80005ce:	f04f 0e00 	mov.w	lr, #0
 80005d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80005d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005da:	eb6e 0101 	sbc.w	r1, lr, r1
 80005de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005e2:	d31b      	bcc.n	800061c <__adddf3+0x124>
 80005e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e8:	d30c      	bcc.n	8000604 <__adddf3+0x10c>
 80005ea:	0849      	lsrs	r1, r1, #1
 80005ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005f4:	f104 0401 	add.w	r4, r4, #1
 80005f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000600:	f080 809a 	bcs.w	8000738 <__adddf3+0x240>
 8000604:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	ea41 0105 	orr.w	r1, r1, r5
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000620:	4140      	adcs	r0, r0
 8000622:	eb41 0101 	adc.w	r1, r1, r1
 8000626:	3c01      	subs	r4, #1
 8000628:	bf28      	it	cs
 800062a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800062e:	d2e9      	bcs.n	8000604 <__adddf3+0x10c>
 8000630:	f091 0f00 	teq	r1, #0
 8000634:	bf04      	itt	eq
 8000636:	4601      	moveq	r1, r0
 8000638:	2000      	moveq	r0, #0
 800063a:	fab1 f381 	clz	r3, r1
 800063e:	bf08      	it	eq
 8000640:	3320      	addeq	r3, #32
 8000642:	f1a3 030b 	sub.w	r3, r3, #11
 8000646:	f1b3 0220 	subs.w	r2, r3, #32
 800064a:	da0c      	bge.n	8000666 <__adddf3+0x16e>
 800064c:	320c      	adds	r2, #12
 800064e:	dd08      	ble.n	8000662 <__adddf3+0x16a>
 8000650:	f102 0c14 	add.w	ip, r2, #20
 8000654:	f1c2 020c 	rsb	r2, r2, #12
 8000658:	fa01 f00c 	lsl.w	r0, r1, ip
 800065c:	fa21 f102 	lsr.w	r1, r1, r2
 8000660:	e00c      	b.n	800067c <__adddf3+0x184>
 8000662:	f102 0214 	add.w	r2, r2, #20
 8000666:	bfd8      	it	le
 8000668:	f1c2 0c20 	rsble	ip, r2, #32
 800066c:	fa01 f102 	lsl.w	r1, r1, r2
 8000670:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000674:	bfdc      	itt	le
 8000676:	ea41 010c 	orrle.w	r1, r1, ip
 800067a:	4090      	lslle	r0, r2
 800067c:	1ae4      	subs	r4, r4, r3
 800067e:	bfa2      	ittt	ge
 8000680:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000684:	4329      	orrge	r1, r5
 8000686:	bd30      	popge	{r4, r5, pc}
 8000688:	ea6f 0404 	mvn.w	r4, r4
 800068c:	3c1f      	subs	r4, #31
 800068e:	da1c      	bge.n	80006ca <__adddf3+0x1d2>
 8000690:	340c      	adds	r4, #12
 8000692:	dc0e      	bgt.n	80006b2 <__adddf3+0x1ba>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0220 	rsb	r2, r4, #32
 800069c:	fa20 f004 	lsr.w	r0, r0, r4
 80006a0:	fa01 f302 	lsl.w	r3, r1, r2
 80006a4:	ea40 0003 	orr.w	r0, r0, r3
 80006a8:	fa21 f304 	lsr.w	r3, r1, r4
 80006ac:	ea45 0103 	orr.w	r1, r5, r3
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	f1c4 040c 	rsb	r4, r4, #12
 80006b6:	f1c4 0220 	rsb	r2, r4, #32
 80006ba:	fa20 f002 	lsr.w	r0, r0, r2
 80006be:	fa01 f304 	lsl.w	r3, r1, r4
 80006c2:	ea40 0003 	orr.w	r0, r0, r3
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	fa21 f004 	lsr.w	r0, r1, r4
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	f094 0f00 	teq	r4, #0
 80006d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006da:	bf06      	itte	eq
 80006dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006e0:	3401      	addeq	r4, #1
 80006e2:	3d01      	subne	r5, #1
 80006e4:	e74e      	b.n	8000584 <__adddf3+0x8c>
 80006e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ea:	bf18      	it	ne
 80006ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f0:	d029      	beq.n	8000746 <__adddf3+0x24e>
 80006f2:	ea94 0f05 	teq	r4, r5
 80006f6:	bf08      	it	eq
 80006f8:	ea90 0f02 	teqeq	r0, r2
 80006fc:	d005      	beq.n	800070a <__adddf3+0x212>
 80006fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000702:	bf04      	itt	eq
 8000704:	4619      	moveq	r1, r3
 8000706:	4610      	moveq	r0, r2
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	ea91 0f03 	teq	r1, r3
 800070e:	bf1e      	ittt	ne
 8000710:	2100      	movne	r1, #0
 8000712:	2000      	movne	r0, #0
 8000714:	bd30      	popne	{r4, r5, pc}
 8000716:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800071a:	d105      	bne.n	8000728 <__adddf3+0x230>
 800071c:	0040      	lsls	r0, r0, #1
 800071e:	4149      	adcs	r1, r1
 8000720:	bf28      	it	cs
 8000722:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd30      	pop	{r4, r5, pc}
 8000728:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800072c:	bf3c      	itt	cc
 800072e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000732:	bd30      	popcc	{r4, r5, pc}
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000738:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800073c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800074a:	bf1a      	itte	ne
 800074c:	4619      	movne	r1, r3
 800074e:	4610      	movne	r0, r2
 8000750:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000754:	bf1c      	itt	ne
 8000756:	460b      	movne	r3, r1
 8000758:	4602      	movne	r2, r0
 800075a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800075e:	bf06      	itte	eq
 8000760:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000764:	ea91 0f03 	teqeq	r1, r3
 8000768:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	bf00      	nop

08000770 <__aeabi_ui2d>:
 8000770:	f090 0f00 	teq	r0, #0
 8000774:	bf04      	itt	eq
 8000776:	2100      	moveq	r1, #0
 8000778:	4770      	bxeq	lr
 800077a:	b530      	push	{r4, r5, lr}
 800077c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000780:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000784:	f04f 0500 	mov.w	r5, #0
 8000788:	f04f 0100 	mov.w	r1, #0
 800078c:	e750      	b.n	8000630 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_i2d>:
 8000790:	f090 0f00 	teq	r0, #0
 8000794:	bf04      	itt	eq
 8000796:	2100      	moveq	r1, #0
 8000798:	4770      	bxeq	lr
 800079a:	b530      	push	{r4, r5, lr}
 800079c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a8:	bf48      	it	mi
 80007aa:	4240      	negmi	r0, r0
 80007ac:	f04f 0100 	mov.w	r1, #0
 80007b0:	e73e      	b.n	8000630 <__adddf3+0x138>
 80007b2:	bf00      	nop

080007b4 <__aeabi_f2d>:
 80007b4:	0042      	lsls	r2, r0, #1
 80007b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80007be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007c2:	bf1f      	itttt	ne
 80007c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007d0:	4770      	bxne	lr
 80007d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007d6:	bf08      	it	eq
 80007d8:	4770      	bxeq	lr
 80007da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007de:	bf04      	itt	eq
 80007e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007e4:	4770      	bxeq	lr
 80007e6:	b530      	push	{r4, r5, lr}
 80007e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	e71c      	b.n	8000630 <__adddf3+0x138>
 80007f6:	bf00      	nop

080007f8 <__aeabi_ul2d>:
 80007f8:	ea50 0201 	orrs.w	r2, r0, r1
 80007fc:	bf08      	it	eq
 80007fe:	4770      	bxeq	lr
 8000800:	b530      	push	{r4, r5, lr}
 8000802:	f04f 0500 	mov.w	r5, #0
 8000806:	e00a      	b.n	800081e <__aeabi_l2d+0x16>

08000808 <__aeabi_l2d>:
 8000808:	ea50 0201 	orrs.w	r2, r0, r1
 800080c:	bf08      	it	eq
 800080e:	4770      	bxeq	lr
 8000810:	b530      	push	{r4, r5, lr}
 8000812:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000816:	d502      	bpl.n	800081e <__aeabi_l2d+0x16>
 8000818:	4240      	negs	r0, r0
 800081a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000822:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000826:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800082a:	f43f aed8 	beq.w	80005de <__adddf3+0xe6>
 800082e:	f04f 0203 	mov.w	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000846:	f1c2 0320 	rsb	r3, r2, #32
 800084a:	fa00 fc03 	lsl.w	ip, r0, r3
 800084e:	fa20 f002 	lsr.w	r0, r0, r2
 8000852:	fa01 fe03 	lsl.w	lr, r1, r3
 8000856:	ea40 000e 	orr.w	r0, r0, lr
 800085a:	fa21 f102 	lsr.w	r1, r1, r2
 800085e:	4414      	add	r4, r2
 8000860:	e6bd      	b.n	80005de <__adddf3+0xe6>
 8000862:	bf00      	nop

08000864 <__aeabi_d2f>:
 8000864:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000868:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800086c:	bf24      	itt	cs
 800086e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000872:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000876:	d90d      	bls.n	8000894 <__aeabi_d2f+0x30>
 8000878:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800087c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000880:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000884:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000888:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800088c:	bf08      	it	eq
 800088e:	f020 0001 	biceq.w	r0, r0, #1
 8000892:	4770      	bx	lr
 8000894:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000898:	d121      	bne.n	80008de <__aeabi_d2f+0x7a>
 800089a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800089e:	bfbc      	itt	lt
 80008a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008a4:	4770      	bxlt	lr
 80008a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ae:	f1c2 0218 	rsb	r2, r2, #24
 80008b2:	f1c2 0c20 	rsb	ip, r2, #32
 80008b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008ba:	fa20 f002 	lsr.w	r0, r0, r2
 80008be:	bf18      	it	ne
 80008c0:	f040 0001 	orrne.w	r0, r0, #1
 80008c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d0:	ea40 000c 	orr.w	r0, r0, ip
 80008d4:	fa23 f302 	lsr.w	r3, r3, r2
 80008d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008dc:	e7cc      	b.n	8000878 <__aeabi_d2f+0x14>
 80008de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008e2:	d107      	bne.n	80008f4 <__aeabi_d2f+0x90>
 80008e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008e8:	bf1e      	ittt	ne
 80008ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008f2:	4770      	bxne	lr
 80008f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop

08000904 <__aeabi_uldivmod>:
 8000904:	b953      	cbnz	r3, 800091c <__aeabi_uldivmod+0x18>
 8000906:	b94a      	cbnz	r2, 800091c <__aeabi_uldivmod+0x18>
 8000908:	2900      	cmp	r1, #0
 800090a:	bf08      	it	eq
 800090c:	2800      	cmpeq	r0, #0
 800090e:	bf1c      	itt	ne
 8000910:	f04f 31ff 	movne.w	r1, #4294967295
 8000914:	f04f 30ff 	movne.w	r0, #4294967295
 8000918:	f000 b9b0 	b.w	8000c7c <__aeabi_idiv0>
 800091c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000920:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000924:	f000 f806 	bl	8000934 <__udivmoddi4>
 8000928:	f8dd e004 	ldr.w	lr, [sp, #4]
 800092c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000930:	b004      	add	sp, #16
 8000932:	4770      	bx	lr

08000934 <__udivmoddi4>:
 8000934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000938:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800093a:	4688      	mov	r8, r1
 800093c:	4604      	mov	r4, r0
 800093e:	468e      	mov	lr, r1
 8000940:	2b00      	cmp	r3, #0
 8000942:	d14a      	bne.n	80009da <__udivmoddi4+0xa6>
 8000944:	428a      	cmp	r2, r1
 8000946:	4617      	mov	r7, r2
 8000948:	d95f      	bls.n	8000a0a <__udivmoddi4+0xd6>
 800094a:	fab2 f682 	clz	r6, r2
 800094e:	b14e      	cbz	r6, 8000964 <__udivmoddi4+0x30>
 8000950:	f1c6 0320 	rsb	r3, r6, #32
 8000954:	fa01 fe06 	lsl.w	lr, r1, r6
 8000958:	40b7      	lsls	r7, r6
 800095a:	40b4      	lsls	r4, r6
 800095c:	fa20 f303 	lsr.w	r3, r0, r3
 8000960:	ea43 0e0e 	orr.w	lr, r3, lr
 8000964:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000968:	fa1f fc87 	uxth.w	ip, r7
 800096c:	0c23      	lsrs	r3, r4, #16
 800096e:	fbbe f1f8 	udiv	r1, lr, r8
 8000972:	fb08 ee11 	mls	lr, r8, r1, lr
 8000976:	fb01 f20c 	mul.w	r2, r1, ip
 800097a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 800097e:	429a      	cmp	r2, r3
 8000980:	d907      	bls.n	8000992 <__udivmoddi4+0x5e>
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	f101 30ff 	add.w	r0, r1, #4294967295
 8000988:	d202      	bcs.n	8000990 <__udivmoddi4+0x5c>
 800098a:	429a      	cmp	r2, r3
 800098c:	f200 8154 	bhi.w	8000c38 <__udivmoddi4+0x304>
 8000990:	4601      	mov	r1, r0
 8000992:	1a9b      	subs	r3, r3, r2
 8000994:	b2a2      	uxth	r2, r4
 8000996:	fbb3 f0f8 	udiv	r0, r3, r8
 800099a:	fb08 3310 	mls	r3, r8, r0, r3
 800099e:	fb00 fc0c 	mul.w	ip, r0, ip
 80009a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80009a6:	4594      	cmp	ip, r2
 80009a8:	d90b      	bls.n	80009c2 <__udivmoddi4+0x8e>
 80009aa:	18ba      	adds	r2, r7, r2
 80009ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80009b0:	bf2c      	ite	cs
 80009b2:	2401      	movcs	r4, #1
 80009b4:	2400      	movcc	r4, #0
 80009b6:	4594      	cmp	ip, r2
 80009b8:	d902      	bls.n	80009c0 <__udivmoddi4+0x8c>
 80009ba:	2c00      	cmp	r4, #0
 80009bc:	f000 813f 	beq.w	8000c3e <__udivmoddi4+0x30a>
 80009c0:	4618      	mov	r0, r3
 80009c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009c6:	eba2 020c 	sub.w	r2, r2, ip
 80009ca:	2100      	movs	r1, #0
 80009cc:	b11d      	cbz	r5, 80009d6 <__udivmoddi4+0xa2>
 80009ce:	40f2      	lsrs	r2, r6
 80009d0:	2300      	movs	r3, #0
 80009d2:	e9c5 2300 	strd	r2, r3, [r5]
 80009d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009da:	428b      	cmp	r3, r1
 80009dc:	d905      	bls.n	80009ea <__udivmoddi4+0xb6>
 80009de:	b10d      	cbz	r5, 80009e4 <__udivmoddi4+0xb0>
 80009e0:	e9c5 0100 	strd	r0, r1, [r5]
 80009e4:	2100      	movs	r1, #0
 80009e6:	4608      	mov	r0, r1
 80009e8:	e7f5      	b.n	80009d6 <__udivmoddi4+0xa2>
 80009ea:	fab3 f183 	clz	r1, r3
 80009ee:	2900      	cmp	r1, #0
 80009f0:	d14e      	bne.n	8000a90 <__udivmoddi4+0x15c>
 80009f2:	4543      	cmp	r3, r8
 80009f4:	f0c0 8112 	bcc.w	8000c1c <__udivmoddi4+0x2e8>
 80009f8:	4282      	cmp	r2, r0
 80009fa:	f240 810f 	bls.w	8000c1c <__udivmoddi4+0x2e8>
 80009fe:	4608      	mov	r0, r1
 8000a00:	2d00      	cmp	r5, #0
 8000a02:	d0e8      	beq.n	80009d6 <__udivmoddi4+0xa2>
 8000a04:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a08:	e7e5      	b.n	80009d6 <__udivmoddi4+0xa2>
 8000a0a:	2a00      	cmp	r2, #0
 8000a0c:	f000 80ac 	beq.w	8000b68 <__udivmoddi4+0x234>
 8000a10:	fab2 f682 	clz	r6, r2
 8000a14:	2e00      	cmp	r6, #0
 8000a16:	f040 80bb 	bne.w	8000b90 <__udivmoddi4+0x25c>
 8000a1a:	1a8b      	subs	r3, r1, r2
 8000a1c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000a20:	b2bc      	uxth	r4, r7
 8000a22:	2101      	movs	r1, #1
 8000a24:	0c02      	lsrs	r2, r0, #16
 8000a26:	b280      	uxth	r0, r0
 8000a28:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a2c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a30:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000a34:	fb04 f20c 	mul.w	r2, r4, ip
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d90e      	bls.n	8000a5a <__udivmoddi4+0x126>
 8000a3c:	18fb      	adds	r3, r7, r3
 8000a3e:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000a42:	bf2c      	ite	cs
 8000a44:	f04f 0901 	movcs.w	r9, #1
 8000a48:	f04f 0900 	movcc.w	r9, #0
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d903      	bls.n	8000a58 <__udivmoddi4+0x124>
 8000a50:	f1b9 0f00 	cmp.w	r9, #0
 8000a54:	f000 80ec 	beq.w	8000c30 <__udivmoddi4+0x2fc>
 8000a58:	46c4      	mov	ip, r8
 8000a5a:	1a9b      	subs	r3, r3, r2
 8000a5c:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a60:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a64:	fb04 f408 	mul.w	r4, r4, r8
 8000a68:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000a6c:	4294      	cmp	r4, r2
 8000a6e:	d90b      	bls.n	8000a88 <__udivmoddi4+0x154>
 8000a70:	18ba      	adds	r2, r7, r2
 8000a72:	f108 33ff 	add.w	r3, r8, #4294967295
 8000a76:	bf2c      	ite	cs
 8000a78:	2001      	movcs	r0, #1
 8000a7a:	2000      	movcc	r0, #0
 8000a7c:	4294      	cmp	r4, r2
 8000a7e:	d902      	bls.n	8000a86 <__udivmoddi4+0x152>
 8000a80:	2800      	cmp	r0, #0
 8000a82:	f000 80d1 	beq.w	8000c28 <__udivmoddi4+0x2f4>
 8000a86:	4698      	mov	r8, r3
 8000a88:	1b12      	subs	r2, r2, r4
 8000a8a:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000a8e:	e79d      	b.n	80009cc <__udivmoddi4+0x98>
 8000a90:	f1c1 0620 	rsb	r6, r1, #32
 8000a94:	408b      	lsls	r3, r1
 8000a96:	fa08 f401 	lsl.w	r4, r8, r1
 8000a9a:	fa00 f901 	lsl.w	r9, r0, r1
 8000a9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000aa2:	fa28 f806 	lsr.w	r8, r8, r6
 8000aa6:	408a      	lsls	r2, r1
 8000aa8:	431f      	orrs	r7, r3
 8000aaa:	fa20 f306 	lsr.w	r3, r0, r6
 8000aae:	0c38      	lsrs	r0, r7, #16
 8000ab0:	4323      	orrs	r3, r4
 8000ab2:	fa1f fc87 	uxth.w	ip, r7
 8000ab6:	0c1c      	lsrs	r4, r3, #16
 8000ab8:	fbb8 fef0 	udiv	lr, r8, r0
 8000abc:	fb00 881e 	mls	r8, r0, lr, r8
 8000ac0:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000ac4:	fb0e f80c 	mul.w	r8, lr, ip
 8000ac8:	45a0      	cmp	r8, r4
 8000aca:	d90e      	bls.n	8000aea <__udivmoddi4+0x1b6>
 8000acc:	193c      	adds	r4, r7, r4
 8000ace:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ad2:	bf2c      	ite	cs
 8000ad4:	f04f 0b01 	movcs.w	fp, #1
 8000ad8:	f04f 0b00 	movcc.w	fp, #0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d903      	bls.n	8000ae8 <__udivmoddi4+0x1b4>
 8000ae0:	f1bb 0f00 	cmp.w	fp, #0
 8000ae4:	f000 80b8 	beq.w	8000c58 <__udivmoddi4+0x324>
 8000ae8:	46d6      	mov	lr, sl
 8000aea:	eba4 0408 	sub.w	r4, r4, r8
 8000aee:	fa1f f883 	uxth.w	r8, r3
 8000af2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000af6:	fb00 4413 	mls	r4, r0, r3, r4
 8000afa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000afe:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000b02:	45a4      	cmp	ip, r4
 8000b04:	d90e      	bls.n	8000b24 <__udivmoddi4+0x1f0>
 8000b06:	193c      	adds	r4, r7, r4
 8000b08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b0c:	bf2c      	ite	cs
 8000b0e:	f04f 0801 	movcs.w	r8, #1
 8000b12:	f04f 0800 	movcc.w	r8, #0
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	d903      	bls.n	8000b22 <__udivmoddi4+0x1ee>
 8000b1a:	f1b8 0f00 	cmp.w	r8, #0
 8000b1e:	f000 809f 	beq.w	8000c60 <__udivmoddi4+0x32c>
 8000b22:	4603      	mov	r3, r0
 8000b24:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b28:	eba4 040c 	sub.w	r4, r4, ip
 8000b2c:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b30:	4564      	cmp	r4, ip
 8000b32:	4673      	mov	r3, lr
 8000b34:	46e0      	mov	r8, ip
 8000b36:	d302      	bcc.n	8000b3e <__udivmoddi4+0x20a>
 8000b38:	d107      	bne.n	8000b4a <__udivmoddi4+0x216>
 8000b3a:	45f1      	cmp	r9, lr
 8000b3c:	d205      	bcs.n	8000b4a <__udivmoddi4+0x216>
 8000b3e:	ebbe 0302 	subs.w	r3, lr, r2
 8000b42:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b46:	3801      	subs	r0, #1
 8000b48:	46e0      	mov	r8, ip
 8000b4a:	b15d      	cbz	r5, 8000b64 <__udivmoddi4+0x230>
 8000b4c:	ebb9 0203 	subs.w	r2, r9, r3
 8000b50:	eb64 0408 	sbc.w	r4, r4, r8
 8000b54:	fa04 f606 	lsl.w	r6, r4, r6
 8000b58:	fa22 f301 	lsr.w	r3, r2, r1
 8000b5c:	40cc      	lsrs	r4, r1
 8000b5e:	431e      	orrs	r6, r3
 8000b60:	e9c5 6400 	strd	r6, r4, [r5]
 8000b64:	2100      	movs	r1, #0
 8000b66:	e736      	b.n	80009d6 <__udivmoddi4+0xa2>
 8000b68:	fbb1 fcf2 	udiv	ip, r1, r2
 8000b6c:	0c01      	lsrs	r1, r0, #16
 8000b6e:	4614      	mov	r4, r2
 8000b70:	b280      	uxth	r0, r0
 8000b72:	4696      	mov	lr, r2
 8000b74:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000b78:	2620      	movs	r6, #32
 8000b7a:	4690      	mov	r8, r2
 8000b7c:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000b80:	4610      	mov	r0, r2
 8000b82:	fbb1 f1f2 	udiv	r1, r1, r2
 8000b86:	eba3 0308 	sub.w	r3, r3, r8
 8000b8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b8e:	e74b      	b.n	8000a28 <__udivmoddi4+0xf4>
 8000b90:	40b7      	lsls	r7, r6
 8000b92:	f1c6 0320 	rsb	r3, r6, #32
 8000b96:	fa01 f206 	lsl.w	r2, r1, r6
 8000b9a:	fa21 f803 	lsr.w	r8, r1, r3
 8000b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ba2:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba6:	b2bc      	uxth	r4, r7
 8000ba8:	40b0      	lsls	r0, r6
 8000baa:	4313      	orrs	r3, r2
 8000bac:	0c02      	lsrs	r2, r0, #16
 8000bae:	0c19      	lsrs	r1, r3, #16
 8000bb0:	b280      	uxth	r0, r0
 8000bb2:	fbb8 f9fe 	udiv	r9, r8, lr
 8000bb6:	fb0e 8819 	mls	r8, lr, r9, r8
 8000bba:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000bbe:	fb09 f804 	mul.w	r8, r9, r4
 8000bc2:	4588      	cmp	r8, r1
 8000bc4:	d951      	bls.n	8000c6a <__udivmoddi4+0x336>
 8000bc6:	1879      	adds	r1, r7, r1
 8000bc8:	f109 3cff 	add.w	ip, r9, #4294967295
 8000bcc:	bf2c      	ite	cs
 8000bce:	f04f 0a01 	movcs.w	sl, #1
 8000bd2:	f04f 0a00 	movcc.w	sl, #0
 8000bd6:	4588      	cmp	r8, r1
 8000bd8:	d902      	bls.n	8000be0 <__udivmoddi4+0x2ac>
 8000bda:	f1ba 0f00 	cmp.w	sl, #0
 8000bde:	d031      	beq.n	8000c44 <__udivmoddi4+0x310>
 8000be0:	eba1 0108 	sub.w	r1, r1, r8
 8000be4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000be8:	fb09 f804 	mul.w	r8, r9, r4
 8000bec:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	4543      	cmp	r3, r8
 8000bf8:	d235      	bcs.n	8000c66 <__udivmoddi4+0x332>
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c00:	bf2c      	ite	cs
 8000c02:	f04f 0a01 	movcs.w	sl, #1
 8000c06:	f04f 0a00 	movcc.w	sl, #0
 8000c0a:	4543      	cmp	r3, r8
 8000c0c:	d2bb      	bcs.n	8000b86 <__udivmoddi4+0x252>
 8000c0e:	f1ba 0f00 	cmp.w	sl, #0
 8000c12:	d1b8      	bne.n	8000b86 <__udivmoddi4+0x252>
 8000c14:	f1a9 0102 	sub.w	r1, r9, #2
 8000c18:	443b      	add	r3, r7
 8000c1a:	e7b4      	b.n	8000b86 <__udivmoddi4+0x252>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb68 0203 	sbc.w	r2, r8, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	4696      	mov	lr, r2
 8000c26:	e6eb      	b.n	8000a00 <__udivmoddi4+0xcc>
 8000c28:	443a      	add	r2, r7
 8000c2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000c2e:	e72b      	b.n	8000a88 <__udivmoddi4+0x154>
 8000c30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c34:	443b      	add	r3, r7
 8000c36:	e710      	b.n	8000a5a <__udivmoddi4+0x126>
 8000c38:	3902      	subs	r1, #2
 8000c3a:	443b      	add	r3, r7
 8000c3c:	e6a9      	b.n	8000992 <__udivmoddi4+0x5e>
 8000c3e:	443a      	add	r2, r7
 8000c40:	3802      	subs	r0, #2
 8000c42:	e6be      	b.n	80009c2 <__udivmoddi4+0x8e>
 8000c44:	eba7 0808 	sub.w	r8, r7, r8
 8000c48:	f1a9 0c02 	sub.w	ip, r9, #2
 8000c4c:	4441      	add	r1, r8
 8000c4e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c52:	fb09 f804 	mul.w	r8, r9, r4
 8000c56:	e7c9      	b.n	8000bec <__udivmoddi4+0x2b8>
 8000c58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c5c:	443c      	add	r4, r7
 8000c5e:	e744      	b.n	8000aea <__udivmoddi4+0x1b6>
 8000c60:	3b02      	subs	r3, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	e75e      	b.n	8000b24 <__udivmoddi4+0x1f0>
 8000c66:	4649      	mov	r1, r9
 8000c68:	e78d      	b.n	8000b86 <__udivmoddi4+0x252>
 8000c6a:	eba1 0108 	sub.w	r1, r1, r8
 8000c6e:	46cc      	mov	ip, r9
 8000c70:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c74:	fb09 f804 	mul.w	r8, r9, r4
 8000c78:	e7b8      	b.n	8000bec <__udivmoddi4+0x2b8>
 8000c7a:	bf00      	nop

08000c7c <__aeabi_idiv0>:
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <accel_read_raw>:

    return HAL_OK;
}


void accel_read_raw(int16_t *x, int16_t *y, int16_t *z) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af04      	add	r7, sp, #16
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
    uint8_t buffer[6];
    HAL_StatusTypeDef st = HAL_I2C_Mem_Read(&hi2c1,(ACCELEROMETER_DEVICE_ADDR <<1),0x0D,I2C_MEMADD_SIZE_8BIT,buffer,6,100);
 8000c8c:	2364      	movs	r3, #100	@ 0x64
 8000c8e:	9302      	str	r3, [sp, #8]
 8000c90:	2306      	movs	r3, #6
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	220d      	movs	r2, #13
 8000c9e:	2198      	movs	r1, #152	@ 0x98
 8000ca0:	4823      	ldr	r0, [pc, #140]	@ (8000d30 <accel_read_raw+0xb0>)
 8000ca2:	f003 f83f 	bl	8003d24 <HAL_I2C_Mem_Read>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	75fb      	strb	r3, [r7, #23]
    if (st != HAL_OK) {
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d012      	beq.n	8000cd6 <accel_read_raw+0x56>
        // On error, return zeros (or keep last values if you prefer)
        if (x) *x = 0;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d002      	beq.n	8000cbc <accel_read_raw+0x3c>
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	801a      	strh	r2, [r3, #0]
        if (y) *y = 0;
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d002      	beq.n	8000cc8 <accel_read_raw+0x48>
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	801a      	strh	r2, [r3, #0]
        if (z) *z = 0;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d02b      	beq.n	8000d26 <accel_read_raw+0xa6>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	801a      	strh	r2, [r3, #0]
 8000cd4:	e028      	b.n	8000d28 <accel_read_raw+0xa8>
        return;
    }
    if (x)
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d009      	beq.n	8000cf0 <accel_read_raw+0x70>
    	*x = (int16_t)((buffer[1] << 8) | buffer[0]);
 8000cdc:	7c7b      	ldrb	r3, [r7, #17]
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	021b      	lsls	r3, r3, #8
 8000ce2:	b21a      	sxth	r2, r3
 8000ce4:	7c3b      	ldrb	r3, [r7, #16]
 8000ce6:	b21b      	sxth	r3, r3
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	b21a      	sxth	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	801a      	strh	r2, [r3, #0]
    if (y)
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d009      	beq.n	8000d0a <accel_read_raw+0x8a>
    	*y = (int16_t)((buffer[3] << 8) | buffer[2]);
 8000cf6:	7cfb      	ldrb	r3, [r7, #19]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	021b      	lsls	r3, r3, #8
 8000cfc:	b21a      	sxth	r2, r3
 8000cfe:	7cbb      	ldrb	r3, [r7, #18]
 8000d00:	b21b      	sxth	r3, r3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	801a      	strh	r2, [r3, #0]
    if (z)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00b      	beq.n	8000d28 <accel_read_raw+0xa8>
    	*z = (int16_t)((buffer[5] << 8) | buffer[4]);
 8000d10:	7d7b      	ldrb	r3, [r7, #21]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	b21a      	sxth	r2, r3
 8000d18:	7d3b      	ldrb	r3, [r7, #20]
 8000d1a:	b21b      	sxth	r3, r3
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	801a      	strh	r2, [r3, #0]
 8000d24:	e000      	b.n	8000d28 <accel_read_raw+0xa8>
        return;
 8000d26:	bf00      	nop

    }
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000108 	.word	0x20000108

08000d34 <accel_read_g>:

void accel_read_g(float *pos_xg, float *pos_yg, float *pos_zg) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
	int16_t x_counts=0, y_counts=0, z_counts=0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	837b      	strh	r3, [r7, #26]
 8000d44:	2300      	movs	r3, #0
 8000d46:	833b      	strh	r3, [r7, #24]
 8000d48:	2300      	movs	r3, #0
 8000d4a:	82fb      	strh	r3, [r7, #22]
    accel_read_raw(&x_counts, &y_counts, &z_counts);
 8000d4c:	f107 0216 	add.w	r2, r7, #22
 8000d50:	f107 0118 	add.w	r1, r7, #24
 8000d54:	f107 031a 	add.w	r3, r7, #26
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff91 	bl	8000c80 <accel_read_raw>

    const float lsb_per_g = 16384.0f; //lsb for 2g
 8000d5e:	f04f 438d 	mov.w	r3, #1182793728	@ 0x46800000
 8000d62:	61fb      	str	r3, [r7, #28]

    if (pos_xg)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00c      	beq.n	8000d84 <accel_read_g+0x50>
    	*pos_xg = (float)x_counts / lsb_per_g;
 8000d6a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000d6e:	ee07 3a90 	vmov	s15, r3
 8000d72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d76:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	edc3 7a00 	vstr	s15, [r3]
    if (pos_yg)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00c      	beq.n	8000da4 <accel_read_g+0x70>
    	*pos_yg = (float)y_counts / lsb_per_g;
 8000d8a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000d8e:	ee07 3a90 	vmov	s15, r3
 8000d92:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d96:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	edc3 7a00 	vstr	s15, [r3]
    if (pos_xg)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d00c      	beq.n	8000dc4 <accel_read_g+0x90>
    	*pos_zg = (float)z_counts / lsb_per_g;
 8000daa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000dae:	ee07 3a90 	vmov	s15, r3
 8000db2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000db6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	edc3 7a00 	vstr	s15, [r3]
}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	0000      	movs	r0, r0
	...

08000dd0 <accel_poll_data>:

void accel_poll_data(float *pos_x, float *pos_y, float *pos_z) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b088      	sub	sp, #32
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
    float pos_xg=0.0f, pos_yg=0.0f, pos_zg=0.0f;
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	61bb      	str	r3, [r7, #24]
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
    accel_read_g(&pos_xg, &pos_yg, &pos_zg);
 8000dee:	f107 0214 	add.w	r2, r7, #20
 8000df2:	f107 0118 	add.w	r1, r7, #24
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff ff9a 	bl	8000d34 <accel_read_g>

    if (pos_x)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d011      	beq.n	8000e2a <accel_poll_data+0x5a>
    	*pos_x = pos_xg * 9.81;
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fcd3 	bl	80007b4 <__aeabi_f2d>
 8000e0e:	a31e      	add	r3, pc, #120	@ (adr r3, 8000e88 <accel_poll_data+0xb8>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	f7ff fa40 	bl	8000298 <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f7ff fd20 	bl	8000864 <__aeabi_d2f>
 8000e24:	4602      	mov	r2, r0
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	601a      	str	r2, [r3, #0]
    if (pos_y)
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d011      	beq.n	8000e54 <accel_poll_data+0x84>
    	*pos_y = pos_yg * 9.81;
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fcbe 	bl	80007b4 <__aeabi_f2d>
 8000e38:	a313      	add	r3, pc, #76	@ (adr r3, 8000e88 <accel_poll_data+0xb8>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3e:	f7ff fa2b 	bl	8000298 <__aeabi_dmul>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fd0b 	bl	8000864 <__aeabi_d2f>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	601a      	str	r2, [r3, #0]
    if (pos_z)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d011      	beq.n	8000e7e <accel_poll_data+0xae>
    	*pos_z = pos_zg * 9.81;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fca9 	bl	80007b4 <__aeabi_f2d>
 8000e62:	a309      	add	r3, pc, #36	@ (adr r3, 8000e88 <accel_poll_data+0xb8>)
 8000e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e68:	f7ff fa16 	bl	8000298 <__aeabi_dmul>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	460b      	mov	r3, r1
 8000e70:	4610      	mov	r0, r2
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff fcf6 	bl	8000864 <__aeabi_d2f>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	601a      	str	r2, [r3, #0]
}
 8000e7e:	bf00      	nop
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	51eb851f 	.word	0x51eb851f
 8000e8c:	40239eb8 	.word	0x40239eb8

08000e90 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2220      	movs	r2, #32
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f008 f80e 	bl	8008ebe <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f54 <MX_ADC1_Init+0xc4>)
 8000ea6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000ea8:	4b29      	ldr	r3, [pc, #164]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000eaa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000eae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ebc:	4b24      	ldr	r3, [pc, #144]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ec2:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ec8:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eee:	4b18      	ldr	r3, [pc, #96]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f0a:	4811      	ldr	r0, [pc, #68]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000f0c:	f001 fa44 	bl	8002398 <HAL_ADC_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000f16:	f000 fc0d 	bl	8001734 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f58 <MX_ADC1_Init+0xc8>)
 8000f1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f1e:	2306      	movs	r3, #6
 8000f20:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f22:	2300      	movs	r3, #0
 8000f24:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <MX_ADC1_Init+0xcc>)
 8000f28:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f32:	463b      	mov	r3, r7
 8000f34:	4619      	mov	r1, r3
 8000f36:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <MX_ADC1_Init+0xc0>)
 8000f38:	f001 fb7c 	bl	8002634 <HAL_ADC_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000f42:	f000 fbf7 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000028 	.word	0x20000028
 8000f54:	42028000 	.word	0x42028000
 8000f58:	04300002 	.word	0x04300002
 8000f5c:	407f0000 	.word	0x407f0000

08000f60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b0ac      	sub	sp, #176	@ 0xb0
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f78:	f107 0310 	add.w	r3, r7, #16
 8000f7c:	2288      	movs	r2, #136	@ 0x88
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f007 ff9c 	bl	8008ebe <memset>
  if(adcHandle->Instance==ADC1)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a23      	ldr	r2, [pc, #140]	@ (8001018 <HAL_ADC_MspInit+0xb8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d13e      	bne.n	800100e <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000f90:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000f94:	f04f 0300 	mov.w	r3, #0
 8000f98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HCLK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f004 fb89 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_ADC_MspInit+0x54>
    {
      Error_Handler();
 8000fb0:	f000 fbc0 	bl	8001734 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000fb4:	4b19      	ldr	r3, [pc, #100]	@ (800101c <HAL_ADC_MspInit+0xbc>)
 8000fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fba:	4a18      	ldr	r2, [pc, #96]	@ (800101c <HAL_ADC_MspInit+0xbc>)
 8000fbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <HAL_ADC_MspInit+0xbc>)
 8000fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd2:	4b12      	ldr	r3, [pc, #72]	@ (800101c <HAL_ADC_MspInit+0xbc>)
 8000fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fd8:	4a10      	ldr	r2, [pc, #64]	@ (800101c <HAL_ADC_MspInit+0xbc>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_ADC_MspInit+0xbc>)
 8000fe4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_INN1
    PA1     ------> ADC1_INP1
    PA2     ------> ADC1_INP14
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001006:	4619      	mov	r1, r3
 8001008:	4805      	ldr	r0, [pc, #20]	@ (8001020 <HAL_ADC_MspInit+0xc0>)
 800100a:	f002 fc3d 	bl	8003888 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800100e:	bf00      	nop
 8001010:	37b0      	adds	r7, #176	@ 0xb0
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	42028000 	.word	0x42028000
 800101c:	44020c00 	.word	0x44020c00
 8001020:	42020000 	.word	0x42020000

08001024 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	@ 0x30
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	222c      	movs	r2, #44	@ 0x2c
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f007 ff44 	bl	8008ebe <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001036:	4b15      	ldr	r3, [pc, #84]	@ (800108c <MX_DAC1_Init+0x68>)
 8001038:	4a15      	ldr	r2, [pc, #84]	@ (8001090 <MX_DAC1_Init+0x6c>)
 800103a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800103c:	4813      	ldr	r0, [pc, #76]	@ (800108c <MX_DAC1_Init+0x68>)
 800103e:	f002 f897 	bl	8003170 <HAL_DAC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001048:	f000 fb74 	bl	8001734 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	723b      	strb	r3, [r7, #8]
  sConfig.DAC_SignedFormat = DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	727b      	strb	r3, [r7, #9]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800105c:	2300      	movs	r3, #0
 800105e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	2200      	movs	r2, #0
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	@ (800108c <MX_DAC1_Init+0x68>)
 8001074:	f002 f89e 	bl	80031b4 <HAL_DAC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_DAC1_Init+0x5e>
  {
    Error_Handler();
 800107e:	f000 fb59 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001082:	bf00      	nop
 8001084:	3730      	adds	r7, #48	@ 0x30
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000090 	.word	0x20000090
 8001090:	42028400 	.word	0x42028400

08001094 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a18      	ldr	r2, [pc, #96]	@ (8001114 <HAL_DAC_MspInit+0x80>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d129      	bne.n	800110a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80010b6:	4b18      	ldr	r3, [pc, #96]	@ (8001118 <HAL_DAC_MspInit+0x84>)
 80010b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010bc:	4a16      	ldr	r2, [pc, #88]	@ (8001118 <HAL_DAC_MspInit+0x84>)
 80010be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010c2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010c6:	4b14      	ldr	r3, [pc, #80]	@ (8001118 <HAL_DAC_MspInit+0x84>)
 80010c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <HAL_DAC_MspInit+0x84>)
 80010d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010da:	4a0f      	ldr	r2, [pc, #60]	@ (8001118 <HAL_DAC_MspInit+0x84>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80010e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001118 <HAL_DAC_MspInit+0x84>)
 80010e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010f2:	2310      	movs	r3, #16
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4805      	ldr	r0, [pc, #20]	@ (800111c <HAL_DAC_MspInit+0x88>)
 8001106:	f002 fbbf 	bl	8003888 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3728      	adds	r7, #40	@ 0x28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	42028400 	.word	0x42028400
 8001118:	44020c00 	.word	0x44020c00
 800111c:	42020000 	.word	0x42020000

08001120 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001124:	4b1f      	ldr	r3, [pc, #124]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001126:	4a20      	ldr	r2, [pc, #128]	@ (80011a8 <MX_FDCAN1_Init+0x88>)
 8001128:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001130:	4b1c      	ldr	r3, [pc, #112]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 800113e:	2200      	movs	r2, #0
 8001140:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001144:	2200      	movs	r2, #0
 8001146:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 800114a:	2200      	movs	r2, #0
 800114c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 32;
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001150:	2220      	movs	r2, #32
 8001152:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001154:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001156:	2201      	movs	r2, #1
 8001158:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800115a:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 800115c:	2202      	movs	r2, #2
 800115e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 8001160:	4b10      	ldr	r3, [pc, #64]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001162:	2203      	movs	r2, #3
 8001164:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001166:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001168:	2201      	movs	r2, #1
 800116a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800116c:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 800116e:	2201      	movs	r2, #1
 8001170:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001174:	2201      	movs	r2, #1
 8001176:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 800117a:	2201      	movs	r2, #1
 800117c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001180:	2200      	movs	r2, #0
 8001182:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001184:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001186:	2200      	movs	r2, #0
 8001188:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 800118c:	2200      	movs	r2, #0
 800118e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_FDCAN1_Init+0x84>)
 8001192:	f002 f9c9 	bl	8003528 <HAL_FDCAN_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800119c:	f000 faca 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200000a4 	.word	0x200000a4
 80011a8:	4000a400 	.word	0x4000a400

080011ac <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b0ac      	sub	sp, #176	@ 0xb0
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011c4:	f107 0310 	add.w	r3, r7, #16
 80011c8:	2288      	movs	r2, #136	@ 0x88
 80011ca:	2100      	movs	r1, #0
 80011cc:	4618      	mov	r0, r3
 80011ce:	f007 fe76 	bl	8008ebe <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a26      	ldr	r2, [pc, #152]	@ (8001270 <HAL_FDCAN_MspInit+0xc4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d145      	bne.n	8001268 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	f04f 0304 	mov.w	r3, #4
 80011e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL1Q;
 80011e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0310 	add.w	r3, r7, #16
 80011f2:	4618      	mov	r0, r3
 80011f4:	f004 fa62 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80011fe:	f000 fa99 	bl	8001734 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001202:	4b1c      	ldr	r3, [pc, #112]	@ (8001274 <HAL_FDCAN_MspInit+0xc8>)
 8001204:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001208:	4a1a      	ldr	r2, [pc, #104]	@ (8001274 <HAL_FDCAN_MspInit+0xc8>)
 800120a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800120e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8001212:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <HAL_FDCAN_MspInit+0xc8>)
 8001214:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <HAL_FDCAN_MspInit+0xc8>)
 8001222:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001226:	4a13      	ldr	r2, [pc, #76]	@ (8001274 <HAL_FDCAN_MspInit+0xc8>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001230:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <HAL_FDCAN_MspInit+0xc8>)
 8001232:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB4(NJTRST)     ------> FDCAN1_TX
    PB5     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800123e:	2330      	movs	r3, #48	@ 0x30
 8001240:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001244:	2302      	movs	r3, #2
 8001246:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001256:	2309      	movs	r3, #9
 8001258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <HAL_FDCAN_MspInit+0xcc>)
 8001264:	f002 fb10 	bl	8003888 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8001268:	bf00      	nop
 800126a:	37b0      	adds	r7, #176	@ 0xb0
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	4000a400 	.word	0x4000a400
 8001274:	44020c00 	.word	0x44020c00
 8001278:	42020400 	.word	0x42020400

0800127c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA5   ------> S_TIM2_CH1
*/
void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	4b6a      	ldr	r3, [pc, #424]	@ (800143c <MX_GPIO_Init+0x1c0>)
 8001294:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001298:	4a68      	ldr	r2, [pc, #416]	@ (800143c <MX_GPIO_Init+0x1c0>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012a2:	4b66      	ldr	r3, [pc, #408]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b0:	4b62      	ldr	r3, [pc, #392]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b6:	4a61      	ldr	r2, [pc, #388]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012bc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012c0:	4b5e      	ldr	r3, [pc, #376]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b5b      	ldr	r3, [pc, #364]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d4:	4a59      	ldr	r2, [pc, #356]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012de:	4b57      	ldr	r3, [pc, #348]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ec:	4b53      	ldr	r3, [pc, #332]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012f2:	4a52      	ldr	r2, [pc, #328]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012fc:	4b4f      	ldr	r3, [pc, #316]	@ (800143c <MX_GPIO_Init+0x1c0>)
 80012fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001310:	484b      	ldr	r0, [pc, #300]	@ (8001440 <MX_GPIO_Init+0x1c4>)
 8001312:	f002 fc17 	bl	8003b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IOX_nRESET_Pin|SPI2_CS_IOX_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f241 0102 	movw	r1, #4098	@ 0x1002
 800131c:	4849      	ldr	r0, [pc, #292]	@ (8001444 <MX_GPIO_Init+0x1c8>)
 800131e:	f002 fc11 	bl	8003b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS0_GPIO_Port, SPI2_CS0_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001328:	4847      	ldr	r0, [pc, #284]	@ (8001448 <MX_GPIO_Init+0x1cc>)
 800132a:	f002 fc0b 	bl	8003b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800132e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	483e      	ldr	r0, [pc, #248]	@ (8001440 <MX_GPIO_Init+0x1c4>)
 8001348:	f002 fa9e 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800134c:	2320      	movs	r3, #32
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800135c:	2301      	movs	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4838      	ldr	r0, [pc, #224]	@ (8001448 <MX_GPIO_Init+0x1cc>)
 8001368:	f002 fa8e 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACC_INT2_Pin */
  GPIO_InitStruct.Pin = ACC_INT2_Pin;
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001370:	4b36      	ldr	r3, [pc, #216]	@ (800144c <MX_GPIO_Init+0x1d0>)
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ACC_INT2_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4832      	ldr	r0, [pc, #200]	@ (8001448 <MX_GPIO_Init+0x1cc>)
 8001380:	f002 fa82 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACC_INT1_Pin IOX_INTB_Pin IOX_INTA_Pin */
  GPIO_InitStruct.Pin = ACC_INT1_Pin|IOX_INTB_Pin|IOX_INTA_Pin;
 8001384:	f240 4305 	movw	r3, #1029	@ 0x405
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800138a:	4b30      	ldr	r3, [pc, #192]	@ (800144c <MX_GPIO_Init+0x1d0>)
 800138c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	4619      	mov	r1, r3
 8001398:	482a      	ldr	r0, [pc, #168]	@ (8001444 <MX_GPIO_Init+0x1c8>)
 800139a:	f002 fa75 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pins : IOX_nRESET_Pin SPI2_CS_IOX_Pin */
  GPIO_InitStruct.Pin = IOX_nRESET_Pin|SPI2_CS_IOX_Pin;
 800139e:	f241 0302 	movw	r3, #4098	@ 0x1002
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4823      	ldr	r0, [pc, #140]	@ (8001444 <MX_GPIO_Init+0x1c8>)
 80013b8:	f002 fa66 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS0_Pin */
  GPIO_InitStruct.Pin = SPI2_CS0_Pin;
 80013bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS0_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	481c      	ldr	r0, [pc, #112]	@ (8001448 <MX_GPIO_Init+0x1cc>)
 80013d6:	f002 fa57 	bl	8003888 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	4815      	ldr	r0, [pc, #84]	@ (8001444 <MX_GPIO_Init+0x1c8>)
 80013f0:	f002 fa4a 	bl	8003888 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	200b      	movs	r0, #11
 80013fa:	f001 fde1 	bl	8002fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013fe:	200b      	movs	r0, #11
 8001400:	f001 fdf8 	bl	8002ff4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001404:	2200      	movs	r2, #0
 8001406:	2100      	movs	r1, #0
 8001408:	200d      	movs	r0, #13
 800140a:	f001 fdd9 	bl	8002fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800140e:	200d      	movs	r0, #13
 8001410:	f001 fdf0 	bl	8002ff4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI7_IRQn, 0, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2100      	movs	r1, #0
 8001418:	2012      	movs	r0, #18
 800141a:	f001 fdd1 	bl	8002fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI7_IRQn);
 800141e:	2012      	movs	r0, #18
 8001420:	f001 fde8 	bl	8002ff4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI10_IRQn, 0, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2100      	movs	r1, #0
 8001428:	2015      	movs	r0, #21
 800142a:	f001 fdc9 	bl	8002fc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 800142e:	2015      	movs	r0, #21
 8001430:	f001 fde0 	bl	8002ff4 <HAL_NVIC_EnableIRQ>

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	@ 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	44020c00 	.word	0x44020c00
 8001440:	42020800 	.word	0x42020800
 8001444:	42020400 	.word	0x42020400
 8001448:	42020000 	.word	0x42020000
 800144c:	10110000 	.word	0x10110000

08001450 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <MX_I2C1_Init+0x74>)
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <MX_I2C1_Init+0x78>)
 8001458:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <MX_I2C1_Init+0x74>)
 800145c:	4a1b      	ldr	r2, [pc, #108]	@ (80014cc <MX_I2C1_Init+0x7c>)
 800145e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <MX_I2C1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <MX_I2C1_Init+0x74>)
 8001468:	2201      	movs	r2, #1
 800146a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <MX_I2C1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <MX_I2C1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <MX_I2C1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001484:	4b0f      	ldr	r3, [pc, #60]	@ (80014c4 <MX_I2C1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800148a:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <MX_I2C1_Init+0x74>)
 800148c:	f002 fbae 	bl	8003bec <HAL_I2C_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001496:	f000 f94d 	bl	8001734 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800149a:	2100      	movs	r1, #0
 800149c:	4809      	ldr	r0, [pc, #36]	@ (80014c4 <MX_I2C1_Init+0x74>)
 800149e:	f002 ffc9 	bl	8004434 <HAL_I2CEx_ConfigAnalogFilter>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014a8:	f000 f944 	bl	8001734 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <MX_I2C1_Init+0x74>)
 80014b0:	f003 f80b 	bl	80044ca <HAL_I2CEx_ConfigDigitalFilter>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014ba:	f000 f93b 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000108 	.word	0x20000108
 80014c8:	40005400 	.word	0x40005400
 80014cc:	10c043e5 	.word	0x10c043e5

080014d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b0ac      	sub	sp, #176	@ 0xb0
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e8:	f107 0310 	add.w	r3, r7, #16
 80014ec:	2288      	movs	r2, #136	@ 0x88
 80014ee:	2100      	movs	r1, #0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f007 fce4 	bl	8008ebe <memset>
  if(i2cHandle->Instance==I2C1)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a26      	ldr	r2, [pc, #152]	@ (8001594 <HAL_I2C_MspInit+0xc4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d144      	bne.n	800158a <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001500:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800150c:	2300      	movs	r3, #0
 800150e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	4618      	mov	r0, r3
 8001516:	f004 f8d1 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8001520:	f000 f908 	bl	8001734 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001524:	4b1c      	ldr	r3, [pc, #112]	@ (8001598 <HAL_I2C_MspInit+0xc8>)
 8001526:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800152a:	4a1b      	ldr	r2, [pc, #108]	@ (8001598 <HAL_I2C_MspInit+0xc8>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001534:	4b18      	ldr	r3, [pc, #96]	@ (8001598 <HAL_I2C_MspInit+0xc8>)
 8001536:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001542:	23c0      	movs	r3, #192	@ 0xc0
 8001544:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001548:	2312      	movs	r3, #18
 800154a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155a:	2304      	movs	r3, #4
 800155c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001560:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001564:	4619      	mov	r1, r3
 8001566:	480d      	ldr	r0, [pc, #52]	@ (800159c <HAL_I2C_MspInit+0xcc>)
 8001568:	f002 f98e 	bl	8003888 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156c:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_I2C_MspInit+0xc8>)
 800156e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_I2C_MspInit+0xc8>)
 8001574:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001578:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_I2C_MspInit+0xc8>)
 800157e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001582:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800158a:	bf00      	nop
 800158c:	37b0      	adds	r7, #176	@ 0xb0
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40005400 	.word	0x40005400
 8001598:	44020c00 	.word	0x44020c00
 800159c:	42020400 	.word	0x42020400

080015a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015a6:	f000 fc3d 	bl	8001e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015aa:	f000 f81f 	bl	80015ec <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80015ae:	f000 f8a3 	bl	80016f8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b2:	f7ff fe63 	bl	800127c <MX_GPIO_Init>
  MX_ADC1_Init();
 80015b6:	f7ff fc6b 	bl	8000e90 <MX_ADC1_Init>
  MX_DAC1_Init();
 80015ba:	f7ff fd33 	bl	8001024 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 80015be:	f7ff fdaf 	bl	8001120 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 80015c2:	f7ff ff45 	bl	8001450 <MX_I2C1_Init>
  MX_SPI2_Init();
 80015c6:	f000 f8bb 	bl	8001740 <MX_SPI2_Init>
  MX_TIM3_Init();
 80015ca:	f000 fa3f 	bl	8001a4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80015ce:	f000 fadf 	bl	8001b90 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80015d2:	f000 fb91 	bl	8001cf8 <MX_USB_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
       float x, y, z;
       accel_poll_data(&x,&y,&z);
 80015d6:	1d3a      	adds	r2, r7, #4
 80015d8:	f107 0108 	add.w	r1, r7, #8
 80015dc:	f107 030c 	add.w	r3, r7, #12
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fbf5 	bl	8000dd0 <accel_poll_data>
  {
 80015e6:	bf00      	nop
 80015e8:	e7f5      	b.n	80015d6 <main+0x36>
	...

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b09c      	sub	sp, #112	@ 0x70
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	2250      	movs	r2, #80	@ 0x50
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f007 fc5f 	bl	8008ebe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001612:	4b36      	ldr	r3, [pc, #216]	@ (80016ec <SystemClock_Config+0x100>)
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	4a35      	ldr	r2, [pc, #212]	@ (80016ec <SystemClock_Config+0x100>)
 8001618:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800161c:	6113      	str	r3, [r2, #16]
 800161e:	4b33      	ldr	r3, [pc, #204]	@ (80016ec <SystemClock_Config+0x100>)
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800162a:	bf00      	nop
 800162c:	4b2f      	ldr	r3, [pc, #188]	@ (80016ec <SystemClock_Config+0x100>)
 800162e:	695b      	ldr	r3, [r3, #20]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b08      	cmp	r3, #8
 8001636:	d1f9      	bne.n	800162c <SystemClock_Config+0x40>

  /** Configure LSE Drive Capability
  *  Warning : Only applied when the LSE is disabled.
  */
  HAL_PWR_EnableBkUpAccess();
 8001638:	f003 f8b6 	bl	80047a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800163c:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <SystemClock_Config+0x104>)
 800163e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001642:	4a2b      	ldr	r2, [pc, #172]	@ (80016f0 <SystemClock_Config+0x104>)
 8001644:	f023 0318 	bic.w	r3, r3, #24
 8001648:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 800164c:	232d      	movs	r3, #45	@ 0x2d
 800164e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001650:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001656:	2301      	movs	r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800165a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800165e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001660:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001666:	2302      	movs	r3, #2
 8001668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800166a:	2303      	movs	r3, #3
 800166c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800166e:	2301      	movs	r3, #1
 8001670:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 62;
 8001672:	233e      	movs	r3, #62	@ 0x3e
 8001674:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001676:	2302      	movs	r3, #2
 8001678:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800167a:	2302      	movs	r3, #2
 800167c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800167e:	2302      	movs	r3, #2
 8001680:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8001682:	230c      	movs	r3, #12
 8001684:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001686:	2300      	movs	r3, #0
 8001688:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800168a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800168e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001690:	f107 0320 	add.w	r3, r7, #32
 8001694:	4618      	mov	r0, r3
 8001696:	f003 f897 	bl	80047c8 <HAL_RCC_OscConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80016a0:	f000 f848 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a4:	231f      	movs	r3, #31
 80016a6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a8:	2303      	movs	r3, #3
 80016aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	2105      	movs	r1, #5
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 fcb8 	bl	8005038 <HAL_RCC_ClockConfig>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80016ce:	f000 f831 	bl	8001734 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80016d2:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <SystemClock_Config+0x108>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80016da:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <SystemClock_Config+0x108>)
 80016dc:	f043 0320 	orr.w	r3, r3, #32
 80016e0:	6013      	str	r3, [r2, #0]
}
 80016e2:	bf00      	nop
 80016e4:	3770      	adds	r7, #112	@ 0x70
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	44020800 	.word	0x44020800
 80016f0:	44020c00 	.word	0x44020c00
 80016f4:	40022000 	.word	0x40022000

080016f8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0a2      	sub	sp, #136	@ 0x88
 80016fc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016fe:	463b      	mov	r3, r7
 8001700:	2288      	movs	r2, #136	@ 0x88
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f007 fbda 	bl	8008ebe <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800170a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800170e:	f04f 0300 	mov.w	r3, #0
 8001712:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001716:	2300      	movs	r3, #0
 8001718:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171a:	463b      	mov	r3, r7
 800171c:	4618      	mov	r0, r3
 800171e:	f003 ffcd 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8001728:	f000 f804 	bl	8001734 <Error_Handler>
  }
}
 800172c:	bf00      	nop
 800172e:	3788      	adds	r7, #136	@ 0x88
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	bf00      	nop
 800173e:	e7fd      	b.n	800173c <Error_Handler+0x8>

08001740 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001744:	4b27      	ldr	r3, [pc, #156]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 8001746:	4a28      	ldr	r2, [pc, #160]	@ (80017e8 <MX_SPI2_Init+0xa8>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b26      	ldr	r3, [pc, #152]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 800174c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001750:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b24      	ldr	r3, [pc, #144]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001758:	4b22      	ldr	r3, [pc, #136]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 800175a:	2207      	movs	r2, #7
 800175c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175e:	4b21      	ldr	r3, [pc, #132]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001764:	4b1f      	ldr	r3, [pc, #124]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800176a:	4b1e      	ldr	r3, [pc, #120]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 800176c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001770:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 8001774:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001778:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177a:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001780:	4b18      	ldr	r3, [pc, #96]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001786:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 8001788:	2200      	movs	r2, #0
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 800178e:	2207      	movs	r2, #7
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001792:	4b14      	ldr	r3, [pc, #80]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 8001794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001798:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800179a:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 800179c:	2200      	movs	r2, #0
 800179e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017a0:	4b10      	ldr	r3, [pc, #64]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017ac:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017b2:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017be:	4b09      	ldr	r3, [pc, #36]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80017c4:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80017ca:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <MX_SPI2_Init+0xa4>)
 80017d2:	f006 f845 	bl	8007860 <HAL_SPI_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80017dc:	f7ff ffaa 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	2000015c 	.word	0x2000015c
 80017e8:	40003800 	.word	0x40003800

080017ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0ac      	sub	sp, #176	@ 0xb0
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	2288      	movs	r2, #136	@ 0x88
 800180a:	2100      	movs	r1, #0
 800180c:	4618      	mov	r0, r3
 800180e:	f007 fb56 	bl	8008ebe <memset>
  if(spiHandle->Instance==SPI2)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a27      	ldr	r2, [pc, #156]	@ (80018b4 <HAL_SPI_MspInit+0xc8>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d146      	bne.n	80018aa <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800181c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi2ClockSelection = RCC_SPI2CLKSOURCE_CLKP;
 8001828:	2320      	movs	r3, #32
 800182a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182e:	f107 0310 	add.w	r3, r7, #16
 8001832:	4618      	mov	r0, r3
 8001834:	f003 ff42 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800183e:	f7ff ff79 	bl	8001734 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001842:	4b1d      	ldr	r3, [pc, #116]	@ (80018b8 <HAL_SPI_MspInit+0xcc>)
 8001844:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001848:	4a1b      	ldr	r2, [pc, #108]	@ (80018b8 <HAL_SPI_MspInit+0xcc>)
 800184a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800184e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <HAL_SPI_MspInit+0xcc>)
 8001854:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001858:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4b15      	ldr	r3, [pc, #84]	@ (80018b8 <HAL_SPI_MspInit+0xcc>)
 8001862:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001866:	4a14      	ldr	r2, [pc, #80]	@ (80018b8 <HAL_SPI_MspInit+0xcc>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <HAL_SPI_MspInit+0xcc>)
 8001872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800187e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001882:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001898:	2305      	movs	r3, #5
 800189a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018a2:	4619      	mov	r1, r3
 80018a4:	4805      	ldr	r0, [pc, #20]	@ (80018bc <HAL_SPI_MspInit+0xd0>)
 80018a6:	f001 ffef 	bl	8003888 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018aa:	bf00      	nop
 80018ac:	37b0      	adds	r7, #176	@ 0xb0
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40003800 	.word	0x40003800
 80018b8:	44020c00 	.word	0x44020c00
 80018bc:	42020400 	.word	0x42020400

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018d2:	bf00      	nop
 80018d4:	e7fd      	b.n	80018d2 <NMI_Handler+0x4>

080018d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018da:	bf00      	nop
 80018dc:	e7fd      	b.n	80018da <HardFault_Handler+0x4>

080018de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e2:	bf00      	nop
 80018e4:	e7fd      	b.n	80018e2 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	bf00      	nop
 80018ec:	e7fd      	b.n	80018ea <BusFault_Handler+0x4>

080018ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f2:	bf00      	nop
 80018f4:	e7fd      	b.n	80018f2 <UsageFault_Handler+0x4>

080018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 fb1c 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT1_Pin);
 8001930:	2001      	movs	r0, #1
 8001932:	f002 f91f 	bl	8003b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}

0800193a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI Line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IOX_INTB_Pin);
 800193e:	2004      	movs	r0, #4
 8001940:	f002 f918 	bl	8003b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <EXTI7_IRQHandler>:

/**
  * @brief This function handles EXTI Line7 interrupt.
  */
void EXTI7_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI7_IRQn 0 */

  /* USER CODE END EXTI7_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_INT2_Pin);
 800194c:	2080      	movs	r0, #128	@ 0x80
 800194e:	f002 f911 	bl	8003b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI7_IRQn 1 */

  /* USER CODE END EXTI7_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}

08001956 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IOX_INTA_Pin);
 800195a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800195e:	f002 f909 	bl	8003b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800196e:	4b30      	ldr	r3, [pc, #192]	@ (8001a30 <SystemInit+0xc8>)
 8001970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001974:	4a2e      	ldr	r2, [pc, #184]	@ (8001a30 <SystemInit+0xc8>)
 8001976:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800197a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800197e:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <SystemInit+0xcc>)
 8001980:	2201      	movs	r2, #1
 8001982:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001984:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <SystemInit+0xcc>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800198a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <SystemInit+0xcc>)
 800198c:	2200      	movs	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
#else
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001990:	4b28      	ldr	r3, [pc, #160]	@ (8001a34 <SystemInit+0xcc>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4927      	ldr	r1, [pc, #156]	@ (8001a34 <SystemInit+0xcc>)
 8001996:	4b28      	ldr	r3, [pc, #160]	@ (8001a38 <SystemInit+0xd0>)
 8001998:	4013      	ands	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800199c:	4b25      	ldr	r3, [pc, #148]	@ (8001a34 <SystemInit+0xcc>)
 800199e:	2200      	movs	r2, #0
 80019a0:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80019a2:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <SystemInit+0xcc>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80019a8:	4b22      	ldr	r3, [pc, #136]	@ (8001a34 <SystemInit+0xcc>)
 80019aa:	4a24      	ldr	r2, [pc, #144]	@ (8001a3c <SystemInit+0xd4>)
 80019ac:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80019ae:	4b21      	ldr	r3, [pc, #132]	@ (8001a34 <SystemInit+0xcc>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80019b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a34 <SystemInit+0xcc>)
 80019b6:	4a21      	ldr	r2, [pc, #132]	@ (8001a3c <SystemInit+0xd4>)
 80019b8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 80019ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001a34 <SystemInit+0xcc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80019c0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a34 <SystemInit+0xcc>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a34 <SystemInit+0xcc>)
 80019c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <SystemInit+0xcc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <SystemInit+0xc8>)
 80019d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80019d8:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80019da:	4b19      	ldr	r3, [pc, #100]	@ (8001a40 <SystemInit+0xd8>)
 80019dc:	699b      	ldr	r3, [r3, #24]
 80019de:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80019e2:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80019ea:	d003      	beq.n	80019f4 <SystemInit+0x8c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80019f2:	d117      	bne.n	8001a24 <SystemInit+0xbc>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80019f4:	4b12      	ldr	r3, [pc, #72]	@ (8001a40 <SystemInit+0xd8>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d005      	beq.n	8001a0c <SystemInit+0xa4>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	@ (8001a40 <SystemInit+0xd8>)
 8001a02:	4a10      	ldr	r2, [pc, #64]	@ (8001a44 <SystemInit+0xdc>)
 8001a04:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <SystemInit+0xd8>)
 8001a08:	4a0f      	ldr	r2, [pc, #60]	@ (8001a48 <SystemInit+0xe0>)
 8001a0a:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a40 <SystemInit+0xd8>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4a0b      	ldr	r2, [pc, #44]	@ (8001a40 <SystemInit+0xd8>)
 8001a12:	f043 0302 	orr.w	r3, r3, #2
 8001a16:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001a18:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <SystemInit+0xd8>)
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	4a08      	ldr	r2, [pc, #32]	@ (8001a40 <SystemInit+0xd8>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	61d3      	str	r3, [r2, #28]
  }
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00
 8001a34:	44020c00 	.word	0x44020c00
 8001a38:	fae2eae3 	.word	0xfae2eae3
 8001a3c:	01010280 	.word	0x01010280
 8001a40:	40022000 	.word	0x40022000
 8001a44:	08192a3b 	.word	0x08192a3b
 8001a48:	4c5d6e7f 	.word	0x4c5d6e7f

08001a4c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	@ 0x28
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
 8001a6c:	615a      	str	r2, [r3, #20]
 8001a6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a70:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <MX_TIM3_Init+0xa8>)
 8001a72:	4a21      	ldr	r2, [pc, #132]	@ (8001af8 <MX_TIM3_Init+0xac>)
 8001a74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	@ (8001af4 <MX_TIM3_Init+0xa8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <MX_TIM3_Init+0xa8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	@ (8001af4 <MX_TIM3_Init+0xa8>)
 8001a84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <MX_TIM3_Init+0xa8>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a90:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <MX_TIM3_Init+0xa8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a96:	4817      	ldr	r0, [pc, #92]	@ (8001af4 <MX_TIM3_Init+0xa8>)
 8001a98:	f005 fffd 	bl	8007a96 <HAL_TIM_PWM_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001aa2:	f7ff fe47 	bl	8001734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001aae:	f107 031c 	add.w	r3, r7, #28
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <MX_TIM3_Init+0xa8>)
 8001ab6:	f006 fc09 	bl	80082cc <HAL_TIMEx_MasterConfigSynchronization>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8001ac0:	f7ff fe38 	bl	8001734 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ac4:	2360      	movs	r3, #96	@ 0x60
 8001ac6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	@ (8001af4 <MX_TIM3_Init+0xa8>)
 8001adc:	f006 f832 	bl	8007b44 <HAL_TIM_PWM_ConfigChannel>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001ae6:	f7ff fe25 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200001ec 	.word	0x200001ec
 8001af8:	40000400 	.word	0x40000400

08001afc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM3)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1a      	ldr	r2, [pc, #104]	@ (8001b84 <HAL_TIM_PWM_MspInit+0x88>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d12d      	bne.n	8001b7a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b24:	4a18      	ldr	r2, [pc, #96]	@ (8001b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b2e:	4b16      	ldr	r3, [pc, #88]	@ (8001b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b42:	4a11      	ldr	r2, [pc, #68]	@ (8001b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b88 <HAL_TIM_PWM_MspInit+0x8c>)
 8001b4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b5a:	2340      	movs	r3, #64	@ 0x40
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	4805      	ldr	r0, [pc, #20]	@ (8001b8c <HAL_TIM_PWM_MspInit+0x90>)
 8001b76:	f001 fe87 	bl	8003888 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	3728      	adds	r7, #40	@ 0x28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40000400 	.word	0x40000400
 8001b88:	44020c00 	.word	0x44020c00
 8001b8c:	42020000 	.word	0x42020000

08001b90 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b94:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001b96:	4a23      	ldr	r2, [pc, #140]	@ (8001c24 <MX_USART1_UART_Init+0x94>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bd8:	4811      	ldr	r0, [pc, #68]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bda:	f006 fbdf 	bl	800839c <HAL_UART_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001be4:	f7ff fda6 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bec:	f006 fffc 	bl	8008be8 <HAL_UARTEx_SetTxFifoThreshold>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bf6:	f7ff fd9d 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4808      	ldr	r0, [pc, #32]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001bfe:	f007 f831 	bl	8008c64 <HAL_UARTEx_SetRxFifoThreshold>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c08:	f7ff fd94 	bl	8001734 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c0c:	4804      	ldr	r0, [pc, #16]	@ (8001c20 <MX_USART1_UART_Init+0x90>)
 8001c0e:	f006 ffb2 	bl	8008b76 <HAL_UARTEx_DisableFifoMode>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c18:	f7ff fd8c 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000238 	.word	0x20000238
 8001c24:	40013800 	.word	0x40013800

08001c28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0ac      	sub	sp, #176	@ 0xb0
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	2288      	movs	r2, #136	@ 0x88
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f007 f938 	bl	8008ebe <memset>
  if(uartHandle->Instance==USART1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a26      	ldr	r2, [pc, #152]	@ (8001cec <HAL_UART_MspInit+0xc4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d145      	bne.n	8001ce4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c58:	f04f 0201 	mov.w	r2, #1
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c64:	2300      	movs	r3, #0
 8001c66:	647b      	str	r3, [r7, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fd25 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001c78:	f7ff fd5c 	bl	8001734 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <HAL_UART_MspInit+0xc8>)
 8001c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c82:	4a1b      	ldr	r2, [pc, #108]	@ (8001cf0 <HAL_UART_MspInit+0xc8>)
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c88:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001c8c:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <HAL_UART_MspInit+0xc8>)
 8001c8e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <HAL_UART_MspInit+0xc8>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca0:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <HAL_UART_MspInit+0xc8>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_UART_MspInit+0xc8>)
 8001cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001cb8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001cbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <HAL_UART_MspInit+0xcc>)
 8001ce0:	f001 fdd2 	bl	8003888 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	37b0      	adds	r7, #176	@ 0xb0
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40013800 	.word	0x40013800
 8001cf0:	44020c00 	.word	0x44020c00
 8001cf4:	42020000 	.word	0x42020000

08001cf8 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_DRD_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001cfe:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <MX_USB_PCD_Init+0x60>)
 8001d00:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001d02:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d04:	2208      	movs	r2, #8
 8001d06:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d10:	2202      	movs	r2, #2
 8001d12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <MX_USB_PCD_Init+0x5c>)
 8001d40:	f002 fc0f 	bl	8004562 <HAL_PCD_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_USB_PCD_Init+0x56>
  {
    Error_Handler();
 8001d4a:	f7ff fcf3 	bl	8001734 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200002cc 	.word	0x200002cc
 8001d58:	40016000 	.word	0x40016000

08001d5c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b0a6      	sub	sp, #152	@ 0x98
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d64:	f107 0310 	add.w	r3, r7, #16
 8001d68:	2288      	movs	r2, #136	@ 0x88
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f007 f8a6 	bl	8008ebe <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a14      	ldr	r2, [pc, #80]	@ (8001dc8 <HAL_PCD_MspInit+0x6c>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d121      	bne.n	8001dc0 <HAL_PCD_MspInit+0x64>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d7c:	f04f 0200 	mov.w	r2, #0
 8001d80:	f04f 0310 	mov.w	r3, #16
 8001d84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001d88:	2330      	movs	r3, #48	@ 0x30
 8001d8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d8e:	f107 0310 	add.w	r3, r7, #16
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fc92 	bl	80056bc <HAL_RCCEx_PeriphCLKConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_PCD_MspInit+0x46>
    {
      Error_Handler();
 8001d9e:	f7ff fcc9 	bl	8001734 <Error_Handler>
    }

    /* USB_DRD_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001da2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dcc <HAL_PCD_MspInit+0x70>)
 8001da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001da8:	4a08      	ldr	r2, [pc, #32]	@ (8001dcc <HAL_PCD_MspInit+0x70>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dae:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_PCD_MspInit+0x70>)
 8001db4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001db8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8001dc0:	bf00      	nop
 8001dc2:	3798      	adds	r7, #152	@ 0x98
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40016000 	.word	0x40016000
 8001dcc:	44020c00 	.word	0x44020c00

08001dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001dd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001dd6:	e003      	b.n	8001de0 <LoopCopyDataInit>

08001dd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001dda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ddc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001dde:	3104      	adds	r1, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001de0:	480b      	ldr	r0, [pc, #44]	@ (8001e10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001de2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001de4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001de6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001de8:	d3f6      	bcc.n	8001dd8 <CopyDataInit>
	ldr	r2, =_sbss
 8001dea:	4a0b      	ldr	r2, [pc, #44]	@ (8001e18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001dec:	e002      	b.n	8001df4 <LoopFillZerobss>

08001dee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001df0:	f842 3b04 	str.w	r3, [r2], #4

08001df4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001df4:	4b09      	ldr	r3, [pc, #36]	@ (8001e1c <LoopForever+0x16>)
	cmp	r2, r3
 8001df6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001df8:	d3f9      	bcc.n	8001dee <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dfa:	f7ff fdb5 	bl	8001968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dfe:	f007 f867 	bl	8008ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e02:	f7ff fbcd 	bl	80015a0 <main>

08001e06 <LoopForever>:

LoopForever:
    b LoopForever
 8001e06:	e7fe      	b.n	8001e06 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001e08:	20008000 	.word	0x20008000
	ldr	r3, =_sidata
 8001e0c:	08008f80 	.word	0x08008f80
	ldr	r0, =_sdata
 8001e10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001e14:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001e18:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001e1c:	200005b4 	.word	0x200005b4

08001e20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC1_IRQHandler>
	...

08001e24 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f001 f8be 	bl	8002faa <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001e2e:	f003 fabb 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8001e32:	4602      	mov	r2, r0
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <HAL_Init+0x44>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	490b      	ldr	r1, [pc, #44]	@ (8001e6c <HAL_Init+0x48>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	4a0a      	ldr	r2, [pc, #40]	@ (8001e70 <HAL_Init+0x4c>)
 8001e46:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001e48:	2004      	movs	r0, #4
 8001e4a:	f001 f903 	bl	8003054 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4e:	200f      	movs	r0, #15
 8001e50:	f000 f810 	bl	8001e74 <HAL_InitTick>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e002      	b.n	8001e64 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e5e:	f7ff fd2f 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	44020c00 	.word	0x44020c00
 8001e6c:	08008f30 	.word	0x08008f30
 8001e70:	20000000 	.word	0x20000000

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001e80:	4b33      	ldr	r3, [pc, #204]	@ (8001f50 <HAL_InitTick+0xdc>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e05c      	b.n	8001f46 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001e8c:	4b31      	ldr	r3, [pc, #196]	@ (8001f54 <HAL_InitTick+0xe0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d10c      	bne.n	8001eb2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001e98:	4b2f      	ldr	r3, [pc, #188]	@ (8001f58 <HAL_InitTick+0xe4>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f50 <HAL_InitTick+0xdc>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	e037      	b.n	8001f22 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001eb2:	f001 f927 	bl	8003104 <HAL_SYSTICK_GetCLKSourceConfig>
 8001eb6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d023      	beq.n	8001f06 <HAL_InitTick+0x92>
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d82d      	bhi.n	8001f20 <HAL_InitTick+0xac>
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_InitTick+0x5e>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d00d      	beq.n	8001eec <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001ed0:	e026      	b.n	8001f20 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001ed2:	4b21      	ldr	r3, [pc, #132]	@ (8001f58 <HAL_InitTick+0xe4>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <HAL_InitTick+0xdc>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	4619      	mov	r1, r3
 8001edc:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001ee0:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee8:	60fb      	str	r3, [r7, #12]
        break;
 8001eea:	e01a      	b.n	8001f22 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <HAL_InitTick+0xdc>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef6:	fbb3 f3f2 	udiv	r3, r3, r2
 8001efa:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f02:	60fb      	str	r3, [r7, #12]
        break;
 8001f04:	e00d      	b.n	8001f22 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_InitTick+0xdc>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f10:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f14:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1c:	60fb      	str	r3, [r7, #12]
        break;
 8001f1e:	e000      	b.n	8001f22 <HAL_InitTick+0xae>
        break;
 8001f20:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f001 f874 	bl	8003010 <HAL_SYSTICK_Config>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e009      	b.n	8001f46 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f32:	2200      	movs	r2, #0
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3a:	f001 f841 	bl	8002fc0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001f3e:	4a07      	ldr	r2, [pc, #28]	@ (8001f5c <HAL_InitTick+0xe8>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008
 8001f54:	e000e010 	.word	0xe000e010
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	20000004 	.word	0x20000004

08001f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008
 8001f84:	200005b0 	.word	0x200005b0

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	200005b0 	.word	0x200005b0

08001fa0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	609a      	str	r2, [r3, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_EnableChannelVDDcore>:
  * @rmtoll OR       OP1       LL_ADC_EnableChannelVDDcore
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannelVDDcore(ADC_TypeDef *ADCx)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->OR, ADC_OR_OP1);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002016:	f043 0202 	orr.w	r2, r3, #2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_EnableChannel0_GPIO>:
  * @rmtoll OR       OP0       LL_ADC_EnableChannel0_GPIO
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableChannel0_GPIO(const ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(ADCx);
  SET_BIT(ADC1->OR, ADC_OR_OP0);
 8002034:	4b06      	ldr	r3, [pc, #24]	@ (8002050 <LL_ADC_EnableChannel0_GPIO+0x24>)
 8002036:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800203a:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <LL_ADC_EnableChannel0_GPIO+0x24>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	42028000 	.word	0x42028000

08002054 <LL_ADC_SetOffset>:
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
 8002060:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3360      	adds	r3, #96	@ 0x60
 8002066:	461a      	mov	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <LL_ADC_SetOffset+0x44>)
 8002076:	4013      	ands	r3, r2
 8002078:	687a      	ldr	r2, [r7, #4]
 800207a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	4313      	orrs	r3, r2
 8002084:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800208c:	bf00      	nop
 800208e:	371c      	adds	r7, #28
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	03fff000 	.word	0x03fff000

0800209c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3360      	adds	r3, #96	@ 0x60
 80020aa:	461a      	mov	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b087      	sub	sp, #28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3360      	adds	r3, #96	@ 0x60
 80020d8:	461a      	mov	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	431a      	orrs	r2, r3
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020f2:	bf00      	nop
 80020f4:	371c      	adds	r7, #28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80020fe:	b480      	push	{r7}
 8002100:	b087      	sub	sp, #28
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3360      	adds	r3, #96	@ 0x60
 800210e:	461a      	mov	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	431a      	orrs	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002128:	bf00      	nop
 800212a:	371c      	adds	r7, #28
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	3360      	adds	r3, #96	@ 0x60
 8002144:	461a      	mov	r2, r3
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	431a      	orrs	r2, r3
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800215e:	bf00      	nop
 8002160:	371c      	adds	r7, #28
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr

0800216a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	695b      	ldr	r3, [r3, #20]
 8002178:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	615a      	str	r2, [r3, #20]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H5, fast channel allows: 2.5 (sampling) + 12.5 (conversion 12b) = 15 ADC clock cycles (fADC)
  *             Other channels are slow channels: 6.5 (sampling) + 12.5 (conversion 12b) = 19 ADC clock cycles (fADC)
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3330      	adds	r3, #48	@ 0x30
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	0a1b      	lsrs	r3, r3, #8
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	4413      	add	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	f003 031f 	and.w	r3, r3, #31
 80021ba:	211f      	movs	r1, #31
 80021bc:	fa01 f303 	lsl.w	r3, r1, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	401a      	ands	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	0e9b      	lsrs	r3, r3, #26
 80021c8:	f003 011f 	and.w	r1, r3, #31
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f003 031f 	and.w	r3, r3, #31
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	431a      	orrs	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021dc:	bf00      	nop
 80021de:	371c      	adds	r7, #28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3314      	adds	r3, #20
 80021f8:	461a      	mov	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	0e5b      	lsrs	r3, r3, #25
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	4413      	add	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	0d1b      	lsrs	r3, r3, #20
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	2107      	movs	r1, #7
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	401a      	ands	r2, r3
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	0d1b      	lsrs	r3, r3, #20
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	431a      	orrs	r2, r3
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0318 	and.w	r3, r3, #24
 8002262:	4908      	ldr	r1, [pc, #32]	@ (8002284 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002264:	40d9      	lsrs	r1, r3
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	400b      	ands	r3, r1
 800226a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800226e:	431a      	orrs	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002276:	bf00      	nop
 8002278:	3714      	adds	r7, #20
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	000fffff 	.word	0x000fffff

08002288 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002298:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6093      	str	r3, [r2, #8]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022c0:	d101      	bne.n	80022c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80022e4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022e8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002310:	d101      	bne.n	8002316 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d101      	bne.n	800233c <LL_ADC_IsEnabled+0x18>
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <LL_ADC_IsEnabled+0x1a>
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800234a:	b480      	push	{r7}
 800234c:	b083      	sub	sp, #12
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b04      	cmp	r3, #4
 800235c:	d101      	bne.n	8002362 <LL_ADC_REG_IsConversionOngoing+0x18>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b08      	cmp	r3, #8
 8002382:	d101      	bne.n	8002388 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e131      	b.n	8002616 <HAL_ADC_Init+0x27e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7fe fdcd 	bl	8000f60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff67 	bl	80022ac <LL_ADC_IsDeepPowerDownEnabled>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d004      	beq.n	80023ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff4d 	bl	8002288 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff ff82 	bl	80022fc <LL_ADC_IsInternalRegulatorEnabled>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d115      	bne.n	800242a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff ff66 	bl	80022d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002408:	4b85      	ldr	r3, [pc, #532]	@ (8002620 <HAL_ADC_Init+0x288>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	4a85      	ldr	r2, [pc, #532]	@ (8002624 <HAL_ADC_Init+0x28c>)
 8002410:	fba2 2303 	umull	r2, r3, r2, r3
 8002414:	099b      	lsrs	r3, r3, #6
 8002416:	3301      	adds	r3, #1
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800241c:	e002      	b.n	8002424 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	3b01      	subs	r3, #1
 8002422:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f9      	bne.n	800241e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff64 	bl	80022fc <LL_ADC_IsInternalRegulatorEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10d      	bne.n	8002456 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800243e:	f043 0210 	orr.w	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244a:	f043 0201 	orr.w	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff75 	bl	800234a <LL_ADC_REG_IsConversionOngoing>
 8002460:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	f040 80ca 	bne.w	8002604 <HAL_ADC_Init+0x26c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f040 80c6 	bne.w	8002604 <HAL_ADC_Init+0x26c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800247c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002480:	f043 0202 	orr.w	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff49 	bl	8002324 <LL_ADC_IsEnabled>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10b      	bne.n	80024b0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002498:	4863      	ldr	r0, [pc, #396]	@ (8002628 <HAL_ADC_Init+0x290>)
 800249a:	f7ff ff43 	bl	8002324 <LL_ADC_IsEnabled>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d105      	bne.n	80024b0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	4619      	mov	r1, r3
 80024aa:	4860      	ldr	r0, [pc, #384]	@ (800262c <HAL_ADC_Init+0x294>)
 80024ac:	f7ff fd78 	bl	8001fa0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7e5b      	ldrb	r3, [r3, #25]
 80024b4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024ba:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024c0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024c6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ce:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d106      	bne.n	80024ec <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	3b01      	subs	r3, #1
 80024e4:	045b      	lsls	r3, r3, #17
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	4b48      	ldr	r3, [pc, #288]	@ (8002630 <HAL_ADC_Init+0x298>)
 8002510:	4013      	ands	r3, r2
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6812      	ldr	r2, [r2, #0]
 8002516:	69b9      	ldr	r1, [r7, #24]
 8002518:	430b      	orrs	r3, r1
 800251a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	611a      	str	r2, [r3, #16]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff1a 	bl	8002370 <LL_ADC_INJ_IsConversionOngoing>
 800253c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d13d      	bne.n	80025c0 <HAL_ADC_Init+0x228>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d13a      	bne.n	80025c0 <HAL_ADC_Init+0x228>
       )
    {
      tmp_cfgr = (
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	7e1b      	ldrb	r3, [r3, #24]
 800254e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002556:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002566:	f023 0302 	bic.w	r3, r3, #2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	69b9      	ldr	r1, [r7, #24]
 8002570:	430b      	orrs	r3, r1
 8002572:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257a:	2b01      	cmp	r3, #1
 800257c:	d118      	bne.n	80025b0 <HAL_ADC_Init+0x218>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002588:	f023 0304 	bic.w	r3, r3, #4
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002594:	4311      	orrs	r1, r2
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800259a:	4311      	orrs	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80025a0:	430a      	orrs	r2, r1
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 0201 	orr.w	r2, r2, #1
 80025ac:	611a      	str	r2, [r3, #16]
 80025ae:	e007      	b.n	80025c0 <HAL_ADC_Init+0x228>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d10c      	bne.n	80025e2 <HAL_ADC_Init+0x24a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f023 010f 	bic.w	r1, r3, #15
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	1e5a      	subs	r2, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	631a      	str	r2, [r3, #48]	@ 0x30
 80025e0:	e007      	b.n	80025f2 <HAL_ADC_Init+0x25a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 020f 	bic.w	r2, r2, #15
 80025f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025f6:	f023 0303 	bic.w	r3, r3, #3
 80025fa:	f043 0201 	orr.w	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	659a      	str	r2, [r3, #88]	@ 0x58
 8002602:	e007      	b.n	8002614 <HAL_ADC_Init+0x27c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002608:	f043 0210 	orr.w	r2, r3, #16
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002614:	7ffb      	ldrb	r3, [r7, #31]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3720      	adds	r7, #32
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000000 	.word	0x20000000
 8002624:	053e2d63 	.word	0x053e2d63
 8002628:	42028000 	.word	0x42028000
 800262c:	42028300 	.word	0x42028300
 8002630:	fff04007 	.word	0xfff04007

08002634 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0b6      	sub	sp, #216	@ 0xd8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_ADC_ConfigChannel+0x22>
 8002652:	2302      	movs	r3, #2
 8002654:	e3e6      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x7f0>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fe71 	bl	800234a <LL_ADC_REG_IsConversionOngoing>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	f040 83cb 	bne.w	8002e06 <HAL_ADC_ConfigChannel+0x7d2>
  {
    if ((pConfig->Channel == ADC_CHANNEL_0)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d009      	beq.n	800268c <HAL_ADC_ConfigChannel+0x58>
        || ((pConfig->Channel == ADC_CHANNEL_1) && (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)))
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4ab0      	ldr	r2, [pc, #704]	@ (8002940 <HAL_ADC_ConfigChannel+0x30c>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d109      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x62>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4aaf      	ldr	r2, [pc, #700]	@ (8002944 <HAL_ADC_ConfigChannel+0x310>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d104      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x62>
    {
      LL_ADC_EnableChannel0_GPIO(hadc->Instance);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fccb 	bl	800202c <LL_ADC_EnableChannel0_GPIO>
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6859      	ldr	r1, [r3, #4]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f7ff fd74 	bl	8002190 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fe4c 	bl	800234a <LL_ADC_REG_IsConversionOngoing>
 80026b2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fe58 	bl	8002370 <LL_ADC_INJ_IsConversionOngoing>
 80026c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80026c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f040 81dd 	bne.w	8002a88 <HAL_ADC_ConfigChannel+0x454>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80026ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f040 81d8 	bne.w	8002a88 <HAL_ADC_ConfigChannel+0x454>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80026e0:	d10f      	bne.n	8002702 <HAL_ADC_ConfigChannel+0xce>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2200      	movs	r2, #0
 80026ec:	4619      	mov	r1, r3
 80026ee:	f7ff fd7b 	bl	80021e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fd35 	bl	800216a <LL_ADC_SetSamplingTimeCommonConfig>
 8002700:	e00e      	b.n	8002720 <HAL_ADC_ConfigChannel+0xec>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6818      	ldr	r0, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	461a      	mov	r2, r3
 8002710:	f7ff fd6a 	bl	80021e8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2100      	movs	r1, #0
 800271a:	4618      	mov	r0, r3
 800271c:	f7ff fd25 	bl	800216a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	08db      	lsrs	r3, r3, #3
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d022      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x154>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	6919      	ldr	r1, [r3, #16]
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002752:	f7ff fc7f 	bl	8002054 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	461a      	mov	r2, r3
 8002764:	f7ff fccb 	bl	80020fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_ADC_ConfigChannel+0x14a>
 8002778:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800277c:	e000      	b.n	8002780 <HAL_ADC_ConfigChannel+0x14c>
 800277e:	2300      	movs	r3, #0
 8002780:	461a      	mov	r2, r3
 8002782:	f7ff fcd7 	bl	8002134 <LL_ADC_SetOffsetSaturation>
 8002786:	e17f      	b.n	8002a88 <HAL_ADC_ConfigChannel+0x454>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fc84 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10a      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x180>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff fc79 	bl	800209c <LL_ADC_GetOffsetChannel>
 80027aa:	4603      	mov	r3, r0
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	f003 021f 	and.w	r2, r3, #31
 80027b2:	e01e      	b.n	80027f2 <HAL_ADC_ConfigChannel+0x1be>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2100      	movs	r1, #0
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fc6e 	bl	800209c <LL_ADC_GetOffsetChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  return result;
 80027d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027d6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  if (value == 0U)
 80027da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x1b2>
    return 32U;
 80027e2:	2320      	movs	r3, #32
 80027e4:	e004      	b.n	80027f0 <HAL_ADC_ConfigChannel+0x1bc>
  return __builtin_clz(value);
 80027e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80027ea:	fab3 f383 	clz	r3, r3
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <HAL_ADC_ConfigChannel+0x1d6>
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0e9b      	lsrs	r3, r3, #26
 8002804:	f003 031f 	and.w	r3, r3, #31
 8002808:	e018      	b.n	800283c <HAL_ADC_ConfigChannel+0x208>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002816:	fa93 f3a3 	rbit	r3, r3
 800281a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800281e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002822:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002826:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x1fe>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e004      	b.n	800283c <HAL_ADC_ConfigChannel+0x208>
  return __builtin_clz(value);
 8002832:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002836:	fab3 f383 	clz	r3, r3
 800283a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800283c:	429a      	cmp	r2, r3
 800283e:	d106      	bne.n	800284e <HAL_ADC_ConfigChannel+0x21a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2200      	movs	r2, #0
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fc3d 	bl	80020c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fc21 	bl	800209c <LL_ADC_GetOffsetChannel>
 800285a:	4603      	mov	r3, r0
 800285c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <HAL_ADC_ConfigChannel+0x246>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fc16 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002870:	4603      	mov	r3, r0
 8002872:	0e9b      	lsrs	r3, r3, #26
 8002874:	f003 021f 	and.w	r2, r3, #31
 8002878:	e01e      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x284>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fc0b 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002886:	4603      	mov	r3, r0
 8002888:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002890:	fa93 f3a3 	rbit	r3, r3
 8002894:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002898:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800289c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80028a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x278>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e004      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x282>
  return __builtin_clz(value);
 80028ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028b0:	fab3 f383 	clz	r3, r3
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d105      	bne.n	80028d0 <HAL_ADC_ConfigChannel+0x29c>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	e018      	b.n	8002902 <HAL_ADC_ConfigChannel+0x2ce>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80028e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80028ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e004      	b.n	8002902 <HAL_ADC_ConfigChannel+0x2ce>
  return __builtin_clz(value);
 80028f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002902:	429a      	cmp	r2, r3
 8002904:	d106      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x2e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	2101      	movs	r1, #1
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fbda 	bl	80020c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2102      	movs	r1, #2
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fbbe 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002920:	4603      	mov	r3, r0
 8002922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10e      	bne.n	8002948 <HAL_ADC_ConfigChannel+0x314>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2102      	movs	r1, #2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fbb3 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002936:	4603      	mov	r3, r0
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	f003 021f 	and.w	r2, r3, #31
 800293e:	e022      	b.n	8002986 <HAL_ADC_ConfigChannel+0x352>
 8002940:	04300002 	.word	0x04300002
 8002944:	407f0000 	.word	0x407f0000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2102      	movs	r1, #2
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fba4 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002966:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800296a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800296e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_ADC_ConfigChannel+0x346>
    return 32U;
 8002976:	2320      	movs	r3, #32
 8002978:	e004      	b.n	8002984 <HAL_ADC_ConfigChannel+0x350>
  return __builtin_clz(value);
 800297a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800298e:	2b00      	cmp	r3, #0
 8002990:	d105      	bne.n	800299e <HAL_ADC_ConfigChannel+0x36a>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	0e9b      	lsrs	r3, r3, #26
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	e016      	b.n	80029cc <HAL_ADC_ConfigChannel+0x398>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029aa:	fa93 f3a3 	rbit	r3, r3
 80029ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80029b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80029b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80029b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_ADC_ConfigChannel+0x38e>
    return 32U;
 80029be:	2320      	movs	r3, #32
 80029c0:	e004      	b.n	80029cc <HAL_ADC_ConfigChannel+0x398>
  return __builtin_clz(value);
 80029c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d106      	bne.n	80029de <HAL_ADC_ConfigChannel+0x3aa>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fb75 	bl	80020c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2103      	movs	r1, #3
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fb59 	bl	800209c <LL_ADC_GetOffsetChannel>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10a      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x3d6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2103      	movs	r1, #3
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fb4e 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002a00:	4603      	mov	r3, r0
 8002a02:	0e9b      	lsrs	r3, r3, #26
 8002a04:	f003 021f 	and.w	r2, r3, #31
 8002a08:	e017      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x406>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2103      	movs	r1, #3
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff fb43 	bl	800209c <LL_ADC_GetOffsetChannel>
 8002a16:	4603      	mov	r3, r0
 8002a18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a1c:	fa93 f3a3 	rbit	r3, r3
 8002a20:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002a22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a24:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002a26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e003      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002a30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d105      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x41e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	e011      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x442>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002a60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a62:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002a64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_ADC_ConfigChannel+0x43a>
    return 32U;
 8002a6a:	2320      	movs	r3, #32
 8002a6c:	e003      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x442>
  return __builtin_clz(value);
 8002a6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d106      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x454>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2103      	movs	r1, #3
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fb20 	bl	80020c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fc49 	bl	8002324 <LL_ADC_IsEnabled>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f040 813f 	bne.w	8002d18 <HAL_ADC_ConfigChannel+0x6e4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6819      	ldr	r1, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	f7ff fbca 	bl	8002240 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	4a8e      	ldr	r2, [pc, #568]	@ (8002cec <HAL_ADC_ConfigChannel+0x6b8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	f040 8130 	bne.w	8002d18 <HAL_ADC_ConfigChannel+0x6e4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x4ac>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	0e9b      	lsrs	r3, r3, #26
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	bf94      	ite	ls
 8002ad8:	2301      	movls	r3, #1
 8002ada:	2300      	movhi	r3, #0
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	e019      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x4e0>
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002aee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002af0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002af2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d101      	bne.n	8002afc <HAL_ADC_ConfigChannel+0x4c8>
    return 32U;
 8002af8:	2320      	movs	r3, #32
 8002afa:	e003      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8002afc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f003 031f 	and.w	r3, r3, #31
 8002b0a:	2b09      	cmp	r3, #9
 8002b0c:	bf94      	ite	ls
 8002b0e:	2301      	movls	r3, #1
 8002b10:	2300      	movhi	r3, #0
 8002b12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d079      	beq.n	8002c0c <HAL_ADC_ConfigChannel+0x5d8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_ADC_ConfigChannel+0x500>
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	0e9b      	lsrs	r3, r3, #26
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	069b      	lsls	r3, r3, #26
 8002b2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b32:	e015      	b.n	8002b60 <HAL_ADC_ConfigChannel+0x52c>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b3c:	fa93 f3a3 	rbit	r3, r3
 8002b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002b42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002b46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x51c>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e003      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x524>
  return __builtin_clz(value);
 8002b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b52:	fab3 f383 	clz	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	3301      	adds	r3, #1
 8002b5a:	069b      	lsls	r3, r3, #26
 8002b5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d109      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x54c>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	0e9b      	lsrs	r3, r3, #26
 8002b72:	3301      	adds	r3, #1
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	2101      	movs	r1, #1
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	e017      	b.n	8002bb0 <HAL_ADC_ConfigChannel+0x57c>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b88:	fa93 f3a3 	rbit	r3, r3
 8002b8c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002b8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b90:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002b92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x568>
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e003      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x570>
  return __builtin_clz(value);
 8002b9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002b9e:	fab3 f383 	clz	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	f003 031f 	and.w	r3, r3, #31
 8002baa:	2101      	movs	r1, #1
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	ea42 0103 	orr.w	r1, r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10a      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x5a2>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	0e9b      	lsrs	r3, r3, #26
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	f003 021f 	and.w	r2, r3, #31
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	051b      	lsls	r3, r3, #20
 8002bd4:	e018      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x5d4>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bde:	fa93 f3a3 	rbit	r3, r3
 8002be2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x5be>
    return 32U;
 8002bee:	2320      	movs	r3, #32
 8002bf0:	e003      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x5c6>
  return __builtin_clz(value);
 8002bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bf4:	fab3 f383 	clz	r3, r3
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4613      	mov	r3, r2
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	4413      	add	r3, r2
 8002c06:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c08:	430b      	orrs	r3, r1
 8002c0a:	e080      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x6da>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x5f4>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	0e9b      	lsrs	r3, r3, #26
 8002c1e:	3301      	adds	r3, #1
 8002c20:	069b      	lsls	r3, r3, #26
 8002c22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c26:	e015      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x620>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c38:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d101      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x610>
    return 32U;
 8002c40:	2320      	movs	r3, #32
 8002c42:	e003      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x618>
  return __builtin_clz(value);
 8002c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	069b      	lsls	r3, r3, #26
 8002c50:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x640>
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	3301      	adds	r3, #1
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	e017      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x670>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	61fb      	str	r3, [r7, #28]
  return result;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x65c>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x664>
  return __builtin_clz(value);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	3301      	adds	r3, #1
 8002c9a:	f003 031f 	and.w	r3, r3, #31
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca4:	ea42 0103 	orr.w	r1, r2, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10d      	bne.n	8002cd0 <HAL_ADC_ConfigChannel+0x69c>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	005b      	lsls	r3, r3, #1
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3b1e      	subs	r3, #30
 8002cc8:	051b      	lsls	r3, r3, #20
 8002cca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002cce:	e01d      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x6d8>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	fa93 f3a3 	rbit	r3, r3
 8002cdc:	613b      	str	r3, [r7, #16]
  return result;
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d103      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x6bc>
    return 32U;
 8002ce8:	2320      	movs	r3, #32
 8002cea:	e005      	b.n	8002cf8 <HAL_ADC_ConfigChannel+0x6c4>
 8002cec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fab3 f383 	clz	r3, r3
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	f003 021f 	and.w	r2, r3, #31
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	3b1e      	subs	r3, #30
 8002d06:	051b      	lsls	r3, r3, #20
 8002d08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7ff fa68 	bl	80021e8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	4b43      	ldr	r3, [pc, #268]	@ (8002e2c <HAL_ADC_ConfigChannel+0x7f8>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d079      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d24:	4842      	ldr	r0, [pc, #264]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7fc>)
 8002d26:	f7ff f961 	bl	8001fec <LL_ADC_GetCommonPathInternalCh>
 8002d2a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a40      	ldr	r2, [pc, #256]	@ (8002e34 <HAL_ADC_ConfigChannel+0x800>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d124      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x74e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d3c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d11e      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x74e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a3b      	ldr	r2, [pc, #236]	@ (8002e38 <HAL_ADC_ConfigChannel+0x804>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d164      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d52:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d56:	4619      	mov	r1, r3
 8002d58:	4835      	ldr	r0, [pc, #212]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7fc>)
 8002d5a:	f7ff f934 	bl	8001fc6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d5e:	4b37      	ldr	r3, [pc, #220]	@ (8002e3c <HAL_ADC_ConfigChannel+0x808>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	099b      	lsrs	r3, r3, #6
 8002d64:	4a36      	ldr	r2, [pc, #216]	@ (8002e40 <HAL_ADC_ConfigChannel+0x80c>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d72:	e002      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x746>
          {
            wait_loop_index--;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f9      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x740>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d80:	e04a      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2f      	ldr	r2, [pc, #188]	@ (8002e44 <HAL_ADC_ConfigChannel+0x810>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d113      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x780>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002d90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10d      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x780>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a26      	ldr	r2, [pc, #152]	@ (8002e38 <HAL_ADC_ConfigChannel+0x804>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d13a      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002da2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002daa:	4619      	mov	r1, r3
 8002dac:	4820      	ldr	r0, [pc, #128]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7fc>)
 8002dae:	f7ff f90a 	bl	8001fc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002db2:	e031      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a23      	ldr	r2, [pc, #140]	@ (8002e48 <HAL_ADC_ConfigChannel+0x814>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d113      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x7b2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10d      	bne.n	8002de6 <HAL_ADC_ConfigChannel+0x7b2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a1a      	ldr	r2, [pc, #104]	@ (8002e38 <HAL_ADC_ConfigChannel+0x804>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d121      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002dd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4814      	ldr	r0, [pc, #80]	@ (8002e30 <HAL_ADC_ConfigChannel+0x7fc>)
 8002de0:	f7ff f8f1 	bl	8001fc6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002de4:	e018      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
                                         LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
        }
      }
      else if (pConfig->Channel == ADC_CHANNEL_VDDCORE)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a18      	ldr	r2, [pc, #96]	@ (8002e4c <HAL_ADC_ConfigChannel+0x818>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d113      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
      {
        if (ADC_VDDCORE_INSTANCE(hadc))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <HAL_ADC_ConfigChannel+0x804>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
        {
          LL_ADC_EnableChannelVDDcore(hadc->Instance);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f902 	bl	8002008 <LL_ADC_EnableChannelVDDcore>
 8002e04:	e008      	b.n	8002e18 <HAL_ADC_ConfigChannel+0x7e4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	f043 0220 	orr.w	r2, r3, #32
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8002e20:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	37d8      	adds	r7, #216	@ 0xd8
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	80080000 	.word	0x80080000
 8002e30:	42028300 	.word	0x42028300
 8002e34:	c3210000 	.word	0xc3210000
 8002e38:	42028000 	.word	0x42028000
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	053e2d63 	.word	0x053e2d63
 8002e44:	88600004 	.word	0x88600004
 8002e48:	c7520000 	.word	0xc7520000
 8002e4c:	99200040 	.word	0x99200040

08002e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e60:	4b0c      	ldr	r3, [pc, #48]	@ (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e82:	4a04      	ldr	r2, [pc, #16]	@ (8002e94 <__NVIC_SetPriorityGrouping+0x44>)
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	60d3      	str	r3, [r2, #12]
}
 8002e88:	bf00      	nop
 8002e8a:	3714      	adds	r7, #20
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	@ (8002eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	0a1b      	lsrs	r3, r3, #8
 8002ea2:	f003 0307 	and.w	r3, r3, #7
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	db0b      	blt.n	8002ede <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	f003 021f 	and.w	r2, r3, #31
 8002ecc:	4907      	ldr	r1, [pc, #28]	@ (8002eec <__NVIC_EnableIRQ+0x38>)
 8002ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ed2:	095b      	lsrs	r3, r3, #5
 8002ed4:	2001      	movs	r0, #1
 8002ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8002eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	@ (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	@ (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	@ 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	@ 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ff4c 	bl	8002e50 <__NVIC_SetPriorityGrouping>
}
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fce:	f7ff ff63 	bl	8002e98 <__NVIC_GetPriorityGrouping>
 8002fd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	68b9      	ldr	r1, [r7, #8]
 8002fd8:	6978      	ldr	r0, [r7, #20]
 8002fda:	f7ff ffb3 	bl	8002f44 <NVIC_EncodePriority>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff ff82 	bl	8002ef0 <__NVIC_SetPriority>
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ffe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ff56 	bl	8002eb4 <__NVIC_EnableIRQ>
}
 8003008:	bf00      	nop
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3b01      	subs	r3, #1
 800301c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003020:	d301      	bcc.n	8003026 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8003022:	2301      	movs	r3, #1
 8003024:	e00d      	b.n	8003042 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8003026:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <HAL_SYSTICK_Config+0x40>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800302e:	4b08      	ldr	r3, [pc, #32]	@ (8003050 <HAL_SYSTICK_Config+0x40>)
 8003030:	2200      	movs	r2, #0
 8003032:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8003034:	4b06      	ldr	r3, [pc, #24]	@ (8003050 <HAL_SYSTICK_Config+0x40>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a05      	ldr	r2, [pc, #20]	@ (8003050 <HAL_SYSTICK_Config+0x40>)
 800303a:	f043 0303 	orr.w	r3, r3, #3
 800303e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	e000e010 	.word	0xe000e010

08003054 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2b04      	cmp	r3, #4
 8003060:	d844      	bhi.n	80030ec <HAL_SYSTICK_CLKSourceConfig+0x98>
 8003062:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	0800308b 	.word	0x0800308b
 800306c:	080030a9 	.word	0x080030a9
 8003070:	080030cb 	.word	0x080030cb
 8003074:	080030ed 	.word	0x080030ed
 8003078:	0800307d 	.word	0x0800307d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800307c:	4b1f      	ldr	r3, [pc, #124]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a1e      	ldr	r2, [pc, #120]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003082:	f043 0304 	orr.w	r3, r3, #4
 8003086:	6013      	str	r3, [r2, #0]
      break;
 8003088:	e031      	b.n	80030ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800308a:	4b1c      	ldr	r3, [pc, #112]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1b      	ldr	r2, [pc, #108]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003096:	4b1a      	ldr	r3, [pc, #104]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003098:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800309c:	4a18      	ldr	r2, [pc, #96]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800309e:	f023 030c 	bic.w	r3, r3, #12
 80030a2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80030a6:	e022      	b.n	80030ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80030a8:	4b14      	ldr	r3, [pc, #80]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a13      	ldr	r2, [pc, #76]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030ae:	f023 0304 	bic.w	r3, r3, #4
 80030b2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80030b4:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030ba:	f023 030c 	bic.w	r3, r3, #12
 80030be:	4a10      	ldr	r2, [pc, #64]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80030c8:	e011      	b.n	80030ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80030ca:	4b0c      	ldr	r3, [pc, #48]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a0b      	ldr	r2, [pc, #44]	@ (80030fc <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80030d0:	f023 0304 	bic.w	r3, r3, #4
 80030d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80030d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80030dc:	f023 030c 	bic.w	r3, r3, #12
 80030e0:	4a07      	ldr	r2, [pc, #28]	@ (8003100 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80030e2:	f043 0308 	orr.w	r3, r3, #8
 80030e6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80030ea:	e000      	b.n	80030ee <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80030ec:	bf00      	nop
  }
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	e000e010 	.word	0xe000e010
 8003100:	44020c00 	.word	0x44020c00

08003104 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800310a:	4b17      	ldr	r3, [pc, #92]	@ (8003168 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0304 	and.w	r3, r3, #4
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003116:	2304      	movs	r3, #4
 8003118:	607b      	str	r3, [r7, #4]
 800311a:	e01e      	b.n	800315a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800311c:	4b13      	ldr	r3, [pc, #76]	@ (800316c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800311e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	2b08      	cmp	r3, #8
 800312c:	d00f      	beq.n	800314e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b08      	cmp	r3, #8
 8003132:	d80f      	bhi.n	8003154 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b04      	cmp	r3, #4
 800313e:	d003      	beq.n	8003148 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003140:	e008      	b.n	8003154 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003142:	2300      	movs	r3, #0
 8003144:	607b      	str	r3, [r7, #4]
        break;
 8003146:	e008      	b.n	800315a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003148:	2301      	movs	r3, #1
 800314a:	607b      	str	r3, [r7, #4]
        break;
 800314c:	e005      	b.n	800315a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800314e:	2302      	movs	r3, #2
 8003150:	607b      	str	r3, [r7, #4]
        break;
 8003152:	e002      	b.n	800315a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8003154:	2300      	movs	r3, #0
 8003156:	607b      	str	r3, [r7, #4]
        break;
 8003158:	bf00      	nop
    }
  }
  return systick_source;
 800315a:	687b      	ldr	r3, [r7, #4]
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	e000e010 	.word	0xe000e010
 800316c:	44020c00 	.word	0x44020c00

08003170 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e014      	b.n	80031ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	791b      	ldrb	r3, [r3, #4]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d105      	bne.n	8003198 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd ff7e 	bl	8001094 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b08c      	sub	sp, #48	@ 0x30
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d002      	beq.n	80031d2 <HAL_DAC_ConfigChannel+0x1e>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e19d      	b.n	8003512 <HAL_DAC_ConfigChannel+0x35e>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b04      	cmp	r3, #4
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	795b      	ldrb	r3, [r3, #5]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_DAC_ConfigChannel+0x34>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e194      	b.n	8003512 <HAL_DAC_ConfigChannel+0x35e>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2202      	movs	r2, #2
 80031f2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d17a      	bne.n	80032f2 <HAL_DAC_ConfigChannel+0x13e>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80031fc:	f7fe fec4 	bl	8001f88 <HAL_GetTick>
 8003200:	6238      	str	r0, [r7, #32]

    if (Channel == DAC_CHANNEL_1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d13d      	bne.n	8003284 <HAL_DAC_ConfigChannel+0xd0>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003208:	e018      	b.n	800323c <HAL_DAC_ConfigChannel+0x88>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800320a:	f7fe febd 	bl	8001f88 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d911      	bls.n	800323c <HAL_DAC_ConfigChannel+0x88>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800321e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_DAC_ConfigChannel+0x88>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f043 0208 	orr.w	r2, r3, #8
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2203      	movs	r2, #3
 8003236:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e16a      	b.n	8003512 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003242:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1df      	bne.n	800320a <HAL_DAC_ConfigChannel+0x56>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	6a12      	ldr	r2, [r2, #32]
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40
 8003254:	e020      	b.n	8003298 <HAL_DAC_ConfigChannel+0xe4>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003256:	f7fe fe97 	bl	8001f88 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d90f      	bls.n	8003284 <HAL_DAC_ConfigChannel+0xd0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800326a:	2b00      	cmp	r3, #0
 800326c:	da0a      	bge.n	8003284 <HAL_DAC_ConfigChannel+0xd0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f043 0208 	orr.w	r2, r3, #8
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2203      	movs	r2, #3
 800327e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e146      	b.n	8003512 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328a:	2b00      	cmp	r3, #0
 800328c:	dbe3      	blt.n	8003256 <HAL_DAC_ConfigChannel+0xa2>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	6a12      	ldr	r2, [r2, #32]
 8003296:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	ea02 0103 	and.w	r1, r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	409a      	lsls	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	21ff      	movs	r1, #255	@ 0xff
 80032d4:	fa01 f303 	lsl.w	r3, r1, r3
 80032d8:	43db      	mvns	r3, r3
 80032da:	ea02 0103 	and.w	r1, r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	409a      	lsls	r2, r3
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d11d      	bne.n	8003336 <HAL_DAC_ConfigChannel+0x182>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f003 0310 	and.w	r3, r3, #16
 8003308:	221f      	movs	r2, #31
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003312:	4013      	ands	r3, r2
 8003314:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	61fb      	str	r3, [r7, #28]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800332a:	4313      	orrs	r3, r2
 800332c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003334:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800333c:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f003 0310 	and.w	r3, r3, #16
 8003344:	2207      	movs	r2, #7
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800334e:	4013      	ands	r3, r2
 8003350:	62bb      	str	r3, [r7, #40]	@ 0x28
#if !defined(TIM8)
  /* Devices STM32H503xx */
  /* On STM32H503EB (package WLCSP25) DAC channel 1 connection to GPIO is not available and should not be configured.
     Package information is stored at the address PACKAGE_BASE, WLCSP25 correspond to the value 0xF (For more
     information, please refer to the Reference Manual) */
  const __IO uint16_t *tmp_package = (uint16_t *)PACKAGE_BASE;
 8003352:	4b72      	ldr	r3, [pc, #456]	@ (800351c <HAL_DAC_ConfigChannel+0x368>)
 8003354:	61bb      	str	r3, [r7, #24]
  if ((*(tmp_package) & 0x1FUL) == 0x0FUL)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	f003 031f 	and.w	r3, r3, #31
 8003360:	2b0f      	cmp	r3, #15
 8003362:	d116      	bne.n	8003392 <HAL_DAC_ConfigChannel+0x1de>
  {
    if ((Channel == DAC_CHANNEL_1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d113      	bne.n	8003392 <HAL_DAC_ConfigChannel+0x1de>
        && ((sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d003      	beq.n	800337a <HAL_DAC_ConfigChannel+0x1c6>
            || (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH)))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d10b      	bne.n	8003392 <HAL_DAC_ConfigChannel+0x1de>
    {
      /* Update return status */
      status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

      /* Change the DAC state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2204      	movs	r2, #4
 8003384:	711a      	strb	r2, [r3, #4]

      /* Update error code */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_INVALID_CONFIG);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	f043 0220 	orr.w	r2, r3, #32
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	611a      	str	r2, [r3, #16]
    }
  }
#endif /* Devices STM32H503xx */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d102      	bne.n	80033a0 <HAL_DAC_ConfigChannel+0x1ec>
  {
    connectOnChip = 0x00000000UL;
 800339a:	2300      	movs	r3, #0
 800339c:	627b      	str	r3, [r7, #36]	@ 0x24
 800339e:	e00f      	b.n	80033c0 <HAL_DAC_ConfigChannel+0x20c>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d102      	bne.n	80033ae <HAL_DAC_ConfigChannel+0x1fa>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80033a8:	2301      	movs	r3, #1
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ac:	e008      	b.n	80033c0 <HAL_DAC_ConfigChannel+0x20c>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d102      	bne.n	80033bc <HAL_DAC_ConfigChannel+0x208>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80033b6:	2301      	movs	r3, #1
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80033ba:	e001      	b.n	80033c0 <HAL_DAC_ConfigChannel+0x20c>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80033bc:	2300      	movs	r3, #0
 80033be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033e2:	4013      	ands	r3, r2
 80033e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	791b      	ldrb	r3, [r3, #4]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d102      	bne.n	80033f4 <HAL_DAC_ConfigChannel+0x240>
 80033ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033f2:	e000      	b.n	80033f6 <HAL_DAC_ConfigChannel+0x242>
 80033f4:	2300      	movs	r3, #0
 80033f6:	69fa      	ldr	r2, [r7, #28]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800340e:	4013      	ands	r3, r2
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	795b      	ldrb	r3, [r3, #5]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HAL_DAC_ConfigChannel+0x26c>
 800341a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800341e:	e000      	b.n	8003422 <HAL_DAC_ConfigChannel+0x26e>
 8003420:	2300      	movs	r3, #0
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	4313      	orrs	r3, r2
 8003426:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800342e:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b02      	cmp	r3, #2
 8003436:	d114      	bne.n	8003462 <HAL_DAC_ConfigChannel+0x2ae>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003438:	f002 f8e2 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 800343c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	4a37      	ldr	r2, [pc, #220]	@ (8003520 <HAL_DAC_ConfigChannel+0x36c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d904      	bls.n	8003450 <HAL_DAC_ConfigChannel+0x29c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800344c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800344e:	e00f      	b.n	8003470 <HAL_DAC_ConfigChannel+0x2bc>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	4a34      	ldr	r2, [pc, #208]	@ (8003524 <HAL_DAC_ConfigChannel+0x370>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d90a      	bls.n	800346e <HAL_DAC_ConfigChannel+0x2ba>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800345e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003460:	e006      	b.n	8003470 <HAL_DAC_ConfigChannel+0x2bc>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003468:	4313      	orrs	r3, r2
 800346a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800346c:	e000      	b.n	8003470 <HAL_DAC_ConfigChannel+0x2bc>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800346e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f003 0310 	and.w	r3, r3, #16
 8003476:	69fa      	ldr	r2, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800347e:	4313      	orrs	r3, r2
 8003480:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003488:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f003 0310 	and.w	r3, r3, #16
 8003496:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43da      	mvns	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	400a      	ands	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	43db      	mvns	r3, r3
 80034c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034c2:	4013      	ands	r3, r2
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	61fb      	str	r3, [r7, #28]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034da:	4313      	orrs	r3, r2
 80034dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6819      	ldr	r1, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	22c0      	movs	r2, #192	@ 0xc0
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43da      	mvns	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	400a      	ands	r2, r1
 8003500:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800350e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003512:	4618      	mov	r0, r3
 8003514:	3730      	adds	r7, #48	@ 0x30
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	08fff80e 	.word	0x08fff80e
 8003520:	09896800 	.word	0x09896800
 8003524:	04c4b400 	.word	0x04c4b400

08003528 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e147      	b.n	80037ca <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d106      	bne.n	8003554 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7fd fe2c 	bl	80011ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	699a      	ldr	r2, [r3, #24]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0210 	bic.w	r2, r2, #16
 8003562:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003564:	f7fe fd10 	bl	8001f88 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800356a:	e012      	b.n	8003592 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800356c:	f7fe fd0c 	bl	8001f88 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b0a      	cmp	r3, #10
 8003578:	d90b      	bls.n	8003592 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2203      	movs	r2, #3
 800358a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e11b      	b.n	80037ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b08      	cmp	r3, #8
 800359e:	d0e5      	beq.n	800356c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035b0:	f7fe fcea 	bl	8001f88 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035b6:	e012      	b.n	80035de <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80035b8:	f7fe fce6 	bl	8001f88 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b0a      	cmp	r3, #10
 80035c4:	d90b      	bls.n	80035de <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e0f5      	b.n	80037ca <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0e5      	beq.n	80035b8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699a      	ldr	r2, [r3, #24]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0202 	orr.w	r2, r2, #2
 80035fa:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a74      	ldr	r2, [pc, #464]	@ (80037d4 <HAL_FDCAN_Init+0x2ac>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d103      	bne.n	800360e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003606:	4a74      	ldr	r2, [pc, #464]	@ (80037d8 <HAL_FDCAN_Init+0x2b0>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	7c1b      	ldrb	r3, [r3, #16]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d108      	bne.n	8003628 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	699a      	ldr	r2, [r3, #24]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003624:	619a      	str	r2, [r3, #24]
 8003626:	e007      	b.n	8003638 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	699a      	ldr	r2, [r3, #24]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003636:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7c5b      	ldrb	r3, [r3, #17]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d108      	bne.n	8003652 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	699a      	ldr	r2, [r3, #24]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800364e:	619a      	str	r2, [r3, #24]
 8003650:	e007      	b.n	8003662 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003660:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	7c9b      	ldrb	r3, [r3, #18]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d108      	bne.n	800367c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699a      	ldr	r2, [r3, #24]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003678:	619a      	str	r2, [r3, #24]
 800367a:	e007      	b.n	800368c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800368a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80036b0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f022 0210 	bic.w	r2, r2, #16
 80036c0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d108      	bne.n	80036dc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699a      	ldr	r2, [r3, #24]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0204 	orr.w	r2, r2, #4
 80036d8:	619a      	str	r2, [r3, #24]
 80036da:	e02c      	b.n	8003736 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d028      	beq.n	8003736 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d01c      	beq.n	8003726 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	699a      	ldr	r2, [r3, #24]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036fa:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0210 	orr.w	r2, r2, #16
 800370a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b03      	cmp	r3, #3
 8003712:	d110      	bne.n	8003736 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699a      	ldr	r2, [r3, #24]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0220 	orr.w	r2, r2, #32
 8003722:	619a      	str	r2, [r3, #24]
 8003724:	e007      	b.n	8003736 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0220 	orr.w	r2, r2, #32
 8003734:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	3b01      	subs	r3, #1
 800373c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	3b01      	subs	r3, #1
 8003744:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003746:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800374e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	3b01      	subs	r3, #1
 8003758:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800375e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003760:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800376a:	d115      	bne.n	8003798 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003770:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003776:	3b01      	subs	r3, #1
 8003778:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800377a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003780:	3b01      	subs	r3, #1
 8003782:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003784:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800378c:	3b01      	subs	r3, #1
 800378e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003794:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003796:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f814 	bl	80037dc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	4000a400 	.word	0x4000a400
 80037d8:	4000a500 	.word	0x4000a500

080037dc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80037e4:	4b27      	ldr	r3, [pc, #156]	@ (8003884 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80037e6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE;
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037f6:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fe:	041a      	lsls	r2, r3, #16
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800381c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	061a      	lsls	r2, r3, #24
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	60fb      	str	r3, [r7, #12]
 800385c:	e005      	b.n	800386a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3304      	adds	r3, #4
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	429a      	cmp	r2, r3
 8003874:	d3f3      	bcc.n	800385e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003876:	bf00      	nop
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	4000ac00 	.word	0x4000ac00

08003888 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003896:	e142      	b.n	8003b1e <HAL_GPIO_Init+0x296>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2101      	movs	r1, #1
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	4013      	ands	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	f000 8134 	beq.w	8003b18 <HAL_GPIO_Init+0x290>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d003      	beq.n	80038c0 <HAL_GPIO_Init+0x38>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2b12      	cmp	r3, #18
 80038be:	d125      	bne.n	800390c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	08da      	lsrs	r2, r3, #3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3208      	adds	r2, #8
 80038c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	220f      	movs	r2, #15
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	43db      	mvns	r3, r3
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	4013      	ands	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	f003 020f 	and.w	r2, r3, #15
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	08da      	lsrs	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3208      	adds	r2, #8
 8003906:	6979      	ldr	r1, [r7, #20]
 8003908:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	4013      	ands	r3, r2
 8003922:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f003 0203 	and.w	r2, r3, #3
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d00b      	beq.n	8003960 <HAL_GPIO_Init+0xd8>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d007      	beq.n	8003960 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003954:	2b11      	cmp	r3, #17
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b12      	cmp	r3, #18
 800395e:	d130      	bne.n	80039c2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	2203      	movs	r2, #3
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	4013      	ands	r3, r2
 8003976:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003996:	2201      	movs	r2, #1
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	43db      	mvns	r3, r3
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4013      	ands	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	091b      	lsrs	r3, r3, #4
 80039ac:	f003 0201 	and.w	r2, r3, #1
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	fa02 f303 	lsl.w	r3, r2, r3
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	605a      	str	r2, [r3, #4]
      }

      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d109      	bne.n	80039e2 <HAL_GPIO_Init+0x15a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0303 	and.w	r3, r3, #3
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d11b      	bne.n	8003a12 <HAL_GPIO_Init+0x18a>
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d017      	beq.n	8003a12 <HAL_GPIO_Init+0x18a>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	005b      	lsls	r3, r3, #1
 80039ec:	2203      	movs	r2, #3
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43db      	mvns	r3, r3
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4013      	ands	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d07c      	beq.n	8003b18 <HAL_GPIO_Init+0x290>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003a1e:	4a47      	ldr	r2, [pc, #284]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	089b      	lsrs	r3, r3, #2
 8003a24:	3318      	adds	r3, #24
 8003a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	220f      	movs	r2, #15
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43db      	mvns	r3, r3
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	0a9a      	lsrs	r2, r3, #10
 8003a46:	4b3e      	ldr	r3, [pc, #248]	@ (8003b40 <HAL_GPIO_Init+0x2b8>)
 8003a48:	4013      	ands	r3, r2
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	f002 0203 	and.w	r2, r2, #3
 8003a50:	00d2      	lsls	r2, r2, #3
 8003a52:	4093      	lsls	r3, r2
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003a5a:	4938      	ldr	r1, [pc, #224]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	3318      	adds	r3, #24
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003a68:	4b34      	ldr	r3, [pc, #208]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	43db      	mvns	r3, r3
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4013      	ands	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_GPIO_Init+0x204>
        {
          tmp |= iocurrent;
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003a8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003a92:	4b2a      	ldr	r3, [pc, #168]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_GPIO_Init+0x22e>
        {
          tmp |= iocurrent;
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003ab6:	4a21      	ldr	r2, [pc, #132]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003abc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ac2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4013      	ands	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_GPIO_Init+0x25a>
        {
          tmp |= iocurrent;
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003ae2:	4a16      	ldr	r2, [pc, #88]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003aea:	4b14      	ldr	r3, [pc, #80]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003af0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4013      	ands	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_GPIO_Init+0x288>
        {
          tmp |= iocurrent;
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003b10:	4a0a      	ldr	r2, [pc, #40]	@ (8003b3c <HAL_GPIO_Init+0x2b4>)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	fa22 f303 	lsr.w	r3, r2, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	f47f aeb5 	bne.w	8003898 <HAL_GPIO_Init+0x10>
  }
}
 8003b2e:	bf00      	nop
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	44022000 	.word	0x44022000
 8003b40:	002f7f7f 	.word	0x002f7f7f

08003b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	807b      	strh	r3, [r7, #2]
 8003b50:	4613      	mov	r3, r2
 8003b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b54:	787b      	ldrb	r3, [r7, #1]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b60:	e002      	b.n	8003b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b62:	887a      	ldrh	r2, [r7, #2]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d006      	beq.n	8003b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003bbc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003b8c:	88fb      	ldrh	r3, [r7, #6]
 8003b8e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003b90:	88fb      	ldrh	r3, [r7, #6]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f814 	bl	8003bc0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8003b98:	4b08      	ldr	r3, [pc, #32]	@ (8003bbc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	88fb      	ldrh	r3, [r7, #6]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d006      	beq.n	8003bb2 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003ba4:	4a05      	ldr	r2, [pc, #20]	@ (8003bbc <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	4618      	mov	r0, r3
 8003bae:	f000 f812 	bl	8003bd6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	44022000 	.word	0x44022000

08003bc0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	4603      	mov	r3, r0
 8003bde:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b082      	sub	sp, #8
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d101      	bne.n	8003bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e08d      	b.n	8003d1a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7fd fc5c 	bl	80014d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	@ 0x24
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d107      	bne.n	8003c66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	e006      	b.n	8003c74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003c72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d108      	bne.n	8003c8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c8a:	605a      	str	r2, [r3, #4]
 8003c8c:	e007      	b.n	8003c9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	6812      	ldr	r2, [r2, #0]
 8003ca8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cb0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	69d9      	ldr	r1, [r3, #28]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1a      	ldr	r2, [r3, #32]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2220      	movs	r2, #32
 8003d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b088      	sub	sp, #32
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	4608      	mov	r0, r1
 8003d2e:	4611      	mov	r1, r2
 8003d30:	461a      	mov	r2, r3
 8003d32:	4603      	mov	r3, r0
 8003d34:	817b      	strh	r3, [r7, #10]
 8003d36:	460b      	mov	r3, r1
 8003d38:	813b      	strh	r3, [r7, #8]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	f040 80fd 	bne.w	8003f46 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_I2C_Mem_Read+0x34>
 8003d52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d105      	bne.n	8003d64 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d5e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0f1      	b.n	8003f48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_I2C_Mem_Read+0x4e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0ea      	b.n	8003f48 <HAL_I2C_Mem_Read+0x224>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d7a:	f7fe f905 	bl	8001f88 <HAL_GetTick>
 8003d7e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	2319      	movs	r3, #25
 8003d86:	2201      	movs	r2, #1
 8003d88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 f95b 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e0d5      	b.n	8003f48 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2222      	movs	r2, #34	@ 0x22
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2240      	movs	r2, #64	@ 0x40
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a3a      	ldr	r2, [r7, #32]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003dbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003dc4:	88f8      	ldrh	r0, [r7, #6]
 8003dc6:	893a      	ldrh	r2, [r7, #8]
 8003dc8:	8979      	ldrh	r1, [r7, #10]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f000 f8bf 	bl	8003f58 <I2C_RequestMemoryRead>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0ad      	b.n	8003f48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2bff      	cmp	r3, #255	@ 0xff
 8003df4:	d90e      	bls.n	8003e14 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	22ff      	movs	r2, #255	@ 0xff
 8003dfa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	8979      	ldrh	r1, [r7, #10]
 8003e04:	4b52      	ldr	r3, [pc, #328]	@ (8003f50 <HAL_I2C_Mem_Read+0x22c>)
 8003e06:	9300      	str	r3, [sp, #0]
 8003e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 fadf 	bl	80043d0 <I2C_TransferConfig>
 8003e12:	e00f      	b.n	8003e34 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e22:	b2da      	uxtb	r2, r3
 8003e24:	8979      	ldrh	r1, [r7, #10]
 8003e26:	4b4a      	ldr	r3, [pc, #296]	@ (8003f50 <HAL_I2C_Mem_Read+0x22c>)
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 face 	bl	80043d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2104      	movs	r1, #4
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f000 f902 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e07c      	b.n	8003f48 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d034      	beq.n	8003ef4 <HAL_I2C_Mem_Read+0x1d0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d130      	bne.n	8003ef4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	2200      	movs	r2, #0
 8003e9a:	2180      	movs	r1, #128	@ 0x80
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f8d3 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e04d      	b.n	8003f48 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2bff      	cmp	r3, #255	@ 0xff
 8003eb4:	d90e      	bls.n	8003ed4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	22ff      	movs	r2, #255	@ 0xff
 8003eba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	8979      	ldrh	r1, [r7, #10]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fa7f 	bl	80043d0 <I2C_TransferConfig>
 8003ed2:	e00f      	b.n	8003ef4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	8979      	ldrh	r1, [r7, #10]
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 fa6e 	bl	80043d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d19a      	bne.n	8003e34 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 f940 	bl	8004188 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e01a      	b.n	8003f48 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2220      	movs	r2, #32
 8003f18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6859      	ldr	r1, [r3, #4]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	4b0b      	ldr	r3, [pc, #44]	@ (8003f54 <HAL_I2C_Mem_Read+0x230>)
 8003f26:	400b      	ands	r3, r1
 8003f28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	e000      	b.n	8003f48 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
  }
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	80002400 	.word	0x80002400
 8003f54:	fe00e800 	.word	0xfe00e800

08003f58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	4608      	mov	r0, r1
 8003f62:	4611      	mov	r1, r2
 8003f64:	461a      	mov	r2, r3
 8003f66:	4603      	mov	r3, r0
 8003f68:	817b      	strh	r3, [r7, #10]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	813b      	strh	r3, [r7, #8]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f72:	88fb      	ldrh	r3, [r7, #6]
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	8979      	ldrh	r1, [r7, #10]
 8003f78:	4b20      	ldr	r3, [pc, #128]	@ (8003ffc <I2C_RequestMemoryRead+0xa4>)
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fa26 	bl	80043d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	69b9      	ldr	r1, [r7, #24]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f8b6 	bl	80040fa <I2C_WaitOnTXISFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e02c      	b.n	8003ff2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f9e:	893b      	ldrh	r3, [r7, #8]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fa8:	e015      	b.n	8003fd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003faa:	893b      	ldrh	r3, [r7, #8]
 8003fac:	0a1b      	lsrs	r3, r3, #8
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	69b9      	ldr	r1, [r7, #24]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f89c 	bl	80040fa <I2C_WaitOnTXISFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e012      	b.n	8003ff2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2140      	movs	r1, #64	@ 0x40
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f831 	bl	8004048 <I2C_WaitOnFlagUntilTimeout>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e000      	b.n	8003ff2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	80002000 	.word	0x80002000

08004000 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b02      	cmp	r3, #2
 8004014:	d103      	bne.n	800401e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d007      	beq.n	800403c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	699a      	ldr	r2, [r3, #24]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	619a      	str	r2, [r3, #24]
  }
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	4613      	mov	r3, r2
 8004056:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004058:	e03b      	b.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800405a:	69ba      	ldr	r2, [r7, #24]
 800405c:	6839      	ldr	r1, [r7, #0]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 f8d6 	bl	8004210 <I2C_IsErrorOccurred>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e041      	b.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d02d      	beq.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004076:	f7fd ff87 	bl	8001f88 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	429a      	cmp	r2, r3
 8004084:	d302      	bcc.n	800408c <I2C_WaitOnFlagUntilTimeout+0x44>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d122      	bne.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	699a      	ldr	r2, [r3, #24]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	429a      	cmp	r2, r3
 800409a:	bf0c      	ite	eq
 800409c:	2301      	moveq	r3, #1
 800409e:	2300      	movne	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	461a      	mov	r2, r3
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d113      	bne.n	80040d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e00f      	b.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699a      	ldr	r2, [r3, #24]
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	4013      	ands	r3, r2
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	429a      	cmp	r2, r3
 80040e0:	bf0c      	ite	eq
 80040e2:	2301      	moveq	r3, #1
 80040e4:	2300      	movne	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d0b4      	beq.n	800405a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3710      	adds	r7, #16
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004106:	e033      	b.n	8004170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	68b9      	ldr	r1, [r7, #8]
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f87f 	bl	8004210 <I2C_IsErrorOccurred>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d001      	beq.n	800411c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e031      	b.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004122:	d025      	beq.n	8004170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004124:	f7fd ff30 	bl	8001f88 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	429a      	cmp	r2, r3
 8004132:	d302      	bcc.n	800413a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11a      	bne.n	8004170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d013      	beq.n	8004170 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800414c:	f043 0220 	orr.w	r2, r3, #32
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e007      	b.n	8004180 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b02      	cmp	r3, #2
 800417c:	d1c4      	bne.n	8004108 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004194:	e02f      	b.n	80041f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68b9      	ldr	r1, [r7, #8]
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 f838 	bl	8004210 <I2C_IsErrorOccurred>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e02d      	b.n	8004206 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041aa:	f7fd feed 	bl	8001f88 <HAL_GetTick>
 80041ae:	4602      	mov	r2, r0
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d302      	bcc.n	80041c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d11a      	bne.n	80041f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d013      	beq.n	80041f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2220      	movs	r2, #32
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e007      	b.n	8004206 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b20      	cmp	r3, #32
 8004202:	d1c8      	bne.n	8004196 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08a      	sub	sp, #40	@ 0x28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800421c:	2300      	movs	r3, #0
 800421e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	d068      	beq.n	800430e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2210      	movs	r2, #16
 8004242:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004244:	e049      	b.n	80042da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424c:	d045      	beq.n	80042da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800424e:	f7fd fe9b 	bl	8001f88 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	d302      	bcc.n	8004264 <I2C_IsErrorOccurred+0x54>
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d13a      	bne.n	80042da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800426e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004276:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004282:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004286:	d121      	bne.n	80042cc <I2C_IsErrorOccurred+0xbc>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800428e:	d01d      	beq.n	80042cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004290:	7cfb      	ldrb	r3, [r7, #19]
 8004292:	2b20      	cmp	r3, #32
 8004294:	d01a      	beq.n	80042cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042a6:	f7fd fe6f 	bl	8001f88 <HAL_GetTick>
 80042aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042ac:	e00e      	b.n	80042cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042ae:	f7fd fe6b 	bl	8001f88 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b19      	cmp	r3, #25
 80042ba:	d907      	bls.n	80042cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	f043 0320 	orr.w	r3, r3, #32
 80042c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80042ca:	e006      	b.n	80042da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 0320 	and.w	r3, r3, #32
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d1e9      	bne.n	80042ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d003      	beq.n	80042f0 <I2C_IsErrorOccurred+0xe0>
 80042e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0aa      	beq.n	8004246 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80042f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d103      	bne.n	8004300 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2220      	movs	r2, #32
 80042fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	f043 0304 	orr.w	r3, r3, #4
 8004306:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00b      	beq.n	8004338 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004320:	6a3b      	ldr	r3, [r7, #32]
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00b      	beq.n	800435a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004342:	6a3b      	ldr	r3, [r7, #32]
 8004344:	f043 0308 	orr.w	r3, r3, #8
 8004348:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004352:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	f043 0302 	orr.w	r3, r3, #2
 800436a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004374:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800437c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004380:	2b00      	cmp	r3, #0
 8004382:	d01c      	beq.n	80043be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7ff fe3b 	bl	8004000 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6859      	ldr	r1, [r3, #4]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <I2C_IsErrorOccurred+0x1bc>)
 8004396:	400b      	ands	r3, r1
 8004398:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80043be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3728      	adds	r7, #40	@ 0x28
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	fe00e800 	.word	0xfe00e800

080043d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	607b      	str	r3, [r7, #4]
 80043da:	460b      	mov	r3, r1
 80043dc:	817b      	strh	r3, [r7, #10]
 80043de:	4613      	mov	r3, r2
 80043e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043e2:	897b      	ldrh	r3, [r7, #10]
 80043e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043e8:	7a7b      	ldrb	r3, [r7, #9]
 80043ea:	041b      	lsls	r3, r3, #16
 80043ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043f0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043fe:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685a      	ldr	r2, [r3, #4]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	0d5b      	lsrs	r3, r3, #21
 800440a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800440e:	4b08      	ldr	r3, [pc, #32]	@ (8004430 <I2C_TransferConfig+0x60>)
 8004410:	430b      	orrs	r3, r1
 8004412:	43db      	mvns	r3, r3
 8004414:	ea02 0103 	and.w	r1, r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	430a      	orrs	r2, r1
 8004420:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	03ff63ff 	.word	0x03ff63ff

08004434 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b20      	cmp	r3, #32
 8004448:	d138      	bne.n	80044bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004450:	2b01      	cmp	r3, #1
 8004452:	d101      	bne.n	8004458 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004454:	2302      	movs	r3, #2
 8004456:	e032      	b.n	80044be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	@ 0x24
 8004464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004486:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6819      	ldr	r1, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d139      	bne.n	8004554 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e033      	b.n	8004556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2224      	movs	r2, #36	@ 0x24
 80044fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0201 	bic.w	r2, r2, #1
 800450c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800451c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b086      	sub	sp, #24
 8004566:	af02      	add	r7, sp, #8
 8004568:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0f3      	b.n	800475c <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7fd fbe7 	bl	8001d5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2203      	movs	r2, #3
 8004592:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f004 fc23 	bl	8008de6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	7c1a      	ldrb	r2, [r3, #16]
 80045a8:	f88d 2000 	strb.w	r2, [sp]
 80045ac:	3304      	adds	r3, #4
 80045ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045b0:	f004 fbfb 	bl	8008daa <USB_CoreInit>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d005      	beq.n	80045c6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e0ca      	b.n	800475c <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f004 fc1f 	bl	8008e10 <USB_SetCurrentMode>
 80045d2:	4603      	mov	r3, r0
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0bb      	b.n	800475c <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045e4:	2300      	movs	r3, #0
 80045e6:	73fb      	strb	r3, [r7, #15]
 80045e8:	e03f      	b.n	800466a <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80045ea:	7bfa      	ldrb	r2, [r7, #15]
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	4613      	mov	r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	4413      	add	r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	440b      	add	r3, r1
 80045f8:	3315      	adds	r3, #21
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045fe:	7bfa      	ldrb	r2, [r7, #15]
 8004600:	6879      	ldr	r1, [r7, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4413      	add	r3, r2
 8004608:	00db      	lsls	r3, r3, #3
 800460a:	440b      	add	r3, r1
 800460c:	3314      	adds	r3, #20
 800460e:	7bfa      	ldrb	r2, [r7, #15]
 8004610:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004612:	7bfa      	ldrb	r2, [r7, #15]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	440b      	add	r3, r1
 8004620:	3317      	adds	r3, #23
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004626:	7bfa      	ldrb	r2, [r7, #15]
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	00db      	lsls	r3, r3, #3
 8004632:	440b      	add	r3, r1
 8004634:	3324      	adds	r3, #36	@ 0x24
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800463a:	7bfa      	ldrb	r2, [r7, #15]
 800463c:	6879      	ldr	r1, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	440b      	add	r3, r1
 8004648:	3328      	adds	r3, #40	@ 0x28
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	4613      	mov	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4413      	add	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	440b      	add	r3, r1
 800465e:	3304      	adds	r3, #4
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	3301      	adds	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	791b      	ldrb	r3, [r3, #4]
 800466e:	7bfa      	ldrb	r2, [r7, #15]
 8004670:	429a      	cmp	r2, r3
 8004672:	d3ba      	bcc.n	80045ea <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004674:	2300      	movs	r3, #0
 8004676:	73fb      	strb	r3, [r7, #15]
 8004678:	e044      	b.n	8004704 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800467a:	7bfa      	ldrb	r2, [r7, #15]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	440b      	add	r3, r1
 8004688:	f203 1355 	addw	r3, r3, #341	@ 0x155
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	440b      	add	r3, r1
 800469e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046a6:	7bfa      	ldrb	r2, [r7, #15]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4413      	add	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	440b      	add	r3, r1
 80046b4:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80046b8:	2200      	movs	r2, #0
 80046ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046bc:	7bfa      	ldrb	r2, [r7, #15]
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	4613      	mov	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	440b      	add	r3, r1
 80046ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80046d2:	7bfa      	ldrb	r2, [r7, #15]
 80046d4:	6879      	ldr	r1, [r7, #4]
 80046d6:	4613      	mov	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	4413      	add	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	440b      	add	r3, r1
 80046e0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046e8:	7bfa      	ldrb	r2, [r7, #15]
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	00db      	lsls	r3, r3, #3
 80046f4:	440b      	add	r3, r1
 80046f6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
 8004700:	3301      	adds	r3, #1
 8004702:	73fb      	strb	r3, [r7, #15]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	791b      	ldrb	r3, [r3, #4]
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	429a      	cmp	r2, r3
 800470c:	d3b5      	bcc.n	800467a <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6818      	ldr	r0, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	7c1a      	ldrb	r2, [r3, #16]
 8004716:	f88d 2000 	strb.w	r2, [sp]
 800471a:	3304      	adds	r3, #4
 800471c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800471e:	f004 fb9a 	bl	8008e56 <USB_DevInit>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e013      	b.n	800475c <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	7b1b      	ldrb	r3, [r3, #12]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d102      	bne.n	8004750 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f80a 	bl	8004764 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4618      	mov	r0, r3
 8004756:	f004 fba1 	bl	8008e9c <USB_DevDisconnect>

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004786:	f043 0201 	orr.w	r2, r3, #1
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004792:	f043 0202 	orr.w	r2, r3, #2
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80047ac:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	4a04      	ldr	r2, [pc, #16]	@ (80047c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80047b8:	bf00      	nop
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	44020800 	.word	0x44020800

080047c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f000 bc28 	b.w	800502c <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047dc:	4b94      	ldr	r3, [pc, #592]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 80047de:	69db      	ldr	r3, [r3, #28]
 80047e0:	f003 0318 	and.w	r3, r3, #24
 80047e4:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80047e6:	4b92      	ldr	r3, [pc, #584]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 80047e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d05b      	beq.n	80048b4 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d005      	beq.n	800480e <HAL_RCC_OscConfig+0x46>
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	2b18      	cmp	r3, #24
 8004806:	d114      	bne.n	8004832 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d111      	bne.n	8004832 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69db      	ldr	r3, [r3, #28]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d102      	bne.n	800481c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f000 bc08 	b.w	800502c <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800481c:	4b84      	ldr	r3, [pc, #528]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800481e:	699b      	ldr	r3, [r3, #24]
 8004820:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	041b      	lsls	r3, r3, #16
 800482a:	4981      	ldr	r1, [pc, #516]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800482c:	4313      	orrs	r3, r2
 800482e:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004830:	e040      	b.n	80048b4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d023      	beq.n	8004882 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800483a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004846:	f7fd fb9f 	bl	8001f88 <HAL_GetTick>
 800484a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800484e:	f7fd fb9b 	bl	8001f88 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e3e5      	b.n	800502c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004860:	4b73      	ldr	r3, [pc, #460]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800486c:	4b70      	ldr	r3, [pc, #448]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	041b      	lsls	r3, r3, #16
 800487a:	496d      	ldr	r1, [pc, #436]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800487c:	4313      	orrs	r3, r2
 800487e:	618b      	str	r3, [r1, #24]
 8004880:	e018      	b.n	80048b4 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004882:	4b6b      	ldr	r3, [pc, #428]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a6a      	ldr	r2, [pc, #424]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800488c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488e:	f7fd fb7b 	bl	8001f88 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004894:	e008      	b.n	80048a8 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004896:	f7fd fb77 	bl	8001f88 <HAL_GetTick>
 800489a:	4602      	mov	r2, r0
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	2b02      	cmp	r3, #2
 80048a2:	d901      	bls.n	80048a8 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e3c1      	b.n	800502c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80048a8:	4b61      	ldr	r3, [pc, #388]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1f0      	bne.n	8004896 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80a0 	beq.w	8004a02 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_OscConfig+0x10c>
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	2b18      	cmp	r3, #24
 80048cc:	d109      	bne.n	80048e2 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d106      	bne.n	80048e2 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f040 8092 	bne.w	8004a02 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e3a4      	b.n	800502c <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ea:	d106      	bne.n	80048fa <HAL_RCC_OscConfig+0x132>
 80048ec:	4b50      	ldr	r3, [pc, #320]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a4f      	ldr	r2, [pc, #316]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 80048f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	e058      	b.n	80049ac <HAL_RCC_OscConfig+0x1e4>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d112      	bne.n	8004928 <HAL_RCC_OscConfig+0x160>
 8004902:	4b4b      	ldr	r3, [pc, #300]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a4a      	ldr	r2, [pc, #296]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004908:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	4b48      	ldr	r3, [pc, #288]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a47      	ldr	r2, [pc, #284]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004914:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b45      	ldr	r3, [pc, #276]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a44      	ldr	r2, [pc, #272]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004920:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e041      	b.n	80049ac <HAL_RCC_OscConfig+0x1e4>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004930:	d112      	bne.n	8004958 <HAL_RCC_OscConfig+0x190>
 8004932:	4b3f      	ldr	r3, [pc, #252]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a3e      	ldr	r2, [pc, #248]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800493c:	6013      	str	r3, [r2, #0]
 800493e:	4b3c      	ldr	r3, [pc, #240]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a3b      	ldr	r2, [pc, #236]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004944:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b39      	ldr	r3, [pc, #228]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a38      	ldr	r2, [pc, #224]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e029      	b.n	80049ac <HAL_RCC_OscConfig+0x1e4>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004960:	d112      	bne.n	8004988 <HAL_RCC_OscConfig+0x1c0>
 8004962:	4b33      	ldr	r3, [pc, #204]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a32      	ldr	r2, [pc, #200]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	4b30      	ldr	r3, [pc, #192]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2f      	ldr	r2, [pc, #188]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004974:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4b2d      	ldr	r3, [pc, #180]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	e011      	b.n	80049ac <HAL_RCC_OscConfig+0x1e4>
 8004988:	4b29      	ldr	r3, [pc, #164]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a28      	ldr	r2, [pc, #160]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800498e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4b26      	ldr	r3, [pc, #152]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a25      	ldr	r2, [pc, #148]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 800499a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b23      	ldr	r3, [pc, #140]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a22      	ldr	r2, [pc, #136]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 80049a6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b4:	f7fd fae8 	bl	8001f88 <HAL_GetTick>
 80049b8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80049bc:	f7fd fae4 	bl	8001f88 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	@ 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e32e      	b.n	800502c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049ce:	4b18      	ldr	r3, [pc, #96]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x1f4>
 80049da:	e012      	b.n	8004a02 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049dc:	f7fd fad4 	bl	8001f88 <HAL_GetTick>
 80049e0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80049e4:	f7fd fad0 	bl	8001f88 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	@ 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e31a      	b.n	800502c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049f6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a30 <HAL_RCC_OscConfig+0x268>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 809a 	beq.w	8004b44 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_RCC_OscConfig+0x25a>
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	2b18      	cmp	r3, #24
 8004a1a:	d149      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d146      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e2fe      	b.n	800502c <HAL_RCC_OscConfig+0x864>
 8004a2e:	bf00      	nop
 8004a30:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d11c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004a3a:	4b9a      	ldr	r3, [pc, #616]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0218 	and.w	r2, r3, #24
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d014      	beq.n	8004a74 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004a4a:	4b96      	ldr	r3, [pc, #600]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 0218 	bic.w	r2, r3, #24
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	4993      	ldr	r1, [pc, #588]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004a5c:	f000 fdd0 	bl	8005600 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a60:	4b91      	ldr	r3, [pc, #580]	@ (8004ca8 <HAL_RCC_OscConfig+0x4e0>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7fd fa05 	bl	8001e74 <HAL_InitTick>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d001      	beq.n	8004a74 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e2db      	b.n	800502c <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd fa88 	bl	8001f88 <HAL_GetTick>
 8004a78:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004a7c:	f7fd fa84 	bl	8001f88 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e2ce      	b.n	800502c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a8e:	4b85      	ldr	r3, [pc, #532]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004a9a:	4b82      	ldr	r3, [pc, #520]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	041b      	lsls	r3, r3, #16
 8004aa8:	497e      	ldr	r1, [pc, #504]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004aae:	e049      	b.n	8004b44 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d02c      	beq.n	8004b12 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004ab8:	4b7a      	ldr	r3, [pc, #488]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f023 0218 	bic.w	r2, r3, #24
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	4977      	ldr	r1, [pc, #476]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004aca:	4b76      	ldr	r3, [pc, #472]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a75      	ldr	r2, [pc, #468]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad6:	f7fd fa57 	bl	8001f88 <HAL_GetTick>
 8004ada:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004ade:	f7fd fa53 	bl	8001f88 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e29d      	b.n	800502c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004af0:	4b6c      	ldr	r3, [pc, #432]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0f0      	beq.n	8004ade <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004afc:	4b69      	ldr	r3, [pc, #420]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	041b      	lsls	r3, r3, #16
 8004b0a:	4966      	ldr	r1, [pc, #408]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	610b      	str	r3, [r1, #16]
 8004b10:	e018      	b.n	8004b44 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b12:	4b64      	ldr	r3, [pc, #400]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a63      	ldr	r2, [pc, #396]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1e:	f7fd fa33 	bl	8001f88 <HAL_GetTick>
 8004b22:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b24:	e008      	b.n	8004b38 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004b26:	f7fd fa2f 	bl	8001f88 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d901      	bls.n	8004b38 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e279      	b.n	800502c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b38:	4b5a      	ldr	r3, [pc, #360]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1f0      	bne.n	8004b26 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d03c      	beq.n	8004bca <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01c      	beq.n	8004b92 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b58:	4b52      	ldr	r3, [pc, #328]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004b5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b5e:	4a51      	ldr	r2, [pc, #324]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004b60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fd fa0e 	bl	8001f88 <HAL_GetTick>
 8004b6c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004b70:	f7fd fa0a 	bl	8001f88 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e254      	b.n	800502c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004b82:	4b48      	ldr	r3, [pc, #288]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ef      	beq.n	8004b70 <HAL_RCC_OscConfig+0x3a8>
 8004b90:	e01b      	b.n	8004bca <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b92:	4b44      	ldr	r3, [pc, #272]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b98:	4a42      	ldr	r2, [pc, #264]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004b9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba2:	f7fd f9f1 	bl	8001f88 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ba8:	e008      	b.n	8004bbc <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004baa:	f7fd f9ed 	bl	8001f88 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e237      	b.n	800502c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004bbc:	4b39      	ldr	r3, [pc, #228]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1ef      	bne.n	8004baa <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80d2 	beq.w	8004d7c <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004bd8:	4b34      	ldr	r3, [pc, #208]	@ (8004cac <HAL_RCC_OscConfig+0x4e4>)
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bdc:	f003 0301 	and.w	r3, r3, #1
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d118      	bne.n	8004c16 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004be4:	4b31      	ldr	r3, [pc, #196]	@ (8004cac <HAL_RCC_OscConfig+0x4e4>)
 8004be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be8:	4a30      	ldr	r2, [pc, #192]	@ (8004cac <HAL_RCC_OscConfig+0x4e4>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bf0:	f7fd f9ca 	bl	8001f88 <HAL_GetTick>
 8004bf4:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf8:	f7fd f9c6 	bl	8001f88 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e210      	b.n	800502c <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004c0a:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <HAL_RCC_OscConfig+0x4e4>)
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d108      	bne.n	8004c30 <HAL_RCC_OscConfig+0x468>
 8004c1e:	4b21      	ldr	r3, [pc, #132]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c24:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c2e:	e074      	b.n	8004d1a <HAL_RCC_OscConfig+0x552>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d118      	bne.n	8004c6a <HAL_RCC_OscConfig+0x4a2>
 8004c38:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c3e:	4a19      	ldr	r2, [pc, #100]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c48:	4b16      	ldr	r3, [pc, #88]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c54:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c58:	4b12      	ldr	r3, [pc, #72]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c5e:	4a11      	ldr	r2, [pc, #68]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c60:	f023 0304 	bic.w	r3, r3, #4
 8004c64:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c68:	e057      	b.n	8004d1a <HAL_RCC_OscConfig+0x552>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d11e      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4e8>
 8004c72:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c78:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c7a:	f043 0304 	orr.w	r3, r3, #4
 8004c7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c82:	4b08      	ldr	r3, [pc, #32]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c88:	4a06      	ldr	r2, [pc, #24]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004c92:	4b04      	ldr	r3, [pc, #16]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c98:	4a02      	ldr	r2, [pc, #8]	@ (8004ca4 <HAL_RCC_OscConfig+0x4dc>)
 8004c9a:	f043 0301 	orr.w	r3, r3, #1
 8004c9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ca2:	e03a      	b.n	8004d1a <HAL_RCC_OscConfig+0x552>
 8004ca4:	44020c00 	.word	0x44020c00
 8004ca8:	20000004 	.word	0x20000004
 8004cac:	44020800 	.word	0x44020800
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b85      	cmp	r3, #133	@ 0x85
 8004cb6:	d118      	bne.n	8004cea <HAL_RCC_OscConfig+0x522>
 8004cb8:	4ba2      	ldr	r3, [pc, #648]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004cba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cbe:	4aa1      	ldr	r2, [pc, #644]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004cc0:	f043 0304 	orr.w	r3, r3, #4
 8004cc4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004cc8:	4b9e      	ldr	r3, [pc, #632]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004cca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cce:	4a9d      	ldr	r2, [pc, #628]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004cd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cd4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004cd8:	4b9a      	ldr	r3, [pc, #616]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cde:	4a99      	ldr	r2, [pc, #612]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ce8:	e017      	b.n	8004d1a <HAL_RCC_OscConfig+0x552>
 8004cea:	4b96      	ldr	r3, [pc, #600]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cf0:	4a94      	ldr	r2, [pc, #592]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004cfa:	4b92      	ldr	r3, [pc, #584]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d00:	4a90      	ldr	r2, [pc, #576]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004d02:	f023 0304 	bic.w	r3, r3, #4
 8004d06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004d0a:	4b8e      	ldr	r3, [pc, #568]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d10:	4a8c      	ldr	r2, [pc, #560]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d016      	beq.n	8004d50 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fd f931 	bl	8001f88 <HAL_GetTick>
 8004d26:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2a:	f7fd f92d 	bl	8001f88 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e175      	b.n	800502c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d40:	4b80      	ldr	r3, [pc, #512]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d0ed      	beq.n	8004d2a <HAL_RCC_OscConfig+0x562>
 8004d4e:	e015      	b.n	8004d7c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fd f91a 	bl	8001f88 <HAL_GetTick>
 8004d54:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d58:	f7fd f916 	bl	8001f88 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e15e      	b.n	800502c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d6e:	4b75      	ldr	r3, [pc, #468]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1ed      	bne.n	8004d58 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d036      	beq.n	8004df6 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d019      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d90:	4b6c      	ldr	r3, [pc, #432]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a6b      	ldr	r2, [pc, #428]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004d96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fd f8f4 	bl	8001f88 <HAL_GetTick>
 8004da0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004da4:	f7fd f8f0 	bl	8001f88 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e13a      	b.n	800502c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004db6:	4b63      	ldr	r3, [pc, #396]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x5dc>
 8004dc2:	e018      	b.n	8004df6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dc4:	4b5f      	ldr	r3, [pc, #380]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a5e      	ldr	r2, [pc, #376]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004dca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd0:	f7fd f8da 	bl	8001f88 <HAL_GetTick>
 8004dd4:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004dd8:	f7fd f8d6 	bl	8001f88 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e120      	b.n	800502c <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004dea:	4b56      	ldr	r3, [pc, #344]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8115 	beq.w	800502a <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b18      	cmp	r3, #24
 8004e04:	f000 80af 	beq.w	8004f66 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	f040 8086 	bne.w	8004f1e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004e12:	4b4c      	ldr	r3, [pc, #304]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a4b      	ldr	r2, [pc, #300]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004e18:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1e:	f7fd f8b3 	bl	8001f88 <HAL_GetTick>
 8004e22:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004e26:	f7fd f8af 	bl	8001f88 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0f9      	b.n	800502c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004e38:	4b42      	ldr	r3, [pc, #264]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f0      	bne.n	8004e26 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004e44:	4b3f      	ldr	r3, [pc, #252]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004e4c:	f023 0303 	bic.w	r3, r3, #3
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004e58:	0212      	lsls	r2, r2, #8
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	4939      	ldr	r1, [pc, #228]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e66:	3b01      	subs	r3, #1
 8004e68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	3b01      	subs	r3, #1
 8004e72:	025b      	lsls	r3, r3, #9
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	041b      	lsls	r3, r3, #16
 8004e80:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	061b      	lsls	r3, r3, #24
 8004e8e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e92:	492c      	ldr	r1, [pc, #176]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004e98:	4b2a      	ldr	r3, [pc, #168]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9c:	4a29      	ldr	r2, [pc, #164]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004e9e:	f023 0310 	bic.w	r3, r3, #16
 8004ea2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea8:	4a26      	ldr	r2, [pc, #152]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004eae:	4b25      	ldr	r3, [pc, #148]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	4a24      	ldr	r2, [pc, #144]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004eb4:	f043 0310 	orr.w	r3, r3, #16
 8004eb8:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004eba:	4b22      	ldr	r3, [pc, #136]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebe:	f023 020c 	bic.w	r2, r3, #12
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec6:	491f      	ldr	r1, [pc, #124]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed0:	f023 0220 	bic.w	r2, r3, #32
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed8:	491a      	ldr	r1, [pc, #104]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ede:	4b19      	ldr	r3, [pc, #100]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee2:	4a18      	ldr	r2, [pc, #96]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004eea:	4b16      	ldr	r3, [pc, #88]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a15      	ldr	r2, [pc, #84]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004ef0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ef4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef6:	f7fd f847 	bl	8001f88 <HAL_GetTick>
 8004efa:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004efc:	e008      	b.n	8004f10 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004efe:	f7fd f843 	bl	8001f88 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d901      	bls.n	8004f10 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	e08d      	b.n	800502c <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004f10:	4b0c      	ldr	r3, [pc, #48]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d0f0      	beq.n	8004efe <HAL_RCC_OscConfig+0x736>
 8004f1c:	e085      	b.n	800502a <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004f1e:	4b09      	ldr	r3, [pc, #36]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a08      	ldr	r2, [pc, #32]	@ (8004f44 <HAL_RCC_OscConfig+0x77c>)
 8004f24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f2a:	f7fd f82d 	bl	8001f88 <HAL_GetTick>
 8004f2e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004f32:	f7fd f829 	bl	8001f88 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d903      	bls.n	8004f48 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e073      	b.n	800502c <HAL_RCC_OscConfig+0x864>
 8004f44:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f48:	4b3a      	ldr	r3, [pc, #232]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1ee      	bne.n	8004f32 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004f54:	4b37      	ldr	r3, [pc, #220]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8004f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f58:	4a36      	ldr	r2, [pc, #216]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8004f5a:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	6293      	str	r3, [r2, #40]	@ 0x28
 8004f64:	e061      	b.n	800502a <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004f66:	4b33      	ldr	r3, [pc, #204]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8004f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f6c:	4b31      	ldr	r3, [pc, #196]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f70:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d031      	beq.n	8004fde <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f003 0203 	and.w	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d12a      	bne.n	8004fde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	0a1b      	lsrs	r3, r3, #8
 8004f8c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d122      	bne.n	8004fde <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa2:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d11a      	bne.n	8004fde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	0a5b      	lsrs	r3, r3, #9
 8004fac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fb4:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d111      	bne.n	8004fde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	0c1b      	lsrs	r3, r3, #16
 8004fbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d108      	bne.n	8004fde <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	0e1b      	lsrs	r3, r3, #24
 8004fd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fd8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e024      	b.n	800502c <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004fe2:	4b14      	ldr	r3, [pc, #80]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe6:	08db      	lsrs	r3, r3, #3
 8004fe8:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d01a      	beq.n	800502a <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8004ffa:	f023 0310 	bic.w	r3, r3, #16
 8004ffe:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fc ffc2 	bl	8001f88 <HAL_GetTick>
 8005004:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005006:	bf00      	nop
 8005008:	f7fc ffbe 	bl	8001f88 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	4293      	cmp	r3, r2
 8005012:	d0f9      	beq.n	8005008 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005018:	4a06      	ldr	r2, [pc, #24]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800501e:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	4a04      	ldr	r2, [pc, #16]	@ (8005034 <HAL_RCC_OscConfig+0x86c>)
 8005024:	f043 0310 	orr.w	r3, r3, #16
 8005028:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	4618      	mov	r0, r3
 800502e:	3720      	adds	r7, #32
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	44020c00 	.word	0x44020c00

08005038 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e19e      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800504c:	4b83      	ldr	r3, [pc, #524]	@ (800525c <HAL_RCC_ClockConfig+0x224>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 030f 	and.w	r3, r3, #15
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	429a      	cmp	r2, r3
 8005058:	d910      	bls.n	800507c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505a:	4b80      	ldr	r3, [pc, #512]	@ (800525c <HAL_RCC_ClockConfig+0x224>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 020f 	bic.w	r2, r3, #15
 8005062:	497e      	ldr	r1, [pc, #504]	@ (800525c <HAL_RCC_ClockConfig+0x224>)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	4313      	orrs	r3, r2
 8005068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b7c      	ldr	r3, [pc, #496]	@ (800525c <HAL_RCC_ClockConfig+0x224>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e186      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b00      	cmp	r3, #0
 8005086:	d012      	beq.n	80050ae <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	4b74      	ldr	r3, [pc, #464]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	0a1b      	lsrs	r3, r3, #8
 8005092:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005096:	429a      	cmp	r2, r3
 8005098:	d909      	bls.n	80050ae <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800509a:	4b71      	ldr	r3, [pc, #452]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	021b      	lsls	r3, r3, #8
 80050a8:	496d      	ldr	r1, [pc, #436]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d012      	beq.n	80050e0 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	4b68      	ldr	r3, [pc, #416]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	091b      	lsrs	r3, r3, #4
 80050c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d909      	bls.n	80050e0 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80050cc:	4b64      	ldr	r3, [pc, #400]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	011b      	lsls	r3, r3, #4
 80050da:	4961      	ldr	r1, [pc, #388]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0304 	and.w	r3, r3, #4
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68da      	ldr	r2, [r3, #12]
 80050f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d908      	bls.n	800510e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80050fc:	4b58      	ldr	r3, [pc, #352]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4955      	ldr	r1, [pc, #340]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 800510a:	4313      	orrs	r3, r2
 800510c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d010      	beq.n	800513c <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	4b50      	ldr	r3, [pc, #320]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	429a      	cmp	r2, r3
 8005128:	d908      	bls.n	800513c <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800512a:	4b4d      	ldr	r3, [pc, #308]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 020f 	bic.w	r2, r3, #15
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	494a      	ldr	r1, [pc, #296]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 8005138:	4313      	orrs	r3, r2
 800513a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 8093 	beq.w	8005270 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d107      	bne.n	8005162 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005152:	4b43      	ldr	r3, [pc, #268]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d121      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e113      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	2b02      	cmp	r3, #2
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800516a:	4b3d      	ldr	r3, [pc, #244]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d115      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e107      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d107      	bne.n	8005192 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005182:	4b37      	ldr	r3, [pc, #220]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e0fb      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005192:	4b33      	ldr	r3, [pc, #204]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0f3      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80051a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	f023 0203 	bic.w	r2, r3, #3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	492c      	ldr	r1, [pc, #176]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b4:	f7fc fee8 	bl	8001f88 <HAL_GetTick>
 80051b8:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d112      	bne.n	80051e8 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80051c4:	f7fc fee0 	bl	8001f88 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e0d7      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051da:	4b21      	ldr	r3, [pc, #132]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0318 	and.w	r3, r3, #24
 80051e2:	2b18      	cmp	r3, #24
 80051e4:	d1ee      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x18c>
 80051e6:	e043      	b.n	8005270 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d112      	bne.n	8005216 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80051f0:	e00a      	b.n	8005208 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80051f2:	f7fc fec9 	bl	8001f88 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e0c0      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005208:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f003 0318 	and.w	r3, r3, #24
 8005210:	2b10      	cmp	r3, #16
 8005212:	d1ee      	bne.n	80051f2 <HAL_RCC_ClockConfig+0x1ba>
 8005214:	e02c      	b.n	8005270 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d122      	bne.n	8005264 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800521e:	e00a      	b.n	8005236 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005220:	f7fc feb2 	bl	8001f88 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e0a9      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <HAL_RCC_ClockConfig+0x228>)
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f003 0318 	and.w	r3, r3, #24
 800523e:	2b08      	cmp	r3, #8
 8005240:	d1ee      	bne.n	8005220 <HAL_RCC_ClockConfig+0x1e8>
 8005242:	e015      	b.n	8005270 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005244:	f7fc fea0 	bl	8001f88 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005252:	4293      	cmp	r3, r2
 8005254:	d906      	bls.n	8005264 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e097      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
 800525a:	bf00      	nop
 800525c:	40022000 	.word	0x40022000
 8005260:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005264:	4b4b      	ldr	r3, [pc, #300]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f003 0318 	and.w	r3, r3, #24
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e9      	bne.n	8005244 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 0302 	and.w	r3, r3, #2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d010      	beq.n	800529e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	4b44      	ldr	r3, [pc, #272]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f003 030f 	and.w	r3, r3, #15
 8005288:	429a      	cmp	r2, r3
 800528a:	d208      	bcs.n	800529e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800528c:	4b41      	ldr	r3, [pc, #260]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f023 020f 	bic.w	r2, r3, #15
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	493e      	ldr	r1, [pc, #248]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 800529a:	4313      	orrs	r3, r2
 800529c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800529e:	4b3e      	ldr	r3, [pc, #248]	@ (8005398 <HAL_RCC_ClockConfig+0x360>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 030f 	and.w	r3, r3, #15
 80052a6:	683a      	ldr	r2, [r7, #0]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d210      	bcs.n	80052ce <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ac:	4b3a      	ldr	r3, [pc, #232]	@ (8005398 <HAL_RCC_ClockConfig+0x360>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f023 020f 	bic.w	r2, r3, #15
 80052b4:	4938      	ldr	r1, [pc, #224]	@ (8005398 <HAL_RCC_ClockConfig+0x360>)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052bc:	4b36      	ldr	r3, [pc, #216]	@ (8005398 <HAL_RCC_ClockConfig+0x360>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d001      	beq.n	80052ce <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e05d      	b.n	800538a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d010      	beq.n	80052fc <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	4b2d      	ldr	r3, [pc, #180]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d208      	bcs.n	80052fc <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80052ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	4927      	ldr	r1, [pc, #156]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d012      	beq.n	800532e <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	4b21      	ldr	r3, [pc, #132]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	091b      	lsrs	r3, r3, #4
 8005312:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005316:	429a      	cmp	r2, r3
 8005318:	d209      	bcs.n	800532e <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800531a:	4b1e      	ldr	r3, [pc, #120]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	491a      	ldr	r1, [pc, #104]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 800532a:	4313      	orrs	r3, r2
 800532c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b00      	cmp	r3, #0
 8005338:	d012      	beq.n	8005360 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	695a      	ldr	r2, [r3, #20]
 800533e:	4b15      	ldr	r3, [pc, #84]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 8005340:	6a1b      	ldr	r3, [r3, #32]
 8005342:	0a1b      	lsrs	r3, r3, #8
 8005344:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005348:	429a      	cmp	r2, r3
 800534a:	d209      	bcs.n	8005360 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800534c:	4b11      	ldr	r3, [pc, #68]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 800534e:	6a1b      	ldr	r3, [r3, #32]
 8005350:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	021b      	lsls	r3, r3, #8
 800535a:	490e      	ldr	r1, [pc, #56]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 800535c:	4313      	orrs	r3, r2
 800535e:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005360:	f000 f822 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8005364:	4602      	mov	r2, r0
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <HAL_RCC_ClockConfig+0x35c>)
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	f003 030f 	and.w	r3, r3, #15
 800536e:	490b      	ldr	r1, [pc, #44]	@ (800539c <HAL_RCC_ClockConfig+0x364>)
 8005370:	5ccb      	ldrb	r3, [r1, r3]
 8005372:	fa22 f303 	lsr.w	r3, r2, r3
 8005376:	4a0a      	ldr	r2, [pc, #40]	@ (80053a0 <HAL_RCC_ClockConfig+0x368>)
 8005378:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800537a:	4b0a      	ldr	r3, [pc, #40]	@ (80053a4 <HAL_RCC_ClockConfig+0x36c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f7fc fd78 	bl	8001e74 <HAL_InitTick>
 8005384:	4603      	mov	r3, r0
 8005386:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005388:	7afb      	ldrb	r3, [r7, #11]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	44020c00 	.word	0x44020c00
 8005398:	40022000 	.word	0x40022000
 800539c:	08008f30 	.word	0x08008f30
 80053a0:	20000000 	.word	0x20000000
 80053a4:	20000004 	.word	0x20000004

080053a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b089      	sub	sp, #36	@ 0x24
 80053ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80053ae:	4b8c      	ldr	r3, [pc, #560]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0318 	and.w	r3, r3, #24
 80053b6:	2b08      	cmp	r3, #8
 80053b8:	d102      	bne.n	80053c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80053ba:	4b8a      	ldr	r3, [pc, #552]	@ (80055e4 <HAL_RCC_GetSysClockFreq+0x23c>)
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e107      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053c0:	4b87      	ldr	r3, [pc, #540]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	f003 0318 	and.w	r3, r3, #24
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d112      	bne.n	80053f2 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80053cc:	4b84      	ldr	r3, [pc, #528]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d009      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80053d8:	4b81      	ldr	r3, [pc, #516]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	08db      	lsrs	r3, r3, #3
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	4a81      	ldr	r2, [pc, #516]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
 80053e8:	61fb      	str	r3, [r7, #28]
 80053ea:	e0f1      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80053ec:	4b7e      	ldr	r3, [pc, #504]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80053ee:	61fb      	str	r3, [r7, #28]
 80053f0:	e0ee      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053f2:	4b7b      	ldr	r3, [pc, #492]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80053f4:	69db      	ldr	r3, [r3, #28]
 80053f6:	f003 0318 	and.w	r3, r3, #24
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d102      	bne.n	8005404 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053fe:	4b7b      	ldr	r3, [pc, #492]	@ (80055ec <HAL_RCC_GetSysClockFreq+0x244>)
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	e0e5      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005404:	4b76      	ldr	r3, [pc, #472]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005406:	69db      	ldr	r3, [r3, #28]
 8005408:	f003 0318 	and.w	r3, r3, #24
 800540c:	2b18      	cmp	r3, #24
 800540e:	f040 80dd 	bne.w	80055cc <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005412:	4b73      	ldr	r3, [pc, #460]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005416:	f003 0303 	and.w	r3, r3, #3
 800541a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800541c:	4b70      	ldr	r3, [pc, #448]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800541e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005420:	0a1b      	lsrs	r3, r3, #8
 8005422:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005426:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005428:	4b6d      	ldr	r3, [pc, #436]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800542a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005434:	4b6a      	ldr	r3, [pc, #424]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005438:	08db      	lsrs	r3, r3, #3
 800543a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	ee07 3a90 	vmov	s15, r3
 8005448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544c:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80b7 	beq.w	80055c6 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d003      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0xbe>
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2b03      	cmp	r3, #3
 8005462:	d056      	beq.n	8005512 <HAL_RCC_GetSysClockFreq+0x16a>
 8005464:	e077      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005466:	4b5e      	ldr	r3, [pc, #376]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b00      	cmp	r3, #0
 8005470:	d02d      	beq.n	80054ce <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005472:	4b5b      	ldr	r3, [pc, #364]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	08db      	lsrs	r3, r3, #3
 8005478:	f003 0303 	and.w	r3, r3, #3
 800547c:	4a5a      	ldr	r2, [pc, #360]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x240>)
 800547e:	fa22 f303 	lsr.w	r3, r2, r3
 8005482:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549c:	4b50      	ldr	r3, [pc, #320]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800549e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a4:	ee07 3a90 	vmov	s15, r3
 80054a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80054ac:	ed97 6a02 	vldr	s12, [r7, #8]
 80054b0:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80055f0 <HAL_RCC_GetSysClockFreq+0x248>
 80054b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80054bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c8:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80054cc:	e065      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	ee07 3a90 	vmov	s15, r3
 80054d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d8:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80055f4 <HAL_RCC_GetSysClockFreq+0x24c>
 80054dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e0:	4b3f      	ldr	r3, [pc, #252]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 80054e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e8:	ee07 3a90 	vmov	s15, r3
 80054ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80054f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80054f4:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80055f0 <HAL_RCC_GetSysClockFreq+0x248>
 80054f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80054fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005500:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005504:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005510:	e043      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	ee07 3a90 	vmov	s15, r3
 8005518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80055f8 <HAL_RCC_GetSysClockFreq+0x250>
 8005520:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005524:	4b2e      	ldr	r3, [pc, #184]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 8005526:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005534:	ed97 6a02 	vldr	s12, [r7, #8]
 8005538:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80055f0 <HAL_RCC_GetSysClockFreq+0x248>
 800553c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005540:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005548:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800554c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005550:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005554:	e021      	b.n	800559a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	ee07 3a90 	vmov	s15, r3
 800555c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005560:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80055fc <HAL_RCC_GetSysClockFreq+0x254>
 8005564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005568:	4b1d      	ldr	r3, [pc, #116]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800556a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005570:	ee07 3a90 	vmov	s15, r3
 8005574:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005578:	ed97 6a02 	vldr	s12, [r7, #8]
 800557c:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80055f0 <HAL_RCC_GetSysClockFreq+0x248>
 8005580:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005584:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005594:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005598:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800559a:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <HAL_RCC_GetSysClockFreq+0x238>)
 800559c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559e:	0a5b      	lsrs	r3, r3, #9
 80055a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055a4:	3301      	adds	r3, #1
 80055a6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	ee07 3a90 	vmov	s15, r3
 80055ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055b2:	edd7 6a06 	vldr	s13, [r7, #24]
 80055b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055be:	ee17 3a90 	vmov	r3, s15
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	e004      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	e001      	b.n	80055d0 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80055cc:	4b06      	ldr	r3, [pc, #24]	@ (80055e8 <HAL_RCC_GetSysClockFreq+0x240>)
 80055ce:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80055d0:	69fb      	ldr	r3, [r7, #28]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3724      	adds	r7, #36	@ 0x24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	44020c00 	.word	0x44020c00
 80055e4:	003d0900 	.word	0x003d0900
 80055e8:	03d09000 	.word	0x03d09000
 80055ec:	007a1200 	.word	0x007a1200
 80055f0:	46000000 	.word	0x46000000
 80055f4:	4c742400 	.word	0x4c742400
 80055f8:	4af42400 	.word	0x4af42400
 80055fc:	4a742400 	.word	0x4a742400

08005600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005604:	f7ff fed0 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8005608:	4602      	mov	r2, r0
 800560a:	4b08      	ldr	r3, [pc, #32]	@ (800562c <HAL_RCC_GetHCLKFreq+0x2c>)
 800560c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800560e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005612:	4907      	ldr	r1, [pc, #28]	@ (8005630 <HAL_RCC_GetHCLKFreq+0x30>)
 8005614:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005616:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800561a:	fa22 f303 	lsr.w	r3, r2, r3
 800561e:	4a05      	ldr	r2, [pc, #20]	@ (8005634 <HAL_RCC_GetHCLKFreq+0x34>)
 8005620:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005622:	4b04      	ldr	r3, [pc, #16]	@ (8005634 <HAL_RCC_GetHCLKFreq+0x34>)
 8005624:	681b      	ldr	r3, [r3, #0]
}
 8005626:	4618      	mov	r0, r3
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	44020c00 	.word	0x44020c00
 8005630:	08008f30 	.word	0x08008f30
 8005634:	20000000 	.word	0x20000000

08005638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800563c:	f7ff ffe0 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 8005640:	4602      	mov	r2, r0
 8005642:	4b06      	ldr	r3, [pc, #24]	@ (800565c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005644:	6a1b      	ldr	r3, [r3, #32]
 8005646:	091b      	lsrs	r3, r3, #4
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	4904      	ldr	r1, [pc, #16]	@ (8005660 <HAL_RCC_GetPCLK1Freq+0x28>)
 800564e:	5ccb      	ldrb	r3, [r1, r3]
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	bd80      	pop	{r7, pc}
 800565c:	44020c00 	.word	0x44020c00
 8005660:	08008f40 	.word	0x08008f40

08005664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005668:	f7ff ffca 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 800566c:	4602      	mov	r2, r0
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	0a1b      	lsrs	r3, r3, #8
 8005674:	f003 0307 	and.w	r3, r3, #7
 8005678:	4904      	ldr	r1, [pc, #16]	@ (800568c <HAL_RCC_GetPCLK2Freq+0x28>)
 800567a:	5ccb      	ldrb	r3, [r1, r3]
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005684:	4618      	mov	r0, r3
 8005686:	bd80      	pop	{r7, pc}
 8005688:	44020c00 	.word	0x44020c00
 800568c:	08008f40 	.word	0x08008f40

08005690 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005694:	f7ff ffb4 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 8005698:	4602      	mov	r2, r0
 800569a:	4b06      	ldr	r3, [pc, #24]	@ (80056b4 <HAL_RCC_GetPCLK3Freq+0x24>)
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	0b1b      	lsrs	r3, r3, #12
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	4904      	ldr	r1, [pc, #16]	@ (80056b8 <HAL_RCC_GetPCLK3Freq+0x28>)
 80056a6:	5ccb      	ldrb	r3, [r1, r3]
 80056a8:	f003 031f 	and.w	r3, r3, #31
 80056ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	44020c00 	.word	0x44020c00
 80056b8:	08008f40 	.word	0x08008f40

080056bc <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80056bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c0:	b0aa      	sub	sp, #168	@ 0xa8
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056c8:	2300      	movs	r3, #0
 80056ca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80056d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056dc:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80056e0:	2500      	movs	r5, #0
 80056e2:	ea54 0305 	orrs.w	r3, r4, r5
 80056e6:	d00b      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80056e8:	4bb8      	ldr	r3, [pc, #736]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80056ee:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80056f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80056f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f8:	4ab4      	ldr	r2, [pc, #720]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005700:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f002 0801 	and.w	r8, r2, #1
 800570c:	f04f 0900 	mov.w	r9, #0
 8005710:	ea58 0309 	orrs.w	r3, r8, r9
 8005714:	d038      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005716:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800571a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571c:	2b05      	cmp	r3, #5
 800571e:	d819      	bhi.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005720:	a201      	add	r2, pc, #4	@ (adr r2, 8005728 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8005722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005726:	bf00      	nop
 8005728:	0800575d 	.word	0x0800575d
 800572c:	08005741 	.word	0x08005741
 8005730:	08005755 	.word	0x08005755
 8005734:	0800575d 	.word	0x0800575d
 8005738:	0800575d 	.word	0x0800575d
 800573c:	0800575d 	.word	0x0800575d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005740:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005744:	3308      	adds	r3, #8
 8005746:	4618      	mov	r0, r3
 8005748:	f001 fff2 	bl	8007730 <RCCEx_PLL2_Config>
 800574c:	4603      	mov	r3, r0
 800574e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART1 clock source config set later after clock selection check */
        break;
 8005752:	e004      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xa2>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 800575a:	e000      	b.n	800575e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        break;
 800575c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10c      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005766:	4b99      	ldr	r3, [pc, #612]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005768:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800576c:	f023 0107 	bic.w	r1, r3, #7
 8005770:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005776:	4a95      	ldr	r2, [pc, #596]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005778:	430b      	orrs	r3, r1
 800577a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800577e:	e003      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005780:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005784:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005788:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800578c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005790:	f002 0a02 	and.w	sl, r2, #2
 8005794:	f04f 0b00 	mov.w	fp, #0
 8005798:	ea5a 030b 	orrs.w	r3, sl, fp
 800579c:	d03c      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 800579e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a4:	2b28      	cmp	r3, #40	@ 0x28
 80057a6:	d01b      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 80057a8:	2b28      	cmp	r3, #40	@ 0x28
 80057aa:	d815      	bhi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80057ac:	2b20      	cmp	r3, #32
 80057ae:	d019      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 80057b0:	2b20      	cmp	r3, #32
 80057b2:	d811      	bhi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80057b4:	2b18      	cmp	r3, #24
 80057b6:	d017      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80057b8:	2b18      	cmp	r3, #24
 80057ba:	d80d      	bhi.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d015      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x130>
 80057c0:	2b08      	cmp	r3, #8
 80057c2:	d109      	bne.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80057c8:	3308      	adds	r3, #8
 80057ca:	4618      	mov	r0, r3
 80057cc:	f001 ffb0 	bl	8007730 <RCCEx_PLL2_Config>
 80057d0:	4603      	mov	r3, r0
 80057d2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART2 clock source config set later after clock selection check */
        break;
 80057d6:	e00a      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x132>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80057de:	e006      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80057e0:	bf00      	nop
 80057e2:	e004      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80057e4:	bf00      	nop
 80057e6:	e002      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80057e8:	bf00      	nop
 80057ea:	e000      	b.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x132>
        break;
 80057ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ee:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10c      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x154>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80057f6:	4b75      	ldr	r3, [pc, #468]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80057f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057fc:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005800:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005806:	4a71      	ldr	r2, [pc, #452]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005808:	430b      	orrs	r3, r1
 800580a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800580e:	e003      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x15c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005810:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005814:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005818:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f002 0304 	and.w	r3, r2, #4
 8005824:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800582e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d040      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005838:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800583c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800583e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005842:	d01e      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
 8005844:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005848:	d817      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800584a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800584e:	d01a      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8005850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005854:	d811      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005856:	2bc0      	cmp	r3, #192	@ 0xc0
 8005858:	d017      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800585a:	2bc0      	cmp	r3, #192	@ 0xc0
 800585c:	d80d      	bhi.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d015      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8005862:	2b40      	cmp	r3, #64	@ 0x40
 8005864:	d109      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005866:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800586a:	3308      	adds	r3, #8
 800586c:	4618      	mov	r0, r3
 800586e:	f001 ff5f 	bl	8007730 <RCCEx_PLL2_Config>
 8005872:	4603      	mov	r3, r0
 8005874:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* USART3 clock source config set later after clock selection check */
        break;
 8005878:	e00a      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005880:	e006      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005882:	bf00      	nop
 8005884:	e004      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 8005886:	bf00      	nop
 8005888:	e002      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800588a:	bf00      	nop
 800588c:	e000      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        break;
 800588e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005890:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005894:	2b00      	cmp	r3, #0
 8005896:	d10c      	bne.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005898:	4b4c      	ldr	r3, [pc, #304]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800589a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800589e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80058a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a8:	4a48      	ldr	r2, [pc, #288]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80058aa:	430b      	orrs	r3, r1
 80058ac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80058b0:	e003      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80058b6:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058ca:	2300      	movs	r3, #0
 80058cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80058d4:	460b      	mov	r3, r1
 80058d6:	4313      	orrs	r3, r2
 80058d8:	d043      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80058da:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80058de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058e4:	d021      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80058e6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058ea:	d81a      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80058ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058f0:	d01d      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x272>
 80058f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058f6:	d814      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x266>
 80058f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058fc:	d019      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80058fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005902:	d80e      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x266>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d016      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x27a>
 8005908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800590c:	d109      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x266>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800590e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005912:	3308      	adds	r3, #8
 8005914:	4618      	mov	r0, r3
 8005916:	f001 ff0b 	bl	8007730 <RCCEx_PLL2_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005920:	e00a      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005928:	e006      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800592a:	bf00      	nop
 800592c:	e004      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x27c>
        break;
 8005936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005938:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10c      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005940:	4b22      	ldr	r3, [pc, #136]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005946:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800594a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800594e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005950:	4a1e      	ldr	r2, [pc, #120]	@ (80059cc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005952:	430b      	orrs	r3, r1
 8005954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005958:	e003      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800595a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800595e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005962:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800596e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005970:	2300      	movs	r3, #0
 8005972:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005974:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005978:	460b      	mov	r3, r1
 800597a:	4313      	orrs	r3, r2
 800597c:	d03e      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800597e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005984:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005988:	d01b      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
 800598a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800598e:	d814      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 8005990:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005994:	d017      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8005996:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800599a:	d80e      	bhi.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
 800599c:	2b00      	cmp	r3, #0
 800599e:	d017      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80059a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a4:	d109      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x2fe>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059aa:	3308      	adds	r3, #8
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 febf 	bl	8007730 <RCCEx_PLL2_Config>
 80059b2:	4603      	mov	r3, r0
 80059b4:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80059b8:	e00b      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80059c0:	e007      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80059c2:	bf00      	nop
 80059c4:	e005      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        break;
 80059c6:	bf00      	nop
 80059c8:	e003      	b.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
 80059ca:	bf00      	nop
 80059cc:	44020c00 	.word	0x44020c00
        break;
 80059d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10c      	bne.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80059da:	4ba5      	ldr	r3, [pc, #660]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80059dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059e0:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80059e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ea:	4aa1      	ldr	r2, [pc, #644]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 80059ec:	430b      	orrs	r3, r1
 80059ee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80059f2:	e003      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x340>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f4:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80059f8:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a08:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8005a0e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005a12:	460b      	mov	r3, r1
 8005a14:	4313      	orrs	r3, r2
 8005a16:	d03b      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005a18:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a1e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a22:	d01b      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 8005a24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a28:	d814      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005a2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a2e:	d017      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8005a30:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005a34:	d80e      	bhi.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d014      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8005a3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a3e:	d109      	bne.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x398>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a44:	3308      	adds	r3, #8
 8005a46:	4618      	mov	r0, r3
 8005a48:	f001 fe72 	bl	8007730 <RCCEx_PLL2_Config>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005a52:	e008      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005a5a:	e004      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005a5c:	bf00      	nop
 8005a5e:	e002      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005a60:	bf00      	nop
 8005a62:	e000      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
        break;
 8005a64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a66:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10c      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005a6e:	4b80      	ldr	r3, [pc, #512]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005a70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005a74:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005a78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a7e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005a80:	430b      	orrs	r3, r1
 8005a82:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005a86:	e003      	b.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a88:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005a8c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005a90:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005aa2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	d033      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005aac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ab2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005ab6:	d015      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005ab8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005abc:	d80e      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d012      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005ac2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ac6:	d109      	bne.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x420>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ac8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005acc:	3308      	adds	r3, #8
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 fe2e 	bl	8007730 <RCCEx_PLL2_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005ada:	e006      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005ae2:	e002      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8005ae4:	bf00      	nop
 8005ae6:	e000      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x42e>
        break;
 8005ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aea:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10c      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005af2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005af4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005af8:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005afc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b02:	4a5b      	ldr	r2, [pc, #364]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005b04:	430b      	orrs	r3, r1
 8005b06:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b0a:	e003      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x458>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b10:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined (I3C2)
  /*-------------------------- I3C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
 8005b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1c:	2100      	movs	r1, #0
 8005b1e:	6639      	str	r1, [r7, #96]	@ 0x60
 8005b20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b24:	667b      	str	r3, [r7, #100]	@ 0x64
 8005b26:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	d033      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C2CLKSOURCE(pPeriphClkInit->I3c2ClockSelection));

    switch (pPeriphClkInit->I3c2ClockSelection)
 8005b30:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b3a:	d015      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x4ac>
 8005b3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b40:	d80e      	bhi.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d012      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005b46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b4a:	d109      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_I3C2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b50:	3308      	adds	r3, #8
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 fdec 	bl	8007730 <RCCEx_PLL2_Config>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_I3C2CLKSOURCE_PLL3R */
        /* I3C2 clock source config set later after clock selection check */
        break;
 8005b5e:	e006      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      case RCC_I3C2CLKSOURCE_HSI:      /* HSI clock is used as source of I3C2 clock*/
        /* I3C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005b66:	e002      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
        break;
 8005b6c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b6e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10c      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    {
      /* Set the source of I3C2 clock*/
      __HAL_RCC_I3C2_CONFIG(pPeriphClkInit->I3c2ClockSelection);
 8005b76:	4b3e      	ldr	r3, [pc, #248]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005b78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005b7c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005b80:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b86:	4a3a      	ldr	r2, [pc, #232]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005b88:	430b      	orrs	r3, r1
 8005b8a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005b8e:	e003      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b90:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005b94:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005baa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	d00e      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x516>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005bb4:	4b2e      	ldr	r3, [pc, #184]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	4a2d      	ldr	r2, [pc, #180]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005bba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005bbe:	61d3      	str	r3, [r2, #28]
 8005bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005bc2:	69d9      	ldr	r1, [r3, #28]
 8005bc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bcc:	4a28      	ldr	r2, [pc, #160]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8005be0:	2300      	movs	r3, #0
 8005be2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005be4:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005be8:	460b      	mov	r3, r1
 8005bea:	4313      	orrs	r3, r2
 8005bec:	d046      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005bee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005bf8:	d021      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8005bfa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005bfe:	d81a      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c04:	d01d      	beq.n	8005c42 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c0a:	d814      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005c0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c10:	d019      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x58a>
 8005c12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c16:	d80e      	bhi.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d016      	beq.n	8005c4a <HAL_RCCEx_PeriphCLKConfig+0x58e>
 8005c1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c20:	d109      	bne.n	8005c36 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c26:	3308      	adds	r3, #8
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f001 fd81 	bl	8007730 <RCCEx_PLL2_Config>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005c34:	e00a      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x590>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005c3c:	e006      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005c3e:	bf00      	nop
 8005c40:	e004      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005c42:	bf00      	nop
 8005c44:	e002      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x590>
        break;
 8005c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c4c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10f      	bne.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005c54:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005c56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c5a:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005c5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c64:	4a02      	ldr	r2, [pc, #8]	@ (8005c70 <HAL_RCCEx_PeriphCLKConfig+0x5b4>)
 8005c66:	430b      	orrs	r3, r1
 8005c68:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005c6c:	e006      	b.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005c6e:	bf00      	nop
 8005c70:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c74:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005c78:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c8e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005c92:	460b      	mov	r3, r1
 8005c94:	4313      	orrs	r3, r2
 8005c96:	d043      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x664>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005c98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ca2:	d021      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8005ca4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ca8:	d81a      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005caa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cae:	d01d      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x630>
 8005cb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005cb4:	d814      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005cb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cba:	d019      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x634>
 8005cbc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005cc0:	d80e      	bhi.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x624>
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d016      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x638>
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cca:	d109      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x624>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ccc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005cd0:	3308      	adds	r3, #8
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f001 fd2c 	bl	8007730 <RCCEx_PLL2_Config>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005cde:	e00a      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005ce6:	e006      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005ce8:	bf00      	nop
 8005cea:	e004      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005cec:	bf00      	nop
 8005cee:	e002      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005cf0:	bf00      	nop
 8005cf2:	e000      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
        break;
 8005cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cf6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10c      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005cfe:	4bb6      	ldr	r3, [pc, #728]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005d00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005d08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0e:	4ab2      	ldr	r2, [pc, #712]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005d10:	430b      	orrs	r3, r1
 8005d12:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d16:	e003      	b.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x664>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005d1c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005d20:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d28:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d2e:	2300      	movs	r3, #0
 8005d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d32:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005d36:	460b      	mov	r3, r1
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	d030      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005d3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d80f      	bhi.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d211      	bcs.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d911      	bls.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d109      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d56:	3308      	adds	r3, #8
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 fce9 	bl	8007730 <RCCEx_PLL2_Config>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005d64:	e006      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005d6c:	e002      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005d6e:	bf00      	nop
 8005d70:	e000      	b.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
        break;
 8005d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d74:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10c      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005d7c:	4b96      	ldr	r3, [pc, #600]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d82:	f023 0107 	bic.w	r1, r3, #7
 8005d86:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d8c:	4a92      	ldr	r2, [pc, #584]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d94:	e003      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d96:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005d9a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005d9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	2100      	movs	r1, #0
 8005da8:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005daa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005db0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005db4:	460b      	mov	r3, r1
 8005db6:	4313      	orrs	r3, r2
 8005db8:	d022      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x744>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005dba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005dbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d005      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x714>
 8005dc4:	2b08      	cmp	r3, #8
 8005dc6:	d005      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x718>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005dce:	e002      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005dd0:	bf00      	nop
 8005dd2:	e000      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x71a>
        break;
 8005dd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dd6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005dde:	4b7e      	ldr	r3, [pc, #504]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005de4:	f023 0108 	bic.w	r1, r3, #8
 8005de8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005dec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005dee:	4a7a      	ldr	r2, [pc, #488]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005df0:	430b      	orrs	r3, r1
 8005df2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x744>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005dfc:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e00:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e0e:	2300      	movs	r3, #0
 8005e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e12:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005e16:	460b      	mov	r3, r1
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	f000 80b0 	beq.w	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x8c2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005e1e:	4b6f      	ldr	r3, [pc, #444]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e22:	4a6e      	ldr	r2, [pc, #440]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005e24:	f043 0301 	orr.w	r3, r3, #1
 8005e28:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e2a:	f7fc f8ad 	bl	8001f88 <HAL_GetTick>
 8005e2e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005e32:	e00b      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x790>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e34:	f7fc f8a8 	bl	8001f88 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d903      	bls.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x790>
      {
        ret = HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005e4a:	e005      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005e4c:	4b63      	ldr	r3, [pc, #396]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x920>)
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ed      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x778>
      }
    }

    if (ret == HAL_OK)
 8005e58:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f040 808a 	bne.w	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e62:	4b5d      	ldr	r3, [pc, #372]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005e64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005e70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d022      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x802>
 8005e78:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e7e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d01b      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x802>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e86:	4b54      	ldr	r3, [pc, #336]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005e88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e94:	4b50      	ldr	r3, [pc, #320]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e9a:	4a4f      	ldr	r2, [pc, #316]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ea4:	4b4c      	ldr	r3, [pc, #304]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005eaa:	4a4b      	ldr	r2, [pc, #300]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005eb4:	4a48      	ldr	r2, [pc, #288]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005eba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d019      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x842>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eca:	f7fc f85d 	bl	8001f88 <HAL_GetTick>
 8005ece:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ed2:	e00d      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ed4:	f7fc f858 	bl	8001f88 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d903      	bls.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>
          {
            ret = HAL_TIMEOUT;
 8005ee8:	2303      	movs	r3, #3
 8005eea:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
            break;
 8005eee:	e006      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ef0:	4b39      	ldr	r3, [pc, #228]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ef6:	f003 0302 	and.w	r3, r3, #2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0ea      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x818>
          }
        }
      }

      if (ret == HAL_OK)
 8005efe:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d132      	bne.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005f06:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005f0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f14:	d10f      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8005f16:	4b30      	ldr	r3, [pc, #192]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005f22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f24:	091b      	lsrs	r3, r3, #4
 8005f26:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005f2a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8005f2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005f30:	430b      	orrs	r3, r1
 8005f32:	61d3      	str	r3, [r2, #28]
 8005f34:	e005      	b.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8005f36:	4b28      	ldr	r3, [pc, #160]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	4a27      	ldr	r2, [pc, #156]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005f3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f40:	61d3      	str	r3, [r2, #28]
 8005f42:	4b25      	ldr	r3, [pc, #148]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f48:	4a23      	ldr	r2, [pc, #140]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005f4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f4e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f52:	4b21      	ldr	r3, [pc, #132]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005f54:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8005f58:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f62:	4a1d      	ldr	r2, [pc, #116]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005f64:	430b      	orrs	r3, r1
 8005f66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005f6a:	e008      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f6c:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005f70:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
 8005f74:	e003      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f76:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005f7a:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005f7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005f94:	460b      	mov	r3, r1
 8005f96:	4313      	orrs	r3, r2
 8005f98:	d038      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x950>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005f9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005f9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa0:	2b30      	cmp	r3, #48	@ 0x30
 8005fa2:	d014      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x912>
 8005fa4:	2b30      	cmp	r3, #48	@ 0x30
 8005fa6:	d80e      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005fa8:	2b20      	cmp	r3, #32
 8005faa:	d012      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	d80a      	bhi.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d106      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fb8:	4b07      	ldr	r3, [pc, #28]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbc:	4a06      	ldr	r2, [pc, #24]	@ (8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x91c>)
 8005fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fc2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8005fc4:	e00d      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x926>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8005fcc:	e009      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005fce:	bf00      	nop
 8005fd0:	e007      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x926>
        break;
 8005fd2:	bf00      	nop
 8005fd4:	e005      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x926>
 8005fd6:	bf00      	nop
 8005fd8:	44020c00 	.word	0x44020c00
 8005fdc:	44020800 	.word	0x44020800
        break;
 8005fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe2:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10c      	bne.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x948>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005fea:	4bb5      	ldr	r3, [pc, #724]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ff0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ff4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffa:	49b1      	ldr	r1, [pc, #708]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006002:	e003      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x950>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006004:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006008:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800600c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006014:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006018:	623b      	str	r3, [r7, #32]
 800601a:	2300      	movs	r3, #0
 800601c:	627b      	str	r3, [r7, #36]	@ 0x24
 800601e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006022:	460b      	mov	r3, r1
 8006024:	4313      	orrs	r3, r2
 8006026:	d03c      	beq.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006028:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800602c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800602e:	2b04      	cmp	r3, #4
 8006030:	d81d      	bhi.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x9b2>
 8006032:	a201      	add	r2, pc, #4	@ (adr r2, 8006038 <HAL_RCCEx_PeriphCLKConfig+0x97c>)
 8006034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006038:	0800604d 	.word	0x0800604d
 800603c:	0800605b 	.word	0x0800605b
 8006040:	0800606f 	.word	0x0800606f
 8006044:	08006077 	.word	0x08006077
 8006048:	08006077 	.word	0x08006077
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604c:	4b9c      	ldr	r3, [pc, #624]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	4a9b      	ldr	r2, [pc, #620]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006056:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006058:	e00e      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x9bc>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800605a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800605e:	3308      	adds	r3, #8
 8006060:	4618      	mov	r0, r3
 8006062:	f001 fb65 	bl	8007730 <RCCEx_PLL2_Config>
 8006066:	4603      	mov	r3, r0
 8006068:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800606c:	e004      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006074:	e000      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
        break;
 8006076:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006078:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10c      	bne.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x9de>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006080:	4b8f      	ldr	r3, [pc, #572]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006086:	f023 0207 	bic.w	r2, r3, #7
 800608a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800608e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006090:	498b      	ldr	r1, [pc, #556]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006098:	e003      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800609a:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800609e:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80060a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	2300      	movs	r3, #0
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80060b8:	460b      	mov	r3, r1
 80060ba:	4313      	orrs	r3, r2
 80060bc:	d03c      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80060be:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80060c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d01f      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80060c8:	2b20      	cmp	r3, #32
 80060ca:	d819      	bhi.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80060cc:	2b18      	cmp	r3, #24
 80060ce:	d01d      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80060d0:	2b18      	cmp	r3, #24
 80060d2:	d815      	bhi.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xa44>
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d002      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xa22>
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d007      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80060dc:	e010      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060de:	4b78      	ldr	r3, [pc, #480]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80060e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e2:	4a77      	ldr	r2, [pc, #476]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80060e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060e8:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80060ea:	e010      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xa52>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80060f0:	3308      	adds	r3, #8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fb1c 	bl	8007730 <RCCEx_PLL2_Config>
 80060f8:	4603      	mov	r3, r0
 80060fa:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80060fe:	e006      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006106:	e002      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 8006108:	bf00      	nop
 800610a:	e000      	b.n	800610e <HAL_RCCEx_PeriphCLKConfig+0xa52>
        break;
 800610c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800610e:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10c      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006116:	4b6a      	ldr	r3, [pc, #424]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800611c:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8006120:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006126:	4966      	ldr	r1, [pc, #408]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006128:	4313      	orrs	r3, r2
 800612a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800612e:	e003      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xa7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006130:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8006134:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006138:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
 800614a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800614e:	460b      	mov	r3, r1
 8006150:	4313      	orrs	r3, r2
 8006152:	d03e      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006154:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800615a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800615e:	d020      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
 8006160:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006164:	d819      	bhi.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xade>
 8006166:	2bc0      	cmp	r3, #192	@ 0xc0
 8006168:	d01d      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xaea>
 800616a:	2bc0      	cmp	r3, #192	@ 0xc0
 800616c:	d815      	bhi.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xade>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xabc>
 8006172:	2b40      	cmp	r3, #64	@ 0x40
 8006174:	d007      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8006176:	e010      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xade>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006178:	4b51      	ldr	r3, [pc, #324]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800617a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617c:	4a50      	ldr	r2, [pc, #320]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800617e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006182:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006184:	e010      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xaec>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006186:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800618a:	3308      	adds	r3, #8
 800618c:	4618      	mov	r0, r3
 800618e:	f001 facf 	bl	8007730 <RCCEx_PLL2_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006198:	e006      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80061a0:	e002      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80061a2:	bf00      	nop
 80061a4:	e000      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xaec>
        break;
 80061a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10c      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80061b0:	4b43      	ldr	r3, [pc, #268]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80061b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061b6:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 80061ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061c0:	493f      	ldr	r1, [pc, #252]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80061c8:	e003      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ca:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80061ce:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	2100      	movs	r1, #0
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	f003 0304 	and.w	r3, r3, #4
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80061e8:	460b      	mov	r3, r1
 80061ea:	4313      	orrs	r3, r2
 80061ec:	d038      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xba4>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80061ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80061f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061f8:	d00e      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80061fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80061fe:	d815      	bhi.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xb70>
 8006200:	2b00      	cmp	r3, #0
 8006202:	d017      	beq.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xb78>
 8006204:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006208:	d110      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xb70>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800620a:	4b2d      	ldr	r3, [pc, #180]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800620c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620e:	4a2c      	ldr	r2, [pc, #176]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006214:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006216:	e00e      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006218:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800621c:	3308      	adds	r3, #8
 800621e:	4618      	mov	r0, r3
 8006220:	f001 fa86 	bl	8007730 <RCCEx_PLL2_Config>
 8006224:	4603      	mov	r3, r0
 8006226:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800622a:	e004      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xb7a>

      default:
        ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 8006232:	e000      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
        break;
 8006234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006236:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10c      	bne.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800623e:	4b20      	ldr	r3, [pc, #128]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006244:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006248:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800624c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800624e:	491c      	ldr	r1, [pc, #112]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006250:	4313      	orrs	r3, r2
 8006252:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006256:	e003      	b.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xba4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006258:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 800625c:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006260:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006268:	2100      	movs	r1, #0
 800626a:	6039      	str	r1, [r7, #0]
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	d039      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800627c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006282:	2b30      	cmp	r3, #48	@ 0x30
 8006284:	d01e      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8006286:	2b30      	cmp	r3, #48	@ 0x30
 8006288:	d815      	bhi.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
 800628a:	2b10      	cmp	r3, #16
 800628c:	d002      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
 800628e:	2b20      	cmp	r3, #32
 8006290:	d007      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0xbe6>
 8006292:	e010      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xbfa>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006294:	4b0a      	ldr	r3, [pc, #40]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 8006296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006298:	4a09      	ldr	r2, [pc, #36]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc04>)
 800629a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800629e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 80062a0:	e011      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
#else
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062a6:	3308      	adds	r3, #8
 80062a8:	4618      	mov	r0, r3
 80062aa:	f001 fa41 	bl	8007730 <RCCEx_PLL2_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 80062b4:	e007      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
        break;
 80062bc:	e003      	b.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xc0a>
 80062be:	bf00      	nop
 80062c0:	44020c00 	.word	0x44020c00
        break;
 80062c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c6:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10c      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80062ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80062d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80062d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80062dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062de:	4908      	ldr	r1, [pc, #32]	@ (8006300 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80062e6:	e003      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 80062ec:	f887 30a2 	strb.w	r3, [r7, #162]	@ 0xa2
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);

  }
#endif /* CEC */

  return status;
 80062f0:	f897 30a2 	ldrb.w	r3, [r7, #162]	@ 0xa2
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	37a8      	adds	r7, #168	@ 0xa8
 80062f8:	46bd      	mov	sp, r7
 80062fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062fe:	bf00      	nop
 8006300:	44020c00 	.word	0x44020c00

08006304 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006304:	b480      	push	{r7}
 8006306:	b08b      	sub	sp, #44	@ 0x2c
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800630c:	4bae      	ldr	r3, [pc, #696]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800630e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006314:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006316:	4bac      	ldr	r3, [pc, #688]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006320:	4ba9      	ldr	r3, [pc, #676]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006324:	0a1b      	lsrs	r3, r3, #8
 8006326:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800632a:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800632c:	4ba6      	ldr	r3, [pc, #664]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800632e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006330:	091b      	lsrs	r3, r3, #4
 8006332:	f003 0301 	and.w	r3, r3, #1
 8006336:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006338:	4ba3      	ldr	r3, [pc, #652]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800633a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800633c:	08db      	lsrs	r3, r3, #3
 800633e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	fb02 f303 	mul.w	r3, r2, r3
 8006348:	ee07 3a90 	vmov	s15, r3
 800634c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006350:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 8126 	beq.w	80065a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	2b03      	cmp	r3, #3
 8006360:	d053      	beq.n	800640a <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d86f      	bhi.n	8006448 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d003      	beq.n	8006376 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	2b02      	cmp	r3, #2
 8006372:	d02b      	beq.n	80063cc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006374:	e068      	b.n	8006448 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006376:	4b94      	ldr	r3, [pc, #592]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	08db      	lsrs	r3, r3, #3
 800637c:	f003 0303 	and.w	r3, r3, #3
 8006380:	4a92      	ldr	r2, [pc, #584]	@ (80065cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006382:	fa22 f303 	lsr.w	r3, r2, r3
 8006386:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063aa:	ed97 6a04 	vldr	s12, [r7, #16]
 80063ae:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80065d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80063b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80063ca:	e068      	b.n	800649e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80065d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 80063da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	ee07 3a90 	vmov	s15, r3
 80063e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063e8:	ed97 6a04 	vldr	s12, [r7, #16]
 80063ec:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80065d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80063f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006404:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006408:	e049      	b.n	800649e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006414:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80065d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006426:	ed97 6a04 	vldr	s12, [r7, #16]
 800642a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80065d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800642e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006436:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800643a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800643e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006442:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006446:	e02a      	b.n	800649e <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006448:	4b5f      	ldr	r3, [pc, #380]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	08db      	lsrs	r3, r3, #3
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	4a5e      	ldr	r2, [pc, #376]	@ (80065cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006454:	fa22 f303 	lsr.w	r3, r2, r3
 8006458:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	ee07 3a90 	vmov	s15, r3
 8006460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	ee07 3a90 	vmov	s15, r3
 800646a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006480:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80065d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006484:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006488:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006490:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006498:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800649c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800649e:	4b4a      	ldr	r3, [pc, #296]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064aa:	d121      	bne.n	80064f0 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80064ac:	4b46      	ldr	r3, [pc, #280]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80064ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d017      	beq.n	80064e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80064b8:	4b43      	ldr	r3, [pc, #268]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80064ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064bc:	0a5b      	lsrs	r3, r3, #9
 80064be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80064ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80064d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80064d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064de:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	e006      	b.n	80064f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e002      	b.n	80064f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064f6:	4b34      	ldr	r3, [pc, #208]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006502:	d121      	bne.n	8006548 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006504:	4b30      	ldr	r3, [pc, #192]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d017      	beq.n	8006540 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006510:	4b2d      	ldr	r3, [pc, #180]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800651a:	ee07 3a90 	vmov	s15, r3
 800651e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006522:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006526:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800652a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800652e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006536:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	605a      	str	r2, [r3, #4]
 800653e:	e006      	b.n	800654e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	605a      	str	r2, [r3, #4]
 8006546:	e002      	b.n	800654e <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800654e:	4b1e      	ldr	r3, [pc, #120]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800655a:	d121      	bne.n	80065a0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800655c:	4b1a      	ldr	r3, [pc, #104]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800655e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006560:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d017      	beq.n	8006598 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006568:	4b17      	ldr	r3, [pc, #92]	@ (80065c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800656a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800656c:	0e1b      	lsrs	r3, r3, #24
 800656e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800657a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800657e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006582:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800658a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800658e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006596:	e010      	b.n	80065ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	609a      	str	r2, [r3, #8]
}
 800659e:	e00c      	b.n	80065ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	609a      	str	r2, [r3, #8]
}
 80065a6:	e008      	b.n	80065ba <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2200      	movs	r2, #0
 80065ac:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	609a      	str	r2, [r3, #8]
}
 80065ba:	bf00      	nop
 80065bc:	372c      	adds	r7, #44	@ 0x2c
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	44020c00 	.word	0x44020c00
 80065cc:	03d09000 	.word	0x03d09000
 80065d0:	46000000 	.word	0x46000000
 80065d4:	4a742400 	.word	0x4a742400
 80065d8:	4af42400 	.word	0x4af42400

080065dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80065dc:	b480      	push	{r7}
 80065de:	b08b      	sub	sp, #44	@ 0x2c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80065e4:	4bae      	ldr	r3, [pc, #696]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80065e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065ec:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80065ee:	4bac      	ldr	r3, [pc, #688]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80065f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80065f8:	4ba9      	ldr	r3, [pc, #676]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80065fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fc:	0a1b      	lsrs	r3, r3, #8
 80065fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006602:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006604:	4ba6      	ldr	r3, [pc, #664]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006608:	091b      	lsrs	r3, r3, #4
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006610:	4ba3      	ldr	r3, [pc, #652]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006614:	08db      	lsrs	r3, r3, #3
 8006616:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	fb02 f303 	mul.w	r3, r2, r3
 8006620:	ee07 3a90 	vmov	s15, r3
 8006624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006628:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f000 8126 	beq.w	8006880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	2b03      	cmp	r3, #3
 8006638:	d053      	beq.n	80066e2 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	2b03      	cmp	r3, #3
 800663e:	d86f      	bhi.n	8006720 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d003      	beq.n	800664e <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	2b02      	cmp	r3, #2
 800664a:	d02b      	beq.n	80066a4 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 800664c:	e068      	b.n	8006720 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800664e:	4b94      	ldr	r3, [pc, #592]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	08db      	lsrs	r3, r3, #3
 8006654:	f003 0303 	and.w	r3, r3, #3
 8006658:	4a92      	ldr	r2, [pc, #584]	@ (80068a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800665a:	fa22 f303 	lsr.w	r3, r2, r3
 800665e:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	ee07 3a90 	vmov	s15, r3
 8006666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	ee07 3a90 	vmov	s15, r3
 800667e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006682:	ed97 6a04 	vldr	s12, [r7, #16]
 8006686:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800668a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800668e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800669a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800669e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80066a2:	e068      	b.n	8006776 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ae:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80068ac <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80066b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	ee07 3a90 	vmov	s15, r3
 80066bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c0:	ed97 6a04 	vldr	s12, [r7, #16]
 80066c4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80066c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066dc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80066e0:	e049      	b.n	8006776 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066ec:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80068b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80066f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	ee07 3a90 	vmov	s15, r3
 80066fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066fe:	ed97 6a04 	vldr	s12, [r7, #16]
 8006702:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800670a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800670e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800671e:	e02a      	b.n	8006776 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006720:	4b5f      	ldr	r3, [pc, #380]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	08db      	lsrs	r3, r3, #3
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	4a5e      	ldr	r2, [pc, #376]	@ (80068a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	ee07 3a90 	vmov	s15, r3
 8006738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	ee07 3a90 	vmov	s15, r3
 8006742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006754:	ed97 6a04 	vldr	s12, [r7, #16]
 8006758:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80068a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800675c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800676c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006770:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006774:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006776:	4b4a      	ldr	r3, [pc, #296]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800677e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006782:	d121      	bne.n	80067c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006784:	4b46      	ldr	r3, [pc, #280]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d017      	beq.n	80067c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006790:	4b43      	ldr	r3, [pc, #268]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006794:	0a5b      	lsrs	r3, r3, #9
 8006796:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80067a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067a6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80067aa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80067ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067b6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	e006      	b.n	80067ce <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	e002      	b.n	80067ce <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80067ce:	4b34      	ldr	r3, [pc, #208]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80067d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067da:	d121      	bne.n	8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80067dc:	4b30      	ldr	r3, [pc, #192]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80067de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d017      	beq.n	8006818 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80067e8:	4b2d      	ldr	r3, [pc, #180]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80067ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ec:	0c1b      	lsrs	r3, r3, #16
 80067ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80067fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80067fe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006802:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800680a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800680e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	605a      	str	r2, [r3, #4]
 8006816:	e006      	b.n	8006826 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	605a      	str	r2, [r3, #4]
 800681e:	e002      	b.n	8006826 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006826:	4b1e      	ldr	r3, [pc, #120]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800682e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006832:	d121      	bne.n	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006834:	4b1a      	ldr	r3, [pc, #104]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006838:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d017      	beq.n	8006870 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006840:	4b17      	ldr	r3, [pc, #92]	@ (80068a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006844:	0e1b      	lsrs	r3, r3, #24
 8006846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006856:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800685a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800685e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006866:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800686e:	e010      	b.n	8006892 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	609a      	str	r2, [r3, #8]
}
 8006876:	e00c      	b.n	8006892 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	609a      	str	r2, [r3, #8]
}
 800687e:	e008      	b.n	8006892 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	609a      	str	r2, [r3, #8]
}
 8006892:	bf00      	nop
 8006894:	372c      	adds	r7, #44	@ 0x2c
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	44020c00 	.word	0x44020c00
 80068a4:	03d09000 	.word	0x03d09000
 80068a8:	46000000 	.word	0x46000000
 80068ac:	4a742400 	.word	0x4a742400
 80068b0:	4af42400 	.word	0x4af42400

080068b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b08c      	sub	sp, #48	@ 0x30
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80068be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068c2:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 80068c6:	430b      	orrs	r3, r1
 80068c8:	d14b      	bne.n	8006962 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80068ca:	4bc4      	ldr	r3, [pc, #784]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80068cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068d4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80068d6:	4bc1      	ldr	r3, [pc, #772]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80068d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068dc:	f003 0302 	and.w	r3, r3, #2
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d108      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80068e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ea:	d104      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80068ec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068f2:	f000 bf14 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80068f6:	4bb9      	ldr	r3, [pc, #740]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 80068f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80068fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006900:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006904:	d108      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8006906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800690c:	d104      	bne.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800690e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006914:	f000 bf03 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8006918:	4bb0      	ldr	r3, [pc, #704]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006920:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006924:	d119      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8006926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006928:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800692c:	d115      	bne.n	800695a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800692e:	4bab      	ldr	r3, [pc, #684]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8006936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800693a:	d30a      	bcc.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800693c:	4ba7      	ldr	r3, [pc, #668]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	0a1b      	lsrs	r3, r3, #8
 8006942:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006946:	4aa6      	ldr	r2, [pc, #664]	@ (8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
 8006948:	fbb2 f3f3 	udiv	r3, r2, r3
 800694c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800694e:	f000 bee6 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
      }
      else
      {
        frequency = 0U;
 8006952:	2300      	movs	r3, #0
 8006954:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8006956:	f000 bee2 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800695e:	f000 bede 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8006962:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006966:	f5a3 5180 	sub.w	r1, r3, #4096	@ 0x1000
 800696a:	ea52 0301 	orrs.w	r3, r2, r1
 800696e:	f000 838e 	beq.w	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
 8006972:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006976:	2a01      	cmp	r2, #1
 8006978:	f573 5380 	sbcs.w	r3, r3, #4096	@ 0x1000
 800697c:	f080 86cc 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006984:	f5a3 7100 	sub.w	r1, r3, #512	@ 0x200
 8006988:	ea52 0301 	orrs.w	r3, r2, r1
 800698c:	f000 82aa 	beq.w	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006990:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006994:	2a01      	cmp	r2, #1
 8006996:	f573 7300 	sbcs.w	r3, r3, #512	@ 0x200
 800699a:	f080 86bd 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800699e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069a2:	f1a3 0110 	sub.w	r1, r3, #16
 80069a6:	ea52 0301 	orrs.w	r3, r2, r1
 80069aa:	f000 8681 	beq.w	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xdfc>
 80069ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b2:	2a01      	cmp	r2, #1
 80069b4:	f173 0310 	sbcs.w	r3, r3, #16
 80069b8:	f080 86ae 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80069bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069c0:	1f19      	subs	r1, r3, #4
 80069c2:	ea52 0301 	orrs.w	r3, r2, r1
 80069c6:	f000 84b1 	beq.w	800732c <HAL_RCCEx_GetPeriphCLKFreq+0xa78>
 80069ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ce:	2a01      	cmp	r2, #1
 80069d0:	f173 0304 	sbcs.w	r3, r3, #4
 80069d4:	f080 86a0 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80069d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069dc:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 80069e0:	430b      	orrs	r3, r1
 80069e2:	f000 85aa 	beq.w	800753a <HAL_RCCEx_GetPeriphCLKFreq+0xc86>
 80069e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ea:	497e      	ldr	r1, [pc, #504]	@ (8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
 80069ec:	428a      	cmp	r2, r1
 80069ee:	f173 0300 	sbcs.w	r3, r3, #0
 80069f2:	f080 8691 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80069f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069fa:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 80069fe:	430b      	orrs	r3, r1
 8006a00:	f000 8532 	beq.w	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xbb4>
 8006a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a08:	4977      	ldr	r1, [pc, #476]	@ (8006be8 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
 8006a0a:	428a      	cmp	r2, r1
 8006a0c:	f173 0300 	sbcs.w	r3, r3, #0
 8006a10:	f080 8682 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a18:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006a1c:	430b      	orrs	r3, r1
 8006a1e:	f000 84bc 	beq.w	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xae6>
 8006a22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a26:	4971      	ldr	r1, [pc, #452]	@ (8006bec <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
 8006a28:	428a      	cmp	r2, r1
 8006a2a:	f173 0300 	sbcs.w	r3, r3, #0
 8006a2e:	f080 8673 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a36:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	f000 85f2 	beq.w	8007624 <HAL_RCCEx_GetPeriphCLKFreq+0xd70>
 8006a40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a44:	496a      	ldr	r1, [pc, #424]	@ (8006bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
 8006a46:	428a      	cmp	r2, r1
 8006a48:	f173 0300 	sbcs.w	r3, r3, #0
 8006a4c:	f080 8664 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a54:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006a58:	430b      	orrs	r3, r1
 8006a5a:	f000 81e5 	beq.w	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x574>
 8006a5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a62:	4964      	ldr	r1, [pc, #400]	@ (8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
 8006a64:	428a      	cmp	r2, r1
 8006a66:	f173 0300 	sbcs.w	r3, r3, #0
 8006a6a:	f080 8655 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a72:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8006a76:	430b      	orrs	r3, r1
 8006a78:	f000 83cc 	beq.w	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8006a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a80:	495d      	ldr	r1, [pc, #372]	@ (8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>)
 8006a82:	428a      	cmp	r2, r1
 8006a84:	f173 0300 	sbcs.w	r3, r3, #0
 8006a88:	f080 8646 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a90:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 8006a94:	430b      	orrs	r3, r1
 8006a96:	f000 8331 	beq.w	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
 8006a9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a9e:	4957      	ldr	r1, [pc, #348]	@ (8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x348>)
 8006aa0:	428a      	cmp	r2, r1
 8006aa2:	f173 0300 	sbcs.w	r3, r3, #0
 8006aa6:	f080 8637 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aae:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006ab2:	430b      	orrs	r3, r1
 8006ab4:	f000 82bb 	beq.w	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x77a>
 8006ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006abc:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8006ac0:	f173 0300 	sbcs.w	r3, r3, #0
 8006ac4:	f080 8628 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006acc:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	f000 826d 	beq.w	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
 8006ad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ada:	f244 0101 	movw	r1, #16385	@ 0x4001
 8006ade:	428a      	cmp	r2, r1
 8006ae0:	f173 0300 	sbcs.w	r3, r3, #0
 8006ae4:	f080 8618 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006aec:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8006af0:	430b      	orrs	r3, r1
 8006af2:	f000 821e 	beq.w	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8006af6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006afa:	f242 0101 	movw	r1, #8193	@ 0x2001
 8006afe:	428a      	cmp	r2, r1
 8006b00:	f173 0300 	sbcs.w	r3, r3, #0
 8006b04:	f080 8608 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006b08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b0c:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8006b10:	430b      	orrs	r3, r1
 8006b12:	f000 8137 	beq.w	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b1a:	f241 0101 	movw	r1, #4097	@ 0x1001
 8006b1e:	428a      	cmp	r2, r1
 8006b20:	f173 0300 	sbcs.w	r3, r3, #0
 8006b24:	f080 85f8 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b2c:	1f11      	subs	r1, r2, #4
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	f000 80d2 	beq.w	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
 8006b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b38:	2a05      	cmp	r2, #5
 8006b3a:	f173 0300 	sbcs.w	r3, r3, #0
 8006b3e:	f080 85eb 	bcs.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006b42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b46:	1e51      	subs	r1, r2, #1
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	d006      	beq.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
 8006b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b50:	1e91      	subs	r1, r2, #2
 8006b52:	430b      	orrs	r3, r1
 8006b54:	d06c      	beq.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006b56:	f000 bddf 	b.w	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
        break;
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006b5a:	4b20      	ldr	r3, [pc, #128]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d104      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8006b6c:	f7fe fd7a 	bl	8005664 <HAL_RCC_GetPCLK2Freq>
 8006b70:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006b72:	f000 bdd4 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8006b76:	4b19      	ldr	r3, [pc, #100]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006b7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b82:	d10a      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
 8006b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0x2e6>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8a:	f107 030c 	add.w	r3, r7, #12
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f7ff fd24 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b98:	e048      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006b9a:	4b10      	ldr	r3, [pc, #64]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d10c      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d109      	bne.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bac:	4b0b      	ldr	r3, [pc, #44]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	08db      	lsrs	r3, r3, #3
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	4a12      	ldr	r2, [pc, #72]	@ (8006c00 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>)
 8006bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bbe:	e035      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bcc:	d11c      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8006bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd0:	2b04      	cmp	r3, #4
 8006bd2:	d119      	bne.n	8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
          frequency = CSI_VALUE;
 8006bd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x350>)
 8006bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bd8:	e028      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006bda:	bf00      	nop
 8006bdc:	44020c00 	.word	0x44020c00
 8006be0:	007a1200 	.word	0x007a1200
 8006be4:	20000001 	.word	0x20000001
 8006be8:	10000001 	.word	0x10000001
 8006bec:	08000001 	.word	0x08000001
 8006bf0:	04000001 	.word	0x04000001
 8006bf4:	00200001 	.word	0x00200001
 8006bf8:	00040001 	.word	0x00040001
 8006bfc:	00020001 	.word	0x00020001
 8006c00:	03d09000 	.word	0x03d09000
 8006c04:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006c08:	4b9f      	ldr	r3, [pc, #636]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d106      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c18:	2b05      	cmp	r3, #5
 8006c1a:	d103      	bne.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
          frequency = LSE_VALUE;
 8006c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c22:	e003      	b.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
          frequency = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006c28:	f000 bd79 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006c2c:	f000 bd77 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006c30:	4b95      	ldr	r3, [pc, #596]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006c36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c3a:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0x398>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006c42:	f7fe fcf9 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8006c46:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006c48:	f000 bd69 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8006c4c:	4b8e      	ldr	r3, [pc, #568]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c58:	d10a      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d107      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c60:	f107 030c 	add.w	r3, r7, #12
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7ff fcb9 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c6e:	e031      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006c70:	4b85      	ldr	r3, [pc, #532]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0302 	and.w	r3, r3, #2
 8006c78:	2b02      	cmp	r3, #2
 8006c7a:	d10c      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8006c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7e:	2b18      	cmp	r3, #24
 8006c80:	d109      	bne.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006c82:	4b81      	ldr	r3, [pc, #516]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	08db      	lsrs	r3, r3, #3
 8006c88:	f003 0303 	and.w	r3, r3, #3
 8006c8c:	4a7f      	ldr	r2, [pc, #508]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c94:	e01e      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8006c96:	4b7c      	ldr	r3, [pc, #496]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ca2:	d105      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
 8006ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	d102      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3fc>
          frequency = CSI_VALUE;
 8006caa:	4b79      	ldr	r3, [pc, #484]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8006cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cae:	e011      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006cb0:	4b75      	ldr	r3, [pc, #468]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d106      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	2b28      	cmp	r3, #40	@ 0x28
 8006cc2:	d103      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          frequency = LSE_VALUE;
 8006cc4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cca:	e003      	b.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
          frequency = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006cd0:	f000 bd25 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006cd4:	f000 bd23 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006cd8:	4b6b      	ldr	r3, [pc, #428]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006cda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006cde:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8006ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006cea:	f7fe fca5 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8006cee:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8006cf0:	f000 bd15 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8006cf4:	4b64      	ldr	r3, [pc, #400]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cfc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d00:	d10a      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	2b40      	cmp	r3, #64	@ 0x40
 8006d06:	d107      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d08:	f107 030c 	add.w	r3, r7, #12
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fc65 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d16:	e033      	b.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006d18:	4b5b      	ldr	r3, [pc, #364]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d10c      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d26:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d28:	d109      	bne.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d2a:	4b57      	ldr	r3, [pc, #348]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	08db      	lsrs	r3, r3, #3
 8006d30:	f003 0303 	and.w	r3, r3, #3
 8006d34:	4a55      	ldr	r2, [pc, #340]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006d36:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d3c:	e020      	b.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8006d3e:	4b52      	ldr	r3, [pc, #328]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d4a:	d106      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
 8006d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d52:	d102      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x4a6>
          frequency = CSI_VALUE;
 8006d54:	4b4e      	ldr	r3, [pc, #312]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8006d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d58:	e012      	b.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	d107      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8006d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006d6e:	d103      	bne.n	8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
          frequency = LSE_VALUE;
 8006d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d76:	e003      	b.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
          frequency = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d7c:	f000 bccf 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006d80:	f000 bccd 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006d84:	4b40      	ldr	r3, [pc, #256]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d8a:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8006d8e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d104      	bne.n	8006da0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8006d96:	f7fe fc7b 	bl	8005690 <HAL_RCC_GetPCLK3Freq>
 8006d9a:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006d9c:	f000 bcbf 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8006da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006da6:	d108      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x506>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da8:	f107 030c 	add.w	r3, r7, #12
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7ff fc15 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006db6:	f000 bcb2 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006dba:	4b33      	ldr	r3, [pc, #204]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d10d      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
 8006dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006dcc:	d109      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006dce:	4b2e      	ldr	r3, [pc, #184]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	08db      	lsrs	r3, r3, #3
 8006dd4:	f003 0303 	and.w	r3, r3, #3
 8006dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8006dda:	fa22 f303 	lsr.w	r3, r2, r3
 8006dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006de0:	e020      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8006de2:	4b29      	ldr	r3, [pc, #164]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dee:	d106      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
 8006df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006df6:	d102      	bne.n	8006dfe <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
          frequency = CSI_VALUE;
 8006df8:	4b25      	ldr	r3, [pc, #148]	@ (8006e90 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>)
 8006dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dfc:	e012      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006dfe:	4b22      	ldr	r3, [pc, #136]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d107      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006e12:	d103      	bne.n	8006e1c <HAL_RCCEx_GetPeriphCLKFreq+0x568>
          frequency = LSE_VALUE;
 8006e14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e1a:	e003      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
          frequency = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006e20:	f000 bc7d 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006e24:	f000 bc7b 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006e28:	4b17      	ldr	r3, [pc, #92]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006e2e:	f003 0307 	and.w	r3, r3, #7
 8006e32:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d104      	bne.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8006e3a:	f7fe fbe1 	bl	8005600 <HAL_RCC_GetHCLKFreq>
 8006e3e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8006e40:	f000 bc6d 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d104      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e4a:	f7fe faad 	bl	80053a8 <HAL_RCC_GetSysClockFreq>
 8006e4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
        break;
 8006e50:	f000 bc65 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d108      	bne.n	8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e5a:	f107 030c 	add.w	r3, r7, #12
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7ff fbbc 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006e68:	f000 bc59 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006e6c:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e78:	d10e      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8006e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7c:	2b03      	cmp	r3, #3
 8006e7e:	d10b      	bne.n	8006e98 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
          frequency = HSE_VALUE;
 8006e80:	4b04      	ldr	r3, [pc, #16]	@ (8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8006e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e84:	e02c      	b.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
 8006e86:	bf00      	nop
 8006e88:	44020c00 	.word	0x44020c00
 8006e8c:	03d09000 	.word	0x03d09000
 8006e90:	003d0900 	.word	0x003d0900
 8006e94:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006e98:	4b95      	ldr	r3, [pc, #596]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0302 	and.w	r3, r3, #2
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d10c      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
 8006ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d109      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006eaa:	4b91      	ldr	r3, [pc, #580]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	08db      	lsrs	r3, r3, #3
 8006eb0:	f003 0303 	and.w	r3, r3, #3
 8006eb4:	4a8f      	ldr	r2, [pc, #572]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ebc:	e010      	b.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8006ebe:	4b8c      	ldr	r3, [pc, #560]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eca:	d105      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
 8006ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ece:	2b05      	cmp	r3, #5
 8006ed0:	d102      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
          frequency = CSI_VALUE;
 8006ed2:	4b89      	ldr	r3, [pc, #548]	@ (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ed6:	e003      	b.n	8006ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x62c>
          frequency = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006edc:	f000 bc1f 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006ee0:	f000 bc1d 	b.w	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8006ee4:	4b82      	ldr	r3, [pc, #520]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ee6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8006ef0:	4b7f      	ldr	r3, [pc, #508]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d106      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d103      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
        {
          frequency = LSE_VALUE;
 8006f04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f0a:	e011      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8006f0c:	4b78      	ldr	r3, [pc, #480]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f1a:	d106      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
 8006f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d103      	bne.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
        {
          frequency = LSI_VALUE;
 8006f22:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 8006f2e:	e3f6      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006f30:	e3f5      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006f32:	4b6f      	ldr	r3, [pc, #444]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006f38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f3c:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d103      	bne.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f44:	f7fe fb78 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8006f48:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8006f4a:	e3e8      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL2R)
 8006f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f52:	d107      	bne.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f54:	f107 030c 	add.w	r3, r7, #12
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7ff fb3f 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006f62:	e3dc      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8006f64:	4b62      	ldr	r3, [pc, #392]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d10d      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 8006f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f76:	d109      	bne.n	8006f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f78:	4b5d      	ldr	r3, [pc, #372]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	08db      	lsrs	r3, r3, #3
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	4a5c      	ldr	r2, [pc, #368]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006f84:	fa22 f303 	lsr.w	r3, r2, r3
 8006f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f8a:	e010      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8006f8c:	4b58      	ldr	r3, [pc, #352]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f98:	d106      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8006f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006fa0:	d102      	bne.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
          frequency = CSI_VALUE;
 8006fa2:	4b55      	ldr	r3, [pc, #340]	@ (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fa6:	e002      	b.n	8006fae <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
          frequency = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006fac:	e3b7      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8006fae:	e3b6      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006fb0:	4b4f      	ldr	r3, [pc, #316]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fb6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006fba:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d103      	bne.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0x716>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8006fc2:	f7fe fb39 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8006fc6:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8006fc8:	e3a9      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL2R)
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006fd0:	d107      	bne.n	8006fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x72e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fd2:	f107 030c 	add.w	r3, r7, #12
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7ff fb00 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006fe0:	e39d      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006fe2:	4b43      	ldr	r3, [pc, #268]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d10d      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8006fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006ff4:	d109      	bne.n	800700a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	08db      	lsrs	r3, r3, #3
 8006ffc:	f003 0303 	and.w	r3, r3, #3
 8007000:	4a3c      	ldr	r2, [pc, #240]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007008:	e010      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800700a:	4b39      	ldr	r3, [pc, #228]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007012:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007016:	d106      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800701e:	d102      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
          frequency = CSI_VALUE;
 8007020:	4b35      	ldr	r3, [pc, #212]	@ (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007024:	e002      	b.n	800702c <HAL_RCCEx_GetPeriphCLKFreq+0x778>
          frequency = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800702a:	e378      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800702c:	e377      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800702e:	4b30      	ldr	r3, [pc, #192]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007030:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007034:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8007038:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800703a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703c:	2b00      	cmp	r3, #0
 800703e:	d103      	bne.n	8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007040:	f7fe fafa 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8007044:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007046:	e36a      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL2R)
 8007048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800704e:	d107      	bne.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007050:	f107 030c 	add.w	r3, r7, #12
 8007054:	4618      	mov	r0, r3
 8007056:	f7ff fac1 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800705e:	e35e      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007060:	4b23      	ldr	r3, [pc, #140]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b02      	cmp	r3, #2
 800706a:	d10d      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
 800706c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007072:	d109      	bne.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007074:	4b1e      	ldr	r3, [pc, #120]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	08db      	lsrs	r3, r3, #3
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	4a1d      	ldr	r2, [pc, #116]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007080:	fa22 f303 	lsr.w	r3, r2, r3
 8007084:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007086:	e34a      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800708c:	e347      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(I3C2)
      case RCC_PERIPHCLK_I3C2:
        /* Get the current I3C2 source */
        srcclk = __HAL_RCC_GET_I3C2_SOURCE();
 800708e:	4b18      	ldr	r3, [pc, #96]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007090:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007094:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8007098:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (srcclk == RCC_I3C2CLKSOURCE_PCLK3)
 800709a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709c:	2b00      	cmp	r3, #0
 800709e:	d103      	bne.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7f4>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80070a0:	f7fe faf6 	bl	8005690 <HAL_RCC_GetPCLK3Freq>
 80070a4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* Clock not enabled for I3C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80070a6:	e33a      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk ==  RCC_I3C2CLKSOURCE_PLL2R)
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80070ae:	d107      	bne.n	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b0:	f107 030c 	add.w	r3, r7, #12
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7ff fa91 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80070be:	e32e      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C2CLKSOURCE_HSI))
 80070c0:	4b0b      	ldr	r3, [pc, #44]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d10d      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 80070cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070d2:	d109      	bne.n	80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070d4:	4b06      	ldr	r3, [pc, #24]	@ (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	08db      	lsrs	r3, r3, #3
 80070da:	f003 0303 	and.w	r3, r3, #3
 80070de:	4a05      	ldr	r2, [pc, #20]	@ (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
 80070e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80070e6:	e31a      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 80070e8:	2300      	movs	r3, #0
 80070ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80070ec:	e317      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80070ee:	bf00      	nop
 80070f0:	44020c00 	.word	0x44020c00
 80070f4:	03d09000 	.word	0x03d09000
 80070f8:	003d0900 	.word	0x003d0900
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80070fc:	4b9b      	ldr	r3, [pc, #620]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80070fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007102:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007106:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800710e:	d044      	beq.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 8007110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007112:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8007116:	d879      	bhi.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800711e:	d02d      	beq.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007126:	d871      	bhi.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800712e:	d017      	beq.n	8007160 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 8007130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007136:	d869      	bhi.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
 8007138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713a:	2b00      	cmp	r3, #0
 800713c:	d004      	beq.n	8007148 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 800713e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007144:	d004      	beq.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8007146:	e061      	b.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x958>
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8007148:	f7fe faa2 	bl	8005690 <HAL_RCC_GetPCLK3Freq>
 800714c:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 800714e:	e060      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007150:	f107 030c 	add.w	r3, r7, #12
 8007154:	4618      	mov	r0, r3
 8007156:	f7ff fa41 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800715e:	e058      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
            break;
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007160:	4b82      	ldr	r3, [pc, #520]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007162:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b02      	cmp	r3, #2
 800716c:	d103      	bne.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
            {
              frequency = LSE_VALUE;
 800716e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007172:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8007174:	e04d      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800717a:	e04a      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800717c:	4b7b      	ldr	r3, [pc, #492]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800717e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007182:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800718a:	d103      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
            {
              frequency = LSI_VALUE;
 800718c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007190:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 8007192:	e03e      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
              frequency = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007198:	e03b      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800719a:	4b74      	ldr	r3, [pc, #464]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800719c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80071a0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80071a4:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80071a6:	4b71      	ldr	r3, [pc, #452]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d10c      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80071b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d109      	bne.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x918>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80071b8:	4b6c      	ldr	r3, [pc, #432]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	08db      	lsrs	r3, r3, #3
 80071be:	f003 0303 	and.w	r3, r3, #3
 80071c2:	4a6b      	ldr	r2, [pc, #428]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80071c4:	fa22 f303 	lsr.w	r3, r2, r3
 80071c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071ca:	e01e      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80071cc:	4b67      	ldr	r3, [pc, #412]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80071d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80071d8:	d106      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e0:	d102      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80071e2:	4b64      	ldr	r3, [pc, #400]	@ (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80071e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071e6:	e010      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071e8:	4b60      	ldr	r3, [pc, #384]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071f4:	d106      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80071fc:	d102      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x950>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80071fe:	4b5e      	ldr	r3, [pc, #376]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8007200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007202:	e002      	b.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8007208:	e003      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
 800720a:	e002      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
          }
          default :
          {
            frequency = 0U;
 800720c:	2300      	movs	r3, #0
 800720e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007210:	bf00      	nop
          }
        }
        break;
 8007212:	e284      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007214:	4b55      	ldr	r3, [pc, #340]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007216:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800721a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800721e:	62bb      	str	r3, [r7, #40]	@ 0x28

        switch (srcclk)
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007226:	d044      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fe>
 8007228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800722e:	d879      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007232:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007236:	d02d      	beq.n	8007294 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8007238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800723e:	d871      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007242:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007246:	d017      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800724e:	d869      	bhi.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800725c:	d004      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 800725e:	e061      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8007260:	f7fe f9ea 	bl	8005638 <HAL_RCC_GetPCLK1Freq>
 8007264:	62f8      	str	r0, [r7, #44]	@ 0x2c
            break;
 8007266:	e060      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007268:	f107 030c 	add.w	r3, r7, #12
 800726c:	4618      	mov	r0, r3
 800726e:	f7ff f9b5 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007276:	e058      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
            break;
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007278:	4b3c      	ldr	r3, [pc, #240]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800727a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b02      	cmp	r3, #2
 8007284:	d103      	bne.n	800728e <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            {
              frequency = LSE_VALUE;
 8007286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800728a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 800728c:	e04d      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 800728e:	2300      	movs	r3, #0
 8007290:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007292:	e04a      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8007294:	4b35      	ldr	r3, [pc, #212]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007296:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800729a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800729e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072a2:	d103      	bne.n	80072ac <HAL_RCCEx_GetPeriphCLKFreq+0x9f8>
            {
              frequency = LSI_VALUE;
 80072a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            else
            {
              frequency = 0;
            }
            break;
 80072aa:	e03e      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
              frequency = 0;
 80072ac:	2300      	movs	r3, #0
 80072ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80072b0:	e03b      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072b2:	4b2e      	ldr	r3, [pc, #184]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80072b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072b8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072be:	4b2b      	ldr	r3, [pc, #172]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f003 0302 	and.w	r3, r3, #2
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d10c      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
 80072ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d109      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80072d0:	4b26      	ldr	r3, [pc, #152]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	08db      	lsrs	r3, r3, #3
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	4a25      	ldr	r2, [pc, #148]	@ (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>)
 80072dc:	fa22 f303 	lsr.w	r3, r2, r3
 80072e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072e2:	e01e      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072e4:	4b21      	ldr	r3, [pc, #132]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80072ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072f0:	d106      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f8:	d102      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80072fa:	4b1e      	ldr	r3, [pc, #120]	@ (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>)
 80072fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072fe:	e010      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007300:	4b1a      	ldr	r3, [pc, #104]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007308:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800730c:	d106      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
 800730e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007310:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007314:	d102      	bne.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007316:	4b18      	ldr	r3, [pc, #96]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 8007318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800731a:	e002      	b.n	8007322 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800731c:	2300      	movs	r3, #0
 800731e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8007320:	e003      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8007322:	e002      	b.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
          }
          default :
          {
            frequency = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007328:	bf00      	nop
          }
        }
        break;
 800732a:	e1f8      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        break;
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800732c:	4b0f      	ldr	r3, [pc, #60]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800732e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007336:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007338:	4b0c      	ldr	r3, [pc, #48]	@ (800736c <HAL_RCCEx_GetPeriphCLKFreq+0xab8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007340:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007344:	d105      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
 8007346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007348:	2b00      	cmp	r3, #0
 800734a:	d102      	bne.n	8007352 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
        {
          frequency = HSE_VALUE;
 800734c:	4b0a      	ldr	r3, [pc, #40]	@ (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>)
 800734e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8007350:	e1e5      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007358:	d110      	bne.n	800737c <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800735a:	f107 0318 	add.w	r3, r7, #24
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe ffd0 	bl	8006304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007368:	e1d9      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800736a:	bf00      	nop
 800736c:	44020c00 	.word	0x44020c00
 8007370:	03d09000 	.word	0x03d09000
 8007374:	003d0900 	.word	0x003d0900
 8007378:	007a1200 	.word	0x007a1200
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800737c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007382:	d107      	bne.n	8007394 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007384:	f107 030c 	add.w	r3, r7, #12
 8007388:	4618      	mov	r0, r3
 800738a:	f7ff f927 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007392:	e1c4      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
          frequency = 0U;
 8007394:	2300      	movs	r3, #0
 8007396:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007398:	e1c1      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800739a:	4b9d      	ldr	r3, [pc, #628]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800739c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073a0:	f003 0307 	and.w	r3, r3, #7
 80073a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 80073a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d859      	bhi.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0xbac>
 80073ac:	a201      	add	r2, pc, #4	@ (adr r2, 80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073c9 	.word	0x080073c9
 80073b8:	080073d9 	.word	0x080073d9
 80073bc:	08007461 	.word	0x08007461
 80073c0:	080073e9 	.word	0x080073e9
 80073c4:	080073ef 	.word	0x080073ef
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073c8:	f107 0318 	add.w	r3, r7, #24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe ff99 	bl	8006304 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80073d6:	e046      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff f8fd 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80073e6:	e03e      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
            break;
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80073e8:	4b8a      	ldr	r3, [pc, #552]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80073ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80073ec:	e03b      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80073ee:	4b88      	ldr	r3, [pc, #544]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80073f8:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073fa:	4b85      	ldr	r3, [pc, #532]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b02      	cmp	r3, #2
 8007404:	d10c      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007408:	2b00      	cmp	r3, #0
 800740a:	d109      	bne.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800740c:	4b80      	ldr	r3, [pc, #512]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	08db      	lsrs	r3, r3, #3
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	4a80      	ldr	r2, [pc, #512]	@ (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007418:	fa22 f303 	lsr.w	r3, r2, r3
 800741c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800741e:	e01e      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007420:	4b7b      	ldr	r3, [pc, #492]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800742c:	d106      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007434:	d102      	bne.n	800743c <HAL_RCCEx_GetPeriphCLKFreq+0xb88>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007436:	4b79      	ldr	r3, [pc, #484]	@ (800761c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 8007438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800743a:	e010      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800743c:	4b74      	ldr	r3, [pc, #464]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007444:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007448:	d106      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
 800744a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007450:	d102      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0xba4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007452:	4b73      	ldr	r3, [pc, #460]	@ (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8007454:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007456:	e002      	b.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0xbaa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800745c:	e003      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
 800745e:	e002      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xbb2>
          }
          default:
          {
            frequency = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007464:	bf00      	nop
          }
        }
        break;
 8007466:	e15a      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007468:	4b69      	ldr	r3, [pc, #420]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800746a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800746e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007472:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	2b20      	cmp	r3, #32
 8007478:	d022      	beq.n	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0c>
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	2b20      	cmp	r3, #32
 800747e:	d858      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 8007480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007482:	2b18      	cmp	r3, #24
 8007484:	d019      	beq.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0xc06>
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	2b18      	cmp	r3, #24
 800748a:	d852      	bhi.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
 800748c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0xbe6>
 8007492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007494:	2b08      	cmp	r3, #8
 8007496:	d008      	beq.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
 8007498:	e04b      	b.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xc7e>
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800749a:	f107 0318 	add.w	r3, r7, #24
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe ff30 	bl	8006304 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80074a8:	e046      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074aa:	f107 030c 	add.w	r3, r7, #12
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff f894 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80074b8:	e03e      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
            break;
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80074ba:	4b56      	ldr	r3, [pc, #344]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80074bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 80074be:	e03b      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80074c0:	4b53      	ldr	r3, [pc, #332]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80074c6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80074ca:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80074cc:	4b50      	ldr	r3, [pc, #320]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d10c      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80074d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80074de:	4b4c      	ldr	r3, [pc, #304]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	08db      	lsrs	r3, r3, #3
 80074e4:	f003 0303 	and.w	r3, r3, #3
 80074e8:	4a4b      	ldr	r2, [pc, #300]	@ (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80074ea:	fa22 f303 	lsr.w	r3, r2, r3
 80074ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074f0:	e01e      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80074f2:	4b47      	ldr	r3, [pc, #284]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074fe:	d106      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007506:	d102      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xc5a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007508:	4b44      	ldr	r3, [pc, #272]	@ (800761c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 800750a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800750c:	e010      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800750e:	4b40      	ldr	r3, [pc, #256]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007516:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751a:	d106      	bne.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007522:	d102      	bne.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0xc76>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007524:	4b3e      	ldr	r3, [pc, #248]	@ (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 8007526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007528:	e002      	b.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0xc7c>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 800752e:	e003      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
 8007530:	e002      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
          }
          default:
          {
            frequency = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007536:	bf00      	nop
          }
        }
        break;
 8007538:	e0f1      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800753a:	4b35      	ldr	r3, [pc, #212]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800753c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007540:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007544:	62bb      	str	r3, [r7, #40]	@ 0x28
        switch (srcclk)
 8007546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007548:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800754c:	d023      	beq.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0xce2>
 800754e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007550:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007554:	d858      	bhi.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8007556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007558:	2bc0      	cmp	r3, #192	@ 0xc0
 800755a:	d019      	beq.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
 800755c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007560:	d852      	bhi.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0xcbc>
 8007568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800756a:	2b40      	cmp	r3, #64	@ 0x40
 800756c:	d008      	beq.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xccc>
 800756e:	e04b      	b.n	8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd54>
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007570:	f107 0318 	add.w	r3, r7, #24
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fec5 	bl	8006304 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800757e:	e046      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007580:	f107 030c 	add.w	r3, r7, #12
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff f829 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800758e:	e03e      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
            break;
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007590:	4b20      	ldr	r3, [pc, #128]	@ (8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007592:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8007594:	e03b      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007596:	4b1e      	ldr	r3, [pc, #120]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007598:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800759c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80075a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d10c      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80075ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d109      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80075b4:	4b16      	ldr	r3, [pc, #88]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	08db      	lsrs	r3, r3, #3
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	4a16      	ldr	r2, [pc, #88]	@ (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
 80075c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c6:	e01e      	b.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80075c8:	4b11      	ldr	r3, [pc, #68]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075d4:	d106      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075dc:	d102      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd30>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80075de:	4b0f      	ldr	r3, [pc, #60]	@ (800761c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>)
 80075e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075e2:	e010      	b.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80075e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075f0:	d106      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
 80075f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075f8:	d102      	bne.n	8007600 <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80075fa:	4b09      	ldr	r3, [pc, #36]	@ (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>)
 80075fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075fe:	e002      	b.n	8007606 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8007600:	2300      	movs	r3, #0
 8007602:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }

            break;
 8007604:	e003      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8007606:	e002      	b.n	800760e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
          }
          default:
          {
            frequency = 0;
 8007608:	2300      	movs	r3, #0
 800760a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 800760c:	bf00      	nop
          }
        }
        break;
 800760e:	e086      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007610:	44020c00 	.word	0x44020c00
 8007614:	00bb8000 	.word	0x00bb8000
 8007618:	03d09000 	.word	0x03d09000
 800761c:	003d0900 	.word	0x003d0900
 8007620:	007a1200 	.word	0x007a1200
        break;
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007624:	4b40      	ldr	r3, [pc, #256]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007626:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800762a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800762e:	62bb      	str	r3, [r7, #40]	@ 0x28

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007630:	4b3d      	ldr	r3, [pc, #244]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007638:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800763c:	d105      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
 800763e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007640:	2b00      	cmp	r3, #0
 8007642:	d102      	bne.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0xd96>
        {
          frequency = HSI48_VALUE;
 8007644:	4b39      	ldr	r3, [pc, #228]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 8007646:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007648:	e031      	b.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800764a:	4b37      	ldr	r3, [pc, #220]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007656:	d10a      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
 8007658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765a:	2b10      	cmp	r3, #16
 800765c:	d107      	bne.n	800766e <HAL_RCCEx_GetPeriphCLKFreq+0xdba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800765e:	f107 0318 	add.w	r3, r7, #24
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fe4e 	bl	8006304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800766c:	e01f      	b.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800766e:	4b2e      	ldr	r3, [pc, #184]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 8007670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d106      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
 800767c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800767e:	2b20      	cmp	r3, #32
 8007680:	d103      	bne.n	800768a <HAL_RCCEx_GetPeriphCLKFreq+0xdd6>
        {
          frequency = LSE_VALUE;
 8007682:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007688:	e011      	b.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800768a:	4b27      	ldr	r3, [pc, #156]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 800768c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007698:	d106      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
 800769a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800769c:	2b30      	cmp	r3, #48	@ 0x30
 800769e:	d103      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf4>
        {
          frequency = LSI_VALUE;
 80076a0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80076a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076a6:	e002      	b.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        break;
 80076ac:	e037      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80076ae:	e036      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80076b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80076b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076b6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80076bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076be:	2b10      	cmp	r3, #16
 80076c0:	d107      	bne.n	80076d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076c2:	f107 0318 	add.w	r3, r7, #24
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fe1c 	bl	8006304 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break;
 80076d0:	e025      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
          frequency = pll3_clocks.PLL3_Q_Frequency;
        }
#else
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL2Q))
 80076d2:	4b15      	ldr	r3, [pc, #84]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80076da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076de:	d10a      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
 80076e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d107      	bne.n	80076f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076e6:	f107 030c 	add.w	r3, r7, #12
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fe ff76 	bl	80065dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076f4:	e00f      	b.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80076f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007728 <HAL_RCCEx_GetPeriphCLKFreq+0xe74>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80076fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007702:	d105      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
 8007704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007706:	2b30      	cmp	r3, #48	@ 0x30
 8007708:	d102      	bne.n	8007710 <HAL_RCCEx_GetPeriphCLKFreq+0xe5c>
        {
          frequency = HSI48_VALUE;
 800770a:	4b08      	ldr	r3, [pc, #32]	@ (800772c <HAL_RCCEx_GetPeriphCLKFreq+0xe78>)
 800770c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800770e:	e002      	b.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0xe62>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        break;
 8007714:	e003      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007716:	e002      	b.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>


      default:
        frequency = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800771c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800771e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007720:	4618      	mov	r0, r3
 8007722:	3730      	adds	r7, #48	@ 0x30
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	44020c00 	.word	0x44020c00
 800772c:	02dc6c00 	.word	0x02dc6c00

08007730 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8007738:	4b48      	ldr	r3, [pc, #288]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a47      	ldr	r2, [pc, #284]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 800773e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007742:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007744:	f7fa fc20 	bl	8001f88 <HAL_GetTick>
 8007748:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800774a:	e008      	b.n	800775e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800774c:	f7fa fc1c 	bl	8001f88 <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	2b02      	cmp	r3, #2
 8007758:	d901      	bls.n	800775e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800775a:	2303      	movs	r3, #3
 800775c:	e07a      	b.n	8007854 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800775e:	4b3f      	ldr	r3, [pc, #252]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1f0      	bne.n	800774c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800776a:	4b3c      	ldr	r3, [pc, #240]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 800776c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	687a      	ldr	r2, [r7, #4]
 8007778:	6811      	ldr	r1, [r2, #0]
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	6852      	ldr	r2, [r2, #4]
 800777e:	0212      	lsls	r2, r2, #8
 8007780:	430a      	orrs	r2, r1
 8007782:	4936      	ldr	r1, [pc, #216]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 8007784:	4313      	orrs	r3, r2
 8007786:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	3b01      	subs	r3, #1
 800778e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	3b01      	subs	r3, #1
 8007798:	025b      	lsls	r3, r3, #9
 800779a:	b29b      	uxth	r3, r3
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	041b      	lsls	r3, r3, #16
 80077a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80077aa:	431a      	orrs	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	3b01      	subs	r3, #1
 80077b2:	061b      	lsls	r3, r3, #24
 80077b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80077b8:	4928      	ldr	r1, [pc, #160]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80077be:	4b27      	ldr	r3, [pc, #156]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077c2:	f023 020c 	bic.w	r2, r3, #12
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	699b      	ldr	r3, [r3, #24]
 80077ca:	4924      	ldr	r1, [pc, #144]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80077d0:	4b22      	ldr	r3, [pc, #136]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	f023 0220 	bic.w	r2, r3, #32
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	69db      	ldr	r3, [r3, #28]
 80077dc:	491f      	ldr	r1, [pc, #124]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80077e2:	4b1e      	ldr	r3, [pc, #120]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ea:	491c      	ldr	r1, [pc, #112]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80077f0:	4b1a      	ldr	r3, [pc, #104]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f4:	4a19      	ldr	r2, [pc, #100]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077f6:	f023 0310 	bic.w	r3, r3, #16
 80077fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80077fc:	4b17      	ldr	r3, [pc, #92]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 80077fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007800:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007804:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	6a12      	ldr	r2, [r2, #32]
 800780c:	00d2      	lsls	r2, r2, #3
 800780e:	4913      	ldr	r1, [pc, #76]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 8007810:	4313      	orrs	r3, r2
 8007812:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8007814:	4b11      	ldr	r3, [pc, #68]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 8007816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007818:	4a10      	ldr	r2, [pc, #64]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 800781a:	f043 0310 	orr.w	r3, r3, #16
 800781e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007820:	4b0e      	ldr	r3, [pc, #56]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a0d      	ldr	r2, [pc, #52]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 8007826:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800782a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800782c:	f7fa fbac 	bl	8001f88 <HAL_GetTick>
 8007830:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007832:	e008      	b.n	8007846 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007834:	f7fa fba8 	bl	8001f88 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	2b02      	cmp	r3, #2
 8007840:	d901      	bls.n	8007846 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8007842:	2303      	movs	r3, #3
 8007844:	e006      	b.n	8007854 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007846:	4b05      	ldr	r3, [pc, #20]	@ (800785c <RCCEx_PLL2_Config+0x12c>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d0f0      	beq.n	8007834 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8007852:	2300      	movs	r3, #0

}
 8007854:	4618      	mov	r0, r3
 8007856:	3710      	adds	r7, #16
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	44020c00 	.word	0x44020c00

08007860 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e0e9      	b.n	8007a46 <HAL_SPI_Init+0x1e6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a74      	ldr	r2, [pc, #464]	@ (8007a50 <HAL_SPI_Init+0x1f0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d105      	bne.n	800788e <HAL_SPI_Init+0x2e>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2b0f      	cmp	r3, #15
 8007888:	d901      	bls.n	800788e <HAL_SPI_Init+0x2e>
  {
    return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e0db      	b.n	8007a46 <HAL_SPI_Init+0x1e6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f8e6 	bl	8007a60 <SPI_GetPacketSize>
 8007894:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a6d      	ldr	r2, [pc, #436]	@ (8007a50 <HAL_SPI_Init+0x1f0>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d102      	bne.n	80078a6 <HAL_SPI_Init+0x46>
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b08      	cmp	r3, #8
 80078a4:	d811      	bhi.n	80078ca <HAL_SPI_Init+0x6a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80078aa:	4a6a      	ldr	r2, [pc, #424]	@ (8007a54 <HAL_SPI_Init+0x1f4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_SPI_Init+0x64>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a68      	ldr	r2, [pc, #416]	@ (8007a58 <HAL_SPI_Init+0x1f8>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_SPI_Init+0x64>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a67      	ldr	r2, [pc, #412]	@ (8007a5c <HAL_SPI_Init+0x1fc>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d104      	bne.n	80078ce <HAL_SPI_Init+0x6e>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b10      	cmp	r3, #16
 80078c8:	d901      	bls.n	80078ce <HAL_SPI_Init+0x6e>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e0bb      	b.n	8007a46 <HAL_SPI_Init+0x1e6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <HAL_SPI_Init+0x88>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7f9 ff82 	bl	80017ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0201 	bic.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800790a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007914:	d119      	bne.n	800794a <HAL_SPI_Init+0xea>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800791e:	d103      	bne.n	8007928 <HAL_SPI_Init+0xc8>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <HAL_SPI_Init+0xda>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10c      	bne.n	800794a <HAL_SPI_Init+0xea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007934:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007938:	d107      	bne.n	800794a <HAL_SPI_Init+0xea>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007948:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00f      	beq.n	8007976 <HAL_SPI_Init+0x116>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b06      	cmp	r3, #6
 800795c:	d90b      	bls.n	8007976 <HAL_SPI_Init+0x116>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e007      	b.n	8007986 <HAL_SPI_Init+0x126>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007984:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	69da      	ldr	r2, [r3, #28]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798e:	431a      	orrs	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007998:	ea42 0103 	orr.w	r1, r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	431a      	orrs	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	695b      	ldr	r3, [r3, #20]
 80079c8:	431a      	orrs	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	431a      	orrs	r2, r3
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079da:	431a      	orrs	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	431a      	orrs	r2, r3
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e6:	431a      	orrs	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079f2:	ea42 0103 	orr.w	r1, r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00a      	beq.n	8007a34 <HAL_SPI_Init+0x1d4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	deaddead 	.word	0xdeaddead
 8007a54:	40013000 	.word	0x40013000
 8007a58:	40003800 	.word	0x40003800
 8007a5c:	40003c00 	.word	0x40003c00

08007a60 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6c:	095b      	lsrs	r3, r3, #5
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	3301      	adds	r3, #1
 8007a78:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	3307      	adds	r3, #7
 8007a7e:	08db      	lsrs	r3, r3, #3
 8007a80:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	fb02 f303 	mul.w	r3, r2, r3
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3714      	adds	r7, #20
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b082      	sub	sp, #8
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e049      	b.n	8007b3c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d106      	bne.n	8007ac2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fa f81d 	bl	8001afc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	f000 f949 	bl	8007d6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2201      	movs	r2, #1
 8007b26:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b3a:	2300      	movs	r3, #0
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e0ff      	b.n	8007d62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b14      	cmp	r3, #20
 8007b6e:	f200 80f0 	bhi.w	8007d52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b72:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007d53 	.word	0x08007d53
 8007b80:	08007d53 	.word	0x08007d53
 8007b84:	08007d53 	.word	0x08007d53
 8007b88:	08007c0d 	.word	0x08007c0d
 8007b8c:	08007d53 	.word	0x08007d53
 8007b90:	08007d53 	.word	0x08007d53
 8007b94:	08007d53 	.word	0x08007d53
 8007b98:	08007c4f 	.word	0x08007c4f
 8007b9c:	08007d53 	.word	0x08007d53
 8007ba0:	08007d53 	.word	0x08007d53
 8007ba4:	08007d53 	.word	0x08007d53
 8007ba8:	08007c8f 	.word	0x08007c8f
 8007bac:	08007d53 	.word	0x08007d53
 8007bb0:	08007d53 	.word	0x08007d53
 8007bb4:	08007d53 	.word	0x08007d53
 8007bb8:	08007cd1 	.word	0x08007cd1
 8007bbc:	08007d53 	.word	0x08007d53
 8007bc0:	08007d53 	.word	0x08007d53
 8007bc4:	08007d53 	.word	0x08007d53
 8007bc8:	08007d11 	.word	0x08007d11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68b9      	ldr	r1, [r7, #8]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 f930 	bl	8007e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0208 	orr.w	r2, r2, #8
 8007be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	699a      	ldr	r2, [r3, #24]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0204 	bic.w	r2, r2, #4
 8007bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6999      	ldr	r1, [r3, #24]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	691a      	ldr	r2, [r3, #16]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	619a      	str	r2, [r3, #24]
      break;
 8007c0a:	e0a5      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f978 	bl	8007f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6999      	ldr	r1, [r3, #24]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	021a      	lsls	r2, r3, #8
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	619a      	str	r2, [r3, #24]
      break;
 8007c4c:	e084      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 f9c5 	bl	8007fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69da      	ldr	r2, [r3, #28]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0208 	orr.w	r2, r2, #8
 8007c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69da      	ldr	r2, [r3, #28]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0204 	bic.w	r2, r2, #4
 8007c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69d9      	ldr	r1, [r3, #28]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	691a      	ldr	r2, [r3, #16]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	61da      	str	r2, [r3, #28]
      break;
 8007c8c:	e064      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 fa11 	bl	80080bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69da      	ldr	r2, [r3, #28]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69d9      	ldr	r1, [r3, #28]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	021a      	lsls	r2, r3, #8
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	61da      	str	r2, [r3, #28]
      break;
 8007cce:	e043      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fa5e 	bl	8008198 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0208 	orr.w	r2, r2, #8
 8007cea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0204 	bic.w	r2, r2, #4
 8007cfa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	691a      	ldr	r2, [r3, #16]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d0e:	e023      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68b9      	ldr	r1, [r7, #8]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fa8a 	bl	8008230 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d2a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d3a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	021a      	lsls	r2, r3, #8
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007d50:	e002      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	75fb      	strb	r3, [r7, #23]
      break;
 8007d56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop

08007d6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8007e30 <TIM_Base_SetConfig+0xc4>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d007      	beq.n	8007d94 <TIM_Base_SetConfig+0x28>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d8a:	d003      	beq.n	8007d94 <TIM_Base_SetConfig+0x28>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a29      	ldr	r2, [pc, #164]	@ (8007e34 <TIM_Base_SetConfig+0xc8>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d108      	bne.n	8007da6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a21      	ldr	r2, [pc, #132]	@ (8007e30 <TIM_Base_SetConfig+0xc4>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d007      	beq.n	8007dbe <TIM_Base_SetConfig+0x52>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db4:	d003      	beq.n	8007dbe <TIM_Base_SetConfig+0x52>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a1e      	ldr	r2, [pc, #120]	@ (8007e34 <TIM_Base_SetConfig+0xc8>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d108      	bne.n	8007dd0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	68db      	ldr	r3, [r3, #12]
 8007dca:	68fa      	ldr	r2, [r7, #12]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	695b      	ldr	r3, [r3, #20]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a0e      	ldr	r2, [pc, #56]	@ (8007e30 <TIM_Base_SetConfig+0xc4>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d103      	bne.n	8007e04 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	691a      	ldr	r2, [r3, #16]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	f003 0301 	and.w	r3, r3, #1
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d105      	bne.n	8007e22 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f023 0201 	bic.w	r2, r3, #1
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	611a      	str	r2, [r3, #16]
  }
}
 8007e22:	bf00      	nop
 8007e24:	3714      	adds	r7, #20
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr
 8007e2e:	bf00      	nop
 8007e30:	40012c00 	.word	0x40012c00
 8007e34:	40000400 	.word	0x40000400

08007e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6a1b      	ldr	r3, [r3, #32]
 8007e4c:	f023 0201 	bic.w	r2, r3, #1
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f023 0303 	bic.w	r3, r3, #3
 8007e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68fa      	ldr	r2, [r7, #12]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f023 0302 	bic.w	r3, r3, #2
 8007e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a1c      	ldr	r2, [pc, #112]	@ (8007f04 <TIM_OC1_SetConfig+0xcc>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d10c      	bne.n	8007eb2 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f023 0308 	bic.w	r3, r3, #8
 8007e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f023 0304 	bic.w	r3, r3, #4
 8007eb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a13      	ldr	r2, [pc, #76]	@ (8007f04 <TIM_OC1_SetConfig+0xcc>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d111      	bne.n	8007ede <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ec0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	693a      	ldr	r2, [r7, #16]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	693a      	ldr	r2, [r7, #16]
 8007ee2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	685a      	ldr	r2, [r3, #4]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	621a      	str	r2, [r3, #32]
}
 8007ef8:	bf00      	nop
 8007efa:	371c      	adds	r7, #28
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	40012c00 	.word	0x40012c00

08007f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	f023 0210 	bic.w	r2, r3, #16
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	021b      	lsls	r3, r3, #8
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	f023 0320 	bic.w	r3, r3, #32
 8007f56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	011b      	lsls	r3, r3, #4
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a1e      	ldr	r2, [pc, #120]	@ (8007fe0 <TIM_OC2_SetConfig+0xd8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d10d      	bne.n	8007f88 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	697a      	ldr	r2, [r7, #20]
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a15      	ldr	r2, [pc, #84]	@ (8007fe0 <TIM_OC2_SetConfig+0xd8>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d113      	bne.n	8007fb8 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	695b      	ldr	r3, [r3, #20]
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	693a      	ldr	r2, [r7, #16]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	693a      	ldr	r2, [r7, #16]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	693a      	ldr	r2, [r7, #16]
 8007fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68fa      	ldr	r2, [r7, #12]
 8007fc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	621a      	str	r2, [r3, #32]
}
 8007fd2:	bf00      	nop
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40012c00 	.word	0x40012c00

08007fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0303 	bic.w	r3, r3, #3
 800801e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	021b      	lsls	r3, r3, #8
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	4313      	orrs	r3, r2
 800803c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a1d      	ldr	r2, [pc, #116]	@ (80080b8 <TIM_OC3_SetConfig+0xd4>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d10d      	bne.n	8008062 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800804c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	4313      	orrs	r3, r2
 8008058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	4a14      	ldr	r2, [pc, #80]	@ (80080b8 <TIM_OC3_SetConfig+0xd4>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d113      	bne.n	8008092 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	695b      	ldr	r3, [r3, #20]
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	4313      	orrs	r3, r2
 8008084:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	011b      	lsls	r3, r3, #4
 800808c:	693a      	ldr	r2, [r7, #16]
 800808e:	4313      	orrs	r3, r2
 8008090:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	621a      	str	r2, [r3, #32]
}
 80080ac:	bf00      	nop
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	40012c00 	.word	0x40012c00

080080bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	021b      	lsls	r3, r3, #8
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	4313      	orrs	r3, r2
 8008102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800810a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	031b      	lsls	r3, r3, #12
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a1e      	ldr	r2, [pc, #120]	@ (8008194 <TIM_OC4_SetConfig+0xd8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d10d      	bne.n	800813c <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	031b      	lsls	r3, r3, #12
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	4313      	orrs	r3, r2
 8008132:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800813a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a15      	ldr	r2, [pc, #84]	@ (8008194 <TIM_OC4_SetConfig+0xd8>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d113      	bne.n	800816c <TIM_OC4_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800814a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008152:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	019b      	lsls	r3, r3, #6
 800815a:	693a      	ldr	r2, [r7, #16]
 800815c:	4313      	orrs	r3, r2
 800815e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	019b      	lsls	r3, r3, #6
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	621a      	str	r2, [r3, #32]
}
 8008186:	bf00      	nop
 8008188:	371c      	adds	r7, #28
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	40012c00 	.word	0x40012c00

08008198 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008198:	b480      	push	{r7}
 800819a:	b087      	sub	sp, #28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6a1b      	ldr	r3, [r3, #32]
 80081ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80081dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	041b      	lsls	r3, r3, #16
 80081e4:	693a      	ldr	r2, [r7, #16]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a0f      	ldr	r2, [pc, #60]	@ (800822c <TIM_OC5_SetConfig+0x94>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d109      	bne.n	8008206 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081f8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	021b      	lsls	r3, r3, #8
 8008200:	697a      	ldr	r2, [r7, #20]
 8008202:	4313      	orrs	r3, r2
 8008204:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	621a      	str	r2, [r3, #32]
}
 8008220:	bf00      	nop
 8008222:	371c      	adds	r7, #28
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	40012c00 	.word	0x40012c00

08008230 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800825e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	4313      	orrs	r3, r2
 800826e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008276:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	051b      	lsls	r3, r3, #20
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4313      	orrs	r3, r2
 8008282:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a10      	ldr	r2, [pc, #64]	@ (80082c8 <TIM_OC6_SetConfig+0x98>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d109      	bne.n	80082a0 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008292:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	029b      	lsls	r3, r3, #10
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	4313      	orrs	r3, r2
 800829e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	685a      	ldr	r2, [r3, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	621a      	str	r2, [r3, #32]
}
 80082ba:	bf00      	nop
 80082bc:	371c      	adds	r7, #28
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	40012c00 	.word	0x40012c00

080082cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d101      	bne.n	80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80082e0:	2302      	movs	r3, #2
 80082e2:	e051      	b.n	8008388 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2202      	movs	r2, #2
 80082f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	685b      	ldr	r3, [r3, #4]
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a22      	ldr	r2, [pc, #136]	@ (8008394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d108      	bne.n	8008320 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008314:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	4313      	orrs	r3, r2
 800831e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4313      	orrs	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a14      	ldr	r2, [pc, #80]	@ (8008394 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d009      	beq.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008350:	d004      	beq.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a10      	ldr	r2, [pc, #64]	@ (8008398 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d10c      	bne.n	8008376 <HAL_TIMEx_MasterConfigSynchronization+0xaa>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	4313      	orrs	r3, r2
 800836c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3714      	adds	r7, #20
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	40012c00 	.word	0x40012c00
 8008398:	40000400 	.word	0x40000400

0800839c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d101      	bne.n	80083ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e042      	b.n	8008434 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d106      	bne.n	80083c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7f9 fc31 	bl	8001c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2224      	movs	r2, #36	@ 0x24
 80083ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f022 0201 	bic.w	r2, r2, #1
 80083dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 f9a6 	bl	8008738 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f000 f825 	bl	800843c <UART_SetConfig>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d101      	bne.n	80083fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e01b      	b.n	8008434 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800840a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	689a      	ldr	r2, [r3, #8]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800841a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f042 0201 	orr.w	r2, r2, #1
 800842a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fa25 	bl	800887c <UART_CheckIdleState>
 8008432:	4603      	mov	r3, r0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800843c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008440:	b094      	sub	sp, #80	@ 0x50
 8008442:	af00      	add	r7, sp, #0
 8008444:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800844c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844e:	689a      	ldr	r2, [r3, #8]
 8008450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	431a      	orrs	r2, r3
 8008456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	431a      	orrs	r2, r3
 800845c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845e:	69db      	ldr	r3, [r3, #28]
 8008460:	4313      	orrs	r3, r2
 8008462:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	498a      	ldr	r1, [pc, #552]	@ (8008694 <UART_SetConfig+0x258>)
 800846c:	4019      	ands	r1, r3
 800846e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008470:	681a      	ldr	r2, [r3, #0]
 8008472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008474:	430b      	orrs	r3, r1
 8008476:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008484:	68d9      	ldr	r1, [r3, #12]
 8008486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	ea40 0301 	orr.w	r3, r0, r1
 800848e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4b7f      	ldr	r3, [pc, #508]	@ (8008698 <UART_SetConfig+0x25c>)
 800849c:	429a      	cmp	r2, r3
 800849e:	d004      	beq.n	80084aa <UART_SetConfig+0x6e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084a2:	6a1a      	ldr	r2, [r3, #32]
 80084a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084a6:	4313      	orrs	r3, r2
 80084a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 80084b4:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 80084b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084be:	430b      	orrs	r3, r1
 80084c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c8:	f023 000f 	bic.w	r0, r3, #15
 80084cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ce:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80084d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	ea40 0301 	orr.w	r3, r0, r1
 80084d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80084da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	4b6f      	ldr	r3, [pc, #444]	@ (800869c <UART_SetConfig+0x260>)
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d102      	bne.n	80084ea <UART_SetConfig+0xae>
 80084e4:	2301      	movs	r3, #1
 80084e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084e8:	e01a      	b.n	8008520 <UART_SetConfig+0xe4>
 80084ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4b6c      	ldr	r3, [pc, #432]	@ (80086a0 <UART_SetConfig+0x264>)
 80084f0:	429a      	cmp	r2, r3
 80084f2:	d102      	bne.n	80084fa <UART_SetConfig+0xbe>
 80084f4:	2302      	movs	r3, #2
 80084f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084f8:	e012      	b.n	8008520 <UART_SetConfig+0xe4>
 80084fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	4b69      	ldr	r3, [pc, #420]	@ (80086a4 <UART_SetConfig+0x268>)
 8008500:	429a      	cmp	r2, r3
 8008502:	d102      	bne.n	800850a <UART_SetConfig+0xce>
 8008504:	2304      	movs	r3, #4
 8008506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008508:	e00a      	b.n	8008520 <UART_SetConfig+0xe4>
 800850a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850c:	681a      	ldr	r2, [r3, #0]
 800850e:	4b62      	ldr	r3, [pc, #392]	@ (8008698 <UART_SetConfig+0x25c>)
 8008510:	429a      	cmp	r2, r3
 8008512:	d103      	bne.n	800851c <UART_SetConfig+0xe0>
 8008514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008518:	64bb      	str	r3, [r7, #72]	@ 0x48
 800851a:	e001      	b.n	8008520 <UART_SetConfig+0xe4>
 800851c:	2300      	movs	r3, #0
 800851e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008522:	681a      	ldr	r2, [r3, #0]
 8008524:	4b5c      	ldr	r3, [pc, #368]	@ (8008698 <UART_SetConfig+0x25c>)
 8008526:	429a      	cmp	r2, r3
 8008528:	d171      	bne.n	800860e <UART_SetConfig+0x1d2>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800852a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800852c:	2200      	movs	r2, #0
 800852e:	623b      	str	r3, [r7, #32]
 8008530:	627a      	str	r2, [r7, #36]	@ 0x24
 8008532:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008536:	f7fe f9bd 	bl	80068b4 <HAL_RCCEx_GetPeriphCLKFreq>
 800853a:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800853c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 80e2 	beq.w	8008708 <UART_SetConfig+0x2cc>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008548:	4a57      	ldr	r2, [pc, #348]	@ (80086a8 <UART_SetConfig+0x26c>)
 800854a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800854e:	461a      	mov	r2, r3
 8008550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008552:	fbb3 f3f2 	udiv	r3, r3, r2
 8008556:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	4613      	mov	r3, r2
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	4413      	add	r3, r2
 8008562:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008564:	429a      	cmp	r2, r3
 8008566:	d305      	bcc.n	8008574 <UART_SetConfig+0x138>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800856e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <UART_SetConfig+0x140>
      {
        ret = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800857a:	e0c5      	b.n	8008708 <UART_SetConfig+0x2cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800857c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800857e:	2200      	movs	r2, #0
 8008580:	61bb      	str	r3, [r7, #24]
 8008582:	61fa      	str	r2, [r7, #28]
 8008584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008588:	4a47      	ldr	r2, [pc, #284]	@ (80086a8 <UART_SetConfig+0x26c>)
 800858a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800858e:	b29b      	uxth	r3, r3
 8008590:	2200      	movs	r2, #0
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	617a      	str	r2, [r7, #20]
 8008596:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800859a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800859e:	f7f8 f9b1 	bl	8000904 <__aeabi_uldivmod>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4610      	mov	r0, r2
 80085a8:	4619      	mov	r1, r3
 80085aa:	f04f 0200 	mov.w	r2, #0
 80085ae:	f04f 0300 	mov.w	r3, #0
 80085b2:	020b      	lsls	r3, r1, #8
 80085b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085b8:	0202      	lsls	r2, r0, #8
 80085ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085bc:	6849      	ldr	r1, [r1, #4]
 80085be:	0849      	lsrs	r1, r1, #1
 80085c0:	2000      	movs	r0, #0
 80085c2:	460c      	mov	r4, r1
 80085c4:	4605      	mov	r5, r0
 80085c6:	eb12 0804 	adds.w	r8, r2, r4
 80085ca:	eb43 0905 	adc.w	r9, r3, r5
 80085ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2200      	movs	r2, #0
 80085d4:	60bb      	str	r3, [r7, #8]
 80085d6:	60fa      	str	r2, [r7, #12]
 80085d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80085dc:	4640      	mov	r0, r8
 80085de:	4649      	mov	r1, r9
 80085e0:	f7f8 f990 	bl	8000904 <__aeabi_uldivmod>
 80085e4:	4602      	mov	r2, r0
 80085e6:	460b      	mov	r3, r1
 80085e8:	4613      	mov	r3, r2
 80085ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80085ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80085f2:	d308      	bcc.n	8008606 <UART_SetConfig+0x1ca>
 80085f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085fa:	d204      	bcs.n	8008606 <UART_SetConfig+0x1ca>
        {
          huart->Instance->BRR = usartdiv;
 80085fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008602:	60da      	str	r2, [r3, #12]
 8008604:	e080      	b.n	8008708 <UART_SetConfig+0x2cc>
        }
        else
        {
          ret = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800860c:	e07c      	b.n	8008708 <UART_SetConfig+0x2cc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800860e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008616:	d149      	bne.n	80086ac <UART_SetConfig+0x270>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008618:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800861a:	2200      	movs	r2, #0
 800861c:	603b      	str	r3, [r7, #0]
 800861e:	607a      	str	r2, [r7, #4]
 8008620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008624:	f7fe f946 	bl	80068b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008628:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800862a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800862c:	2b00      	cmp	r3, #0
 800862e:	d06b      	beq.n	8008708 <UART_SetConfig+0x2cc>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008634:	4a1c      	ldr	r2, [pc, #112]	@ (80086a8 <UART_SetConfig+0x26c>)
 8008636:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800863a:	461a      	mov	r2, r3
 800863c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800863e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008642:	005a      	lsls	r2, r3, #1
 8008644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	085b      	lsrs	r3, r3, #1
 800864a:	441a      	add	r2, r3
 800864c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	fbb2 f3f3 	udiv	r3, r2, r3
 8008654:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008658:	2b0f      	cmp	r3, #15
 800865a:	d916      	bls.n	800868a <UART_SetConfig+0x24e>
 800865c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008662:	d212      	bcs.n	800868a <UART_SetConfig+0x24e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008666:	b29b      	uxth	r3, r3
 8008668:	f023 030f 	bic.w	r3, r3, #15
 800866c:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800866e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008670:	085b      	lsrs	r3, r3, #1
 8008672:	b29b      	uxth	r3, r3
 8008674:	f003 0307 	and.w	r3, r3, #7
 8008678:	b29a      	uxth	r2, r3
 800867a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800867c:	4313      	orrs	r3, r2
 800867e:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8008686:	60da      	str	r2, [r3, #12]
 8008688:	e03e      	b.n	8008708 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008690:	e03a      	b.n	8008708 <UART_SetConfig+0x2cc>
 8008692:	bf00      	nop
 8008694:	cfff69f3 	.word	0xcfff69f3
 8008698:	44002400 	.word	0x44002400
 800869c:	40013800 	.word	0x40013800
 80086a0:	40004400 	.word	0x40004400
 80086a4:	40004800 	.word	0x40004800
 80086a8:	08008f48 	.word	0x08008f48
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80086ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086ae:	2200      	movs	r2, #0
 80086b0:	469a      	mov	sl, r3
 80086b2:	4693      	mov	fp, r2
 80086b4:	4650      	mov	r0, sl
 80086b6:	4659      	mov	r1, fp
 80086b8:	f7fe f8fc 	bl	80068b4 <HAL_RCCEx_GetPeriphCLKFreq>
 80086bc:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 80086be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d021      	beq.n	8008708 <UART_SetConfig+0x2cc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008734 <UART_SetConfig+0x2f8>)
 80086ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ce:	461a      	mov	r2, r3
 80086d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80086d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	085b      	lsrs	r3, r3, #1
 80086dc:	441a      	add	r2, r3
 80086de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ea:	2b0f      	cmp	r3, #15
 80086ec:	d909      	bls.n	8008702 <UART_SetConfig+0x2c6>
 80086ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086f4:	d205      	bcs.n	8008702 <UART_SetConfig+0x2c6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60da      	str	r2, [r3, #12]
 8008700:	e002      	b.n	8008708 <UART_SetConfig+0x2cc>
      }
      else
      {
        ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800870a:	2201      	movs	r2, #1
 800870c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008712:	2201      	movs	r2, #1
 8008714:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871a:	2200      	movs	r2, #0
 800871c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800871e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008720:	2200      	movs	r2, #0
 8008722:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008724:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8008728:	4618      	mov	r0, r3
 800872a:	3750      	adds	r7, #80	@ 0x50
 800872c:	46bd      	mov	sp, r7
 800872e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008732:	bf00      	nop
 8008734:	08008f48 	.word	0x08008f48

08008738 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008744:	f003 0308 	and.w	r3, r3, #8
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	685b      	ldr	r3, [r3, #4]
 8008752:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008788:	f003 0302 	and.w	r3, r3, #2
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00a      	beq.n	80087a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087aa:	f003 0304 	and.w	r3, r3, #4
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00a      	beq.n	80087c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	430a      	orrs	r2, r1
 80087c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087cc:	f003 0310 	and.w	r3, r3, #16
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	430a      	orrs	r2, r1
 80087e8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00a      	beq.n	800880c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	430a      	orrs	r2, r1
 800880a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01a      	beq.n	800884e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	430a      	orrs	r2, r1
 800882c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008832:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008836:	d10a      	bne.n	800884e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	430a      	orrs	r2, r1
 800884c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	430a      	orrs	r2, r1
 800886e:	605a      	str	r2, [r3, #4]
  }
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b098      	sub	sp, #96	@ 0x60
 8008880:	af02      	add	r7, sp, #8
 8008882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800888c:	f7f9 fb7c 	bl	8001f88 <HAL_GetTick>
 8008890:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 0308 	and.w	r3, r3, #8
 800889c:	2b08      	cmp	r3, #8
 800889e:	d12f      	bne.n	8008900 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088a8:	2200      	movs	r2, #0
 80088aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 f88e 	bl	80089d0 <UART_WaitOnFlagUntilTimeout>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d022      	beq.n	8008900 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80088da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80088de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80088e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e6      	bne.n	80088ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2220      	movs	r2, #32
 80088f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e063      	b.n	80089c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0304 	and.w	r3, r3, #4
 800890a:	2b04      	cmp	r3, #4
 800890c:	d149      	bne.n	80089a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800890e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008912:	9300      	str	r3, [sp, #0]
 8008914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008916:	2200      	movs	r2, #0
 8008918:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f857 	bl	80089d0 <UART_WaitOnFlagUntilTimeout>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d03c      	beq.n	80089a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008930:	e853 3f00 	ldrex	r3, [r3]
 8008934:	623b      	str	r3, [r7, #32]
   return(result);
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800893c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	461a      	mov	r2, r3
 8008944:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008946:	633b      	str	r3, [r7, #48]	@ 0x30
 8008948:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800894a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800894c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800894e:	e841 2300 	strex	r3, r2, [r1]
 8008952:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1e6      	bne.n	8008928 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	3308      	adds	r3, #8
 8008960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	e853 3f00 	ldrex	r3, [r3]
 8008968:	60fb      	str	r3, [r7, #12]
   return(result);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f023 0301 	bic.w	r3, r3, #1
 8008970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	3308      	adds	r3, #8
 8008978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800897a:	61fa      	str	r2, [r7, #28]
 800897c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897e:	69b9      	ldr	r1, [r7, #24]
 8008980:	69fa      	ldr	r2, [r7, #28]
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	617b      	str	r3, [r7, #20]
   return(result);
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1e5      	bne.n	800895a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2220      	movs	r2, #32
 8008992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e012      	b.n	80089c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2220      	movs	r2, #32
 80089a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3758      	adds	r7, #88	@ 0x58
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	603b      	str	r3, [r7, #0]
 80089dc:	4613      	mov	r3, r2
 80089de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e0:	e04f      	b.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e8:	d04b      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ea:	f7f9 facd 	bl	8001f88 <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d302      	bcc.n	8008a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d101      	bne.n	8008a04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e04e      	b.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0304 	and.w	r3, r3, #4
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d037      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	2b80      	cmp	r3, #128	@ 0x80
 8008a16:	d034      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	2b40      	cmp	r3, #64	@ 0x40
 8008a1c:	d031      	beq.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	f003 0308 	and.w	r3, r3, #8
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d110      	bne.n	8008a4e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2208      	movs	r2, #8
 8008a32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 f838 	bl	8008aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2208      	movs	r2, #8
 8008a3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e029      	b.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a5c:	d111      	bne.n	8008a82 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f81e 	bl	8008aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2220      	movs	r2, #32
 8008a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	e00f      	b.n	8008aa2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69da      	ldr	r2, [r3, #28]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	4013      	ands	r3, r2
 8008a8c:	68ba      	ldr	r2, [r7, #8]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	bf0c      	ite	eq
 8008a92:	2301      	moveq	r3, #1
 8008a94:	2300      	movne	r3, #0
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	461a      	mov	r2, r3
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	d0a0      	beq.n	80089e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008aa0:	2300      	movs	r3, #0
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b095      	sub	sp, #84	@ 0x54
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008aba:	e853 3f00 	ldrex	r3, [r3]
 8008abe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	461a      	mov	r2, r3
 8008ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ad2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ad8:	e841 2300 	strex	r3, r2, [r1]
 8008adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e6      	bne.n	8008ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3308      	adds	r3, #8
 8008aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	6a3b      	ldr	r3, [r7, #32]
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008afa:	f023 0301 	bic.w	r3, r3, #1
 8008afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3308      	adds	r3, #8
 8008b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e3      	bne.n	8008ae4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d118      	bne.n	8008b56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	e853 3f00 	ldrex	r3, [r3]
 8008b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	f023 0310 	bic.w	r3, r3, #16
 8008b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b42:	61bb      	str	r3, [r7, #24]
 8008b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b46:	6979      	ldr	r1, [r7, #20]
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	e841 2300 	strex	r3, r2, [r1]
 8008b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1e6      	bne.n	8008b24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b6a:	bf00      	nop
 8008b6c:	3754      	adds	r7, #84	@ 0x54
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_UARTEx_DisableFifoMode+0x16>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e027      	b.n	8008bdc <HAL_UARTEx_DisableFifoMode+0x66>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2224      	movs	r2, #36	@ 0x24
 8008b98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 0201 	bic.w	r2, r2, #1
 8008bb2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008bba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3714      	adds	r7, #20
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d101      	bne.n	8008c00 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e02d      	b.n	8008c5c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2224      	movs	r2, #36	@ 0x24
 8008c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 0201 	bic.w	r2, r2, #1
 8008c26:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f84f 	bl	8008ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2220      	movs	r2, #32
 8008c4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e02d      	b.n	8008cd8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2224      	movs	r2, #36	@ 0x24
 8008c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f811 	bl	8008ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b085      	sub	sp, #20
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d108      	bne.n	8008d02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d00:	e031      	b.n	8008d66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d02:	2308      	movs	r3, #8
 8008d04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d06:	2308      	movs	r3, #8
 8008d08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	0e5b      	lsrs	r3, r3, #25
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	f003 0307 	and.w	r3, r3, #7
 8008d18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	0f5b      	lsrs	r3, r3, #29
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	f003 0307 	and.w	r3, r3, #7
 8008d28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	7b3a      	ldrb	r2, [r7, #12]
 8008d2e:	4911      	ldr	r1, [pc, #68]	@ (8008d74 <UARTEx_SetNbDataToProcess+0x94>)
 8008d30:	5c8a      	ldrb	r2, [r1, r2]
 8008d32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d36:	7b3a      	ldrb	r2, [r7, #12]
 8008d38:	490f      	ldr	r1, [pc, #60]	@ (8008d78 <UARTEx_SetNbDataToProcess+0x98>)
 8008d3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	7b7a      	ldrb	r2, [r7, #13]
 8008d4c:	4909      	ldr	r1, [pc, #36]	@ (8008d74 <UARTEx_SetNbDataToProcess+0x94>)
 8008d4e:	5c8a      	ldrb	r2, [r1, r2]
 8008d50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d54:	7b7a      	ldrb	r2, [r7, #13]
 8008d56:	4908      	ldr	r1, [pc, #32]	@ (8008d78 <UARTEx_SetNbDataToProcess+0x98>)
 8008d58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008d66:	bf00      	nop
 8008d68:	3714      	adds	r7, #20
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	08008f60 	.word	0x08008f60
 8008d78:	08008f68 	.word	0x08008f68

08008d7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d94:	f043 0201 	orr.w	r2, r3, #1
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr

08008daa <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8008daa:	b084      	sub	sp, #16
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	f107 001c 	add.w	r0, r7, #28
 8008db8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e008      	b.n	8008dd8 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff ffd8 	bl	8008d7c <USB_CoreReset>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008de2:	b004      	add	sp, #16
 8008de4:	4770      	bx	lr

08008de6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b085      	sub	sp, #20
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008dee:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008df2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	401a      	ands	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008e02:	2300      	movs	r3, #0
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3714      	adds	r7, #20
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr

08008e10 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	460b      	mov	r3, r1
 8008e1a:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8008e1c:	78fb      	ldrb	r3, [r7, #3]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d106      	bne.n	8008e30 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8008e2e:	e00b      	b.n	8008e48 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 8008e30:	78fb      	ldrb	r3, [r7, #3]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d106      	bne.n	8008e44 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	641a      	str	r2, [r3, #64]	@ 0x40
 8008e42:	e001      	b.n	8008e48 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e000      	b.n	8008e4a <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	370c      	adds	r7, #12
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e54:	4770      	bx	lr

08008e56 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8008e56:	b084      	sub	sp, #16
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	f107 001c 	add.w	r0, r7, #28
 8008e64:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e72:	f023 0201 	bic.w	r2, r3, #1
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 8008e7a:	2100      	movs	r1, #0
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff ffc7 	bl	8008e10 <USB_SetCurrentMode>
 8008e82:	4603      	mov	r3, r0
 8008e84:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008e98:	b004      	add	sp, #16
 8008e9a:	4770      	bx	lr

08008e9c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ea8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr

08008ebe <memset>:
 8008ebe:	4402      	add	r2, r0
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d100      	bne.n	8008ec8 <memset+0xa>
 8008ec6:	4770      	bx	lr
 8008ec8:	f803 1b01 	strb.w	r1, [r3], #1
 8008ecc:	e7f9      	b.n	8008ec2 <memset+0x4>
	...

08008ed0 <__libc_init_array>:
 8008ed0:	b570      	push	{r4, r5, r6, lr}
 8008ed2:	4d0d      	ldr	r5, [pc, #52]	@ (8008f08 <__libc_init_array+0x38>)
 8008ed4:	2600      	movs	r6, #0
 8008ed6:	4c0d      	ldr	r4, [pc, #52]	@ (8008f0c <__libc_init_array+0x3c>)
 8008ed8:	1b64      	subs	r4, r4, r5
 8008eda:	10a4      	asrs	r4, r4, #2
 8008edc:	42a6      	cmp	r6, r4
 8008ede:	d109      	bne.n	8008ef4 <__libc_init_array+0x24>
 8008ee0:	4d0b      	ldr	r5, [pc, #44]	@ (8008f10 <__libc_init_array+0x40>)
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8008f14 <__libc_init_array+0x44>)
 8008ee6:	f000 f817 	bl	8008f18 <_init>
 8008eea:	1b64      	subs	r4, r4, r5
 8008eec:	10a4      	asrs	r4, r4, #2
 8008eee:	42a6      	cmp	r6, r4
 8008ef0:	d105      	bne.n	8008efe <__libc_init_array+0x2e>
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef8:	3601      	adds	r6, #1
 8008efa:	4798      	blx	r3
 8008efc:	e7ee      	b.n	8008edc <__libc_init_array+0xc>
 8008efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f02:	3601      	adds	r6, #1
 8008f04:	4798      	blx	r3
 8008f06:	e7f2      	b.n	8008eee <__libc_init_array+0x1e>
 8008f08:	08008f78 	.word	0x08008f78
 8008f0c:	08008f78 	.word	0x08008f78
 8008f10:	08008f78 	.word	0x08008f78
 8008f14:	08008f7c 	.word	0x08008f7c

08008f18 <_init>:
 8008f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1a:	bf00      	nop
 8008f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1e:	bc08      	pop	{r3}
 8008f20:	469e      	mov	lr, r3
 8008f22:	4770      	bx	lr

08008f24 <_fini>:
 8008f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f26:	bf00      	nop
 8008f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f2a:	bc08      	pop	{r3}
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	4770      	bx	lr
